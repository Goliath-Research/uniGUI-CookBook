unit SalesModel;

interface

uses
  MainModule,
  Spring,
  Spring.Collections,
  Spring.Persistence.Mapping.Attributes;

type

  TCustomer = class;
  TProduct  = class;
  TOrder    = class;
  TItem     = class;

  [Entity]
  [Table('Customers')]
  TCustomer = class
  private
    [Column('ID', [cpRequired, cpPrimaryKey, cpNotNull, cpDontInsert], 0, 0, 0, 'Primary Key')]
    [AutoGenerated]
    FID   : Integer;
    FName : string;

    [OneToMany(false, [ckCascadeAll])]
    FOrders : Lazy<IList<TOrder>>;
  public
    property ID   : Integer read FId;
    [Column('NAME', [], 64, 0, 0, 'Customer name')]
    property Name : string  read FName write FName;
  end;

  [Entity]
  [Table('Products')]
  TProduct = class
  private
    [Column('ID', [cpRequired, cpPrimaryKey, cpNotNull, cpDontInsert], 0, 0, 0, 'Primary Key')]
    [AutoGenerated]
    FID          : Integer;
    FDescription : string;
    FPrice       : Currency;
  public
    property ID: Integer read FId;
    [Column('DESCRIPTION', [], 64, 0, 0, 'Product description')]
    property Description: string read FDescription write FDescription;
    [Column('PRICE', [], 0, 0, 0, 'Product price')]
    property Price: Currency read FPrice write FPrice;
  end;

  [Entity]
  [Table('Orders')]
  TOrder = class
  private
    [Column('ID', [cpRequired, cpPrimaryKey, cpNotNull, cpDontInsert], 0, 0, 0, 'Primary Key')]
    [AutoGenerated]
    FID         : integer;
    FCustomerID : integer;
    FCustomer   : TCustomer;
    FPosted     : TDateTime;
    FPaid       : Nullable<TDateTime>;
    [OneToMany(true, [ckCascadeAll])]
    FItems      : Lazy<IList<TItem>>;

    function GetTotal: Currency;
  public
    constructor Create;

    property ID      : integer       read FID;

    //[Column('CustomerID', [cpRequired, cpNotNull], 0, 0, 0, 'Reference to Customer')]
    [Column][JoinColumnAttribute('CustomerID', 'Customers', 'ID')]
    property CustomerID : integer    read FCustomerID write FCustomerID;

    [Column]
    property Posted   : TDateTime    read FPosted write FPosted;
    [Column]
    property Paid     : Nullable<TDateTime>  read FPaid write FPaid;

    [ForeignJoinColumnAttribute('Items', 'Items', 'ID', [fsOnDeleteCascade])]
    property Items    : Lazy<IList<TItem> >read FItems;
    property Total    : Currency  read GetTotal;

    [ManyToOne(False, [ckCascadeAll], 'CustomerID')]
    property Customer : TCustomer read FCustomer write FCustomer;
  end;

  [Entity]
  [Table('Items')]
  TItem = class
  private
    [Column('ID', [cpRequired, cpPrimaryKey, cpNotNull, cpDontInsert], 0, 0, 0, 'Primary Key')]
    [AutoGenerated]
    FID        : integer;
    FOrderID   : Integer;
    FOrder     : TOrder;
    FQuantity  : integer;
    FProductID : integer;
    FProduct   : TProduct;

    function GetTotal: Currency;
  public
    property ID       : integer   read FID;

    [Column][ForeignJoinColumn('OrderID', 'Orders', 'ID', [fsOnDeleteCascade, fsOnUpdateCascade])]
    property OrderID  : integer   read FOrderID  write FOrderID;

    [Column][ForeignJoinColumn('ProductID', 'Products', 'ID', [fsOnDeleteCascade, fsOnUpdateCascade])]
    property ProductID : integer read FProductID write FProductID;

    [Column]
    property Quantity : integer   read FQuantity write FQuantity;
    property Total    : Currency  read GetTotal;

    [ManyToOne(true, [ckCascadeAll], 'OrderID')]
    property Order    : TOrder    read FOrder  write FOrder;

    [ManyToOne(true, [ckCascadeAll], 'ProductID')]
    property Product  : TProduct read FProduct write FProduct;
  end;

implementation

{ TOrder }

constructor TOrder.Create;
begin
  inherited;

  FItems := nil;
end;

function TOrder.GetTotal: Currency;
var
  item : TItem;
begin
  Result := 0;
  for item in FItems.Value do
  begin
    Result := Result + item.Quantity * item.Product.Price;
  end;
end;

{ TItem }

function TItem.GetTotal: Currency;
begin
  Result := Quantity * Product.Price;
end;

end.
