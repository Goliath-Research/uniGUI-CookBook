unit Domino_TLB;

// ************************************************************************ //
// WARNING                                                                    
// -------                                                                    
// The types declared in this file were generated from data read from a       
// Type Library. If this type library is explicitly or indirectly (via        
// another type library referring to this type library) re-imported, or the   
// 'Refresh' command of the Type Library Editor activated while editing the   
// Type Library, the contents of this file will be regenerated and all        
// manual modifications will be lost.                                         
// ************************************************************************ //

// PASTLWTR : 1.2
// File generated on 03/04/2009 10:18:40 AM from Type Library described below.

// ************************************************************************  //
// Type Lib: C:\Program Files\IBM\Lotus\Notes\domobj.tlb (1)
// LIBID: {29131520-2EED-1069-BF5D-00DD011186B7}
// LCID: 0
// Helpfile: 
// HelpString: Lotus Domino Objects
// DepndLst: 
//   (1) v2.0 stdole, (C:\WINDOWS\system32\stdole2.tlb)
// Errors:
//   Hint: Symbol 'type' renamed to 'type_'
//   Hint: Symbol 'type' renamed to 'type_'
//   Hint: Parameter 'type' of IRegistration.RegisterNewUser changed to 'type_'
//   Hint: Member 'Class' of 'IEmbeddedObject' changed to 'Class_'
//   Hint: Member 'Object' of 'IEmbeddedObject' changed to 'Object_'
//   Hint: Symbol 'type' renamed to 'type_'
//   Hint: Symbol 'type' renamed to 'type_'
//   Hint: Member 'Label' of 'IOutlineEntry' changed to 'Label_'
//   Hint: Symbol 'type' renamed to 'type_'
//   Hint: Symbol 'type' renamed to 'type_'
//   Error creating palette bitmap of (TNotesACL) : Server C:\Program Files\IBM\Lotus\Notes\nlsxbe.dll contains no icons
//   Error creating palette bitmap of (TNotesACLEntry) : Server C:\Program Files\IBM\Lotus\Notes\nlsxbe.dll contains no icons
//   Error creating palette bitmap of (TNotesAgent) : Server C:\Program Files\IBM\Lotus\Notes\nlsxbe.dll contains no icons
//   Error creating palette bitmap of (TNotesDatabase) : Server C:\Program Files\IBM\Lotus\Notes\nlsxbe.dll contains no icons
//   Error creating palette bitmap of (TNotesDateRange) : Server C:\Program Files\IBM\Lotus\Notes\nlsxbe.dll contains no icons
//   Error creating palette bitmap of (TNotesDateTime) : Server C:\Program Files\IBM\Lotus\Notes\nlsxbe.dll contains no icons
//   Error creating palette bitmap of (TNotesDbDirectory) : Server C:\Program Files\IBM\Lotus\Notes\nlsxbe.dll contains no icons
//   Error creating palette bitmap of (TNotesDocument) : Server C:\Program Files\IBM\Lotus\Notes\nlsxbe.dll contains no icons
//   Error creating palette bitmap of (TNotesDocumentCollection) : Server C:\Program Files\IBM\Lotus\Notes\nlsxbe.dll contains no icons
//   Error creating palette bitmap of (TNotesEmbeddedObject) : Server C:\Program Files\IBM\Lotus\Notes\nlsxbe.dll contains no icons
//   Error creating palette bitmap of (TNotesForm) : Server C:\Program Files\IBM\Lotus\Notes\nlsxbe.dll contains no icons
//   Error creating palette bitmap of (TNotesItem) : Server C:\Program Files\IBM\Lotus\Notes\nlsxbe.dll contains no icons
//   Error creating palette bitmap of (TNotesInternational) : Server C:\Program Files\IBM\Lotus\Notes\nlsxbe.dll contains no icons
//   Error creating palette bitmap of (TNotesLog) : Server C:\Program Files\IBM\Lotus\Notes\nlsxbe.dll contains no icons
//   Error creating palette bitmap of (TNotesName) : Server C:\Program Files\IBM\Lotus\Notes\nlsxbe.dll contains no icons
//   Error creating palette bitmap of (TNotesNewsletter) : Server C:\Program Files\IBM\Lotus\Notes\nlsxbe.dll contains no icons
//   Error creating palette bitmap of (TNotesOutline) : Server C:\Program Files\IBM\Lotus\Notes\nlsxbe.dll contains no icons
//   Error creating palette bitmap of (TNotesOutlineEntry) : Server C:\Program Files\IBM\Lotus\Notes\nlsxbe.dll contains no icons
//   Error creating palette bitmap of (TNotesRichTextItem) : Server C:\Program Files\IBM\Lotus\Notes\nlsxbe.dll contains no icons
//   Error creating palette bitmap of (TNotesRichTextStyle) : Server C:\Program Files\IBM\Lotus\Notes\nlsxbe.dll contains no icons
//   Error creating palette bitmap of (TNotesRichTextParagraphStyle) : Server C:\Program Files\IBM\Lotus\Notes\nlsxbe.dll contains no icons
//   Error creating palette bitmap of (TNotesRichTextTab) : Server C:\Program Files\IBM\Lotus\Notes\nlsxbe.dll contains no icons
//   Error creating palette bitmap of (TNotesRegistration) : Server C:\Program Files\IBM\Lotus\Notes\nlsxbe.dll contains no icons
//   Error creating palette bitmap of (TNotesReplication) : Server C:\Program Files\IBM\Lotus\Notes\nlsxbe.dll contains no icons
//   Error creating palette bitmap of (TNotesSession) : Server C:\Program Files\IBM\Lotus\Notes\nlsxbe.dll contains no icons
//   Error creating palette bitmap of (TNotesView) : Server C:\Program Files\IBM\Lotus\Notes\nlsxbe.dll contains no icons
//   Error creating palette bitmap of (TNotesViewColumn) : Server C:\Program Files\IBM\Lotus\Notes\nlsxbe.dll contains no icons
//   Error creating palette bitmap of (TNotesViewEntry) : Server C:\Program Files\IBM\Lotus\Notes\nlsxbe.dll contains no icons
//   Error creating palette bitmap of (TNotesViewEntryCollection) : Server C:\Program Files\IBM\Lotus\Notes\nlsxbe.dll contains no icons
//   Error creating palette bitmap of (TNotesViewNavigator) : Server C:\Program Files\IBM\Lotus\Notes\nlsxbe.dll contains no icons
//   Error creating palette bitmap of (TNotesMIMEEntity) : Server C:\Program Files\IBM\Lotus\Notes\nlsxbe.dll contains no icons
//   Error creating palette bitmap of (TNotesMIMEHeader) : Server C:\Program Files\IBM\Lotus\Notes\nlsxbe.dll contains no icons
//   Error creating palette bitmap of (TNotesStream) : Server C:\Program Files\IBM\Lotus\Notes\nlsxbe.dll contains no icons
//   Error creating palette bitmap of (TNotesAdministrationProcess) : Server C:\Program Files\IBM\Lotus\Notes\nlsxbe.dll contains no icons
//   Error creating palette bitmap of (TNotesReplicationEntry) : Server C:\Program Files\IBM\Lotus\Notes\nlsxbe.dll contains no icons
//   Error creating palette bitmap of (TNotesColorObject) : Server C:\Program Files\IBM\Lotus\Notes\nlsxbe.dll contains no icons
//   Error creating palette bitmap of (TNotesRichTextNavigator) : Server C:\Program Files\IBM\Lotus\Notes\nlsxbe.dll contains no icons
//   Error creating palette bitmap of (TNotesRichTextRange) : Server C:\Program Files\IBM\Lotus\Notes\nlsxbe.dll contains no icons
//   Error creating palette bitmap of (TNotesRichTextDoclink) : Server C:\Program Files\IBM\Lotus\Notes\nlsxbe.dll contains no icons
//   Error creating palette bitmap of (TNotesRichTextSection) : Server C:\Program Files\IBM\Lotus\Notes\nlsxbe.dll contains no icons
//   Error creating palette bitmap of (TNotesRichTextTable) : Server C:\Program Files\IBM\Lotus\Notes\nlsxbe.dll contains no icons
//   Error creating palette bitmap of (TNotesNoteCollection) : Server C:\Program Files\IBM\Lotus\Notes\nlsxbe.dll contains no icons
//   Error creating palette bitmap of (TNotesDXLExporter) : Server C:\Program Files\IBM\Lotus\Notes\nlsxbe.dll contains no icons
//   Error creating palette bitmap of (TNotesDXLImporter) : Server C:\Program Files\IBM\Lotus\Notes\nlsxbe.dll contains no icons
// ************************************************************************ //
// *************************************************************************//
// NOTE:                                                                      
// Items guarded by $IFDEF_LIVE_SERVER_AT_DESIGN_TIME are used by properties  
// which return objects that may need to be explicitly created via a function 
// call prior to any access via the property. These items have been disabled  
// in order to prevent accidental use from within the object inspector. You   
// may enable them by defining LIVE_SERVER_AT_DESIGN_TIME or by selectively   
// removing them from the $IFDEF blocks. However, such items must still be    
// programmatically created via a method of the appropriate CoClass before    
// they can be used.                                                          
{$TYPEDADDRESS OFF} // Unit must be compiled without type-checked pointers. 
{$WARN SYMBOL_PLATFORM OFF}
{$WRITEABLECONST ON}
{$VARPROPSETTER ON}
interface

uses
  Windows,
  ActiveX,
  Classes,
  Graphics,
  OleServer,
  StdVCL,
  Variants;
  

// *********************************************************************//
// GUIDS declared in the TypeLibrary. Following prefixes are used:        
//   Type Libraries     : LIBID_xxxx                                      
//   CoClasses          : CLASS_xxxx                                      
//   DISPInterfaces     : DIID_xxxx                                       
//   Non-DISP interfaces: IID_xxxx                                        
// *********************************************************************//
const
  // TypeLibrary Major and minor versions
  DominoMajorVersion = 1;
  DominoMinorVersion = 2;

  LIBID_Domino: TGUID = '{29131520-2EED-1069-BF5D-00DD011186B7}';

  IID_IACL: TGUID = '{29131560-2EED-1069-BF5D-00DD011186B7}';
  CLASS_NotesACL: TGUID = '{29131521-2EED-1069-BF5D-00DD011186B7}';
  IID_IDatabase: TGUID = '{29131563-2EED-1069-BF5D-00DD011186B7}';
  IID_IDocumentCollection: TGUID = '{29131568-2EED-1069-BF5D-00DD011186B7}';
  IID_IDocument: TGUID = '{29131567-2EED-1069-BF5D-00DD011186B7}';
  IID_IView: TGUID = '{29131579-2EED-1069-BF5D-00DD011186B7}';
  IID_IViewEntryCollection: TGUID = '{2913157C-2EED-1069-BF5D-00DD011186B7}';
  IID_IViewEntry: TGUID = '{2913157B-2EED-1069-BF5D-00DD011186B7}';
  IID_IViewNavigator: TGUID = '{2913157D-2EED-1069-BF5D-00DD011186B7}';
  IID_IViewColumn: TGUID = '{2913157A-2EED-1069-BF5D-00DD011186B7}';
  IID_IItem: TGUID = '{2913156B-2EED-1069-BF5D-00DD011186B7}';
  IID_IItem2: TGUID = '{2913158A-2EED-1069-BF5D-00DD011186B7}';
  IID_IDateTime: TGUID = '{29131564-2EED-1069-BF5D-00DD011186B7}';
  IID_ISession: TGUID = '{29131578-2EED-1069-BF5D-00DD011186B7}';
  IID_IAgent: TGUID = '{29131562-2EED-1069-BF5D-00DD011186B7}';
  IID_IInternational: TGUID = '{2913156C-2EED-1069-BF5D-00DD011186B7}';
  IID_IName: TGUID = '{2913156E-2EED-1069-BF5D-00DD011186B7}';
  IID_IDateRange: TGUID = '{29131565-2EED-1069-BF5D-00DD011186B7}';
  IID_ILog: TGUID = '{2913156D-2EED-1069-BF5D-00DD011186B7}';
  IID_INewsletter: TGUID = '{2913156F-2EED-1069-BF5D-00DD011186B7}';
  IID_IRegistration: TGUID = '{29131572-2EED-1069-BF5D-00DD011186B7}';
  IID_IRichTextParagraphStyle: TGUID = '{29131576-2EED-1069-BF5D-00DD011186B7}';
  IID_IRichTextStyle: TGUID = '{29131575-2EED-1069-BF5D-00DD011186B7}';
  IID_IDbDirectory: TGUID = '{29131566-2EED-1069-BF5D-00DD011186B7}';
  IID_IAdministrationProcess: TGUID = '{29131581-2EED-1069-BF5D-00DD011186B7}';
  IID_INotesStream: TGUID = '{29131580-2EED-1069-BF5D-00DD011186B7}';
  IID_IColorObject: TGUID = '{29131583-2EED-1069-BF5D-00DD011186B7}';
  IID_IDXLExporter: TGUID = '{29131590-2EED-1069-BF5D-00DD011186B7}';
  IID_IDXLImporter: TGUID = '{29131591-2EED-1069-BF5D-00DD011186B7}';
  IID_IMIMEEntity: TGUID = '{2913157E-2EED-1069-BF5D-00DD011186B7}';
  IID_IMIMEHeader: TGUID = '{2913157F-2EED-1069-BF5D-00DD011186B7}';
  IID_IRichTextItem: TGUID = '{29131574-2EED-1069-BF5D-00DD011186B7}';
  IID_IEmbeddedObject: TGUID = '{29131569-2EED-1069-BF5D-00DD011186B7}';
  IID_IRichTextNavigator: TGUID = '{29131584-2EED-1069-BF5D-00DD011186B7}';
  IID_IRichTextRange: TGUID = '{29131585-2EED-1069-BF5D-00DD011186B7}';
  IID_IReplication: TGUID = '{29131573-2EED-1069-BF5D-00DD011186B7}';
  IID_IReplicationEntry: TGUID = '{29131582-2EED-1069-BF5D-00DD011186B7}';
  IID_IOutline: TGUID = '{29131570-2EED-1069-BF5D-00DD011186B7}';
  IID_IOutlineEntry: TGUID = '{29131571-2EED-1069-BF5D-00DD011186B7}';
  IID_IForm: TGUID = '{2913156A-2EED-1069-BF5D-00DD011186B7}';
  IID_INoteCollection: TGUID = '{29131589-2EED-1069-BF5D-00DD011186B7}';
  IID_IACLEntry: TGUID = '{29131561-2EED-1069-BF5D-00DD011186B7}';
  CLASS_NotesACLEntry: TGUID = '{29131522-2EED-1069-BF5D-00DD011186B7}';
  CLASS_NotesAgent: TGUID = '{29131523-2EED-1069-BF5D-00DD011186B7}';
  CLASS_NotesDatabase: TGUID = '{29131524-2EED-1069-BF5D-00DD011186B7}';
  CLASS_NotesDateRange: TGUID = '{29131525-2EED-1069-BF5D-00DD011186B7}';
  CLASS_NotesDateTime: TGUID = '{29131526-2EED-1069-BF5D-00DD011186B7}';
  CLASS_NotesDbDirectory: TGUID = '{29131527-2EED-1069-BF5D-00DD011186B7}';
  CLASS_NotesDocument: TGUID = '{29131528-2EED-1069-BF5D-00DD011186B7}';
  CLASS_NotesDocumentCollection: TGUID = '{29131529-2EED-1069-BF5D-00DD011186B7}';
  CLASS_NotesEmbeddedObject: TGUID = '{2913152A-2EED-1069-BF5D-00DD011186B7}';
  CLASS_NotesForm: TGUID = '{2913152B-2EED-1069-BF5D-00DD011186B7}';
  CLASS_NotesItem: TGUID = '{2913152C-2EED-1069-BF5D-00DD011186B7}';
  CLASS_NotesInternational: TGUID = '{2913152D-2EED-1069-BF5D-00DD011186B7}';
  CLASS_NotesLog: TGUID = '{2913152E-2EED-1069-BF5D-00DD011186B7}';
  CLASS_NotesName: TGUID = '{2913152F-2EED-1069-BF5D-00DD011186B7}';
  CLASS_NotesNewsletter: TGUID = '{29131530-2EED-1069-BF5D-00DD011186B7}';
  CLASS_NotesOutline: TGUID = '{29131531-2EED-1069-BF5D-00DD011186B7}';
  CLASS_NotesOutlineEntry: TGUID = '{29131532-2EED-1069-BF5D-00DD011186B7}';
  CLASS_NotesRichTextItem: TGUID = '{29131533-2EED-1069-BF5D-00DD011186B7}';
  CLASS_NotesRichTextStyle: TGUID = '{29131534-2EED-1069-BF5D-00DD011186B7}';
  CLASS_NotesRichTextParagraphStyle: TGUID = '{29131535-2EED-1069-BF5D-00DD011186B7}';
  IID_IRichTextTab: TGUID = '{29131577-2EED-1069-BF5D-00DD011186B7}';
  CLASS_NotesRichTextTab: TGUID = '{29131536-2EED-1069-BF5D-00DD011186B7}';
  CLASS_NotesRegistration: TGUID = '{29131537-2EED-1069-BF5D-00DD011186B7}';
  CLASS_NotesReplication: TGUID = '{29131538-2EED-1069-BF5D-00DD011186B7}';
  CLASS_NotesSession: TGUID = '{29131539-2EED-1069-BF5D-00DD011186B7}';
  CLASS_NotesView: TGUID = '{2913153A-2EED-1069-BF5D-00DD011186B7}';
  CLASS_NotesViewColumn: TGUID = '{2913153B-2EED-1069-BF5D-00DD011186B7}';
  CLASS_NotesViewEntry: TGUID = '{2913153C-2EED-1069-BF5D-00DD011186B7}';
  CLASS_NotesViewEntryCollection: TGUID = '{2913153D-2EED-1069-BF5D-00DD011186B7}';
  CLASS_NotesViewNavigator: TGUID = '{2913153E-2EED-1069-BF5D-00DD011186B7}';
  CLASS_NotesMIMEEntity: TGUID = '{2913153F-2EED-1069-BF5D-00DD011186B7}';
  CLASS_NotesMIMEHeader: TGUID = '{29131540-2EED-1069-BF5D-00DD011186B7}';
  CLASS_NotesStream: TGUID = '{29131541-2EED-1069-BF5D-00DD011186B7}';
  CLASS_NotesAdministrationProcess: TGUID = '{29131542-2EED-1069-BF5D-00DD011186B7}';
  CLASS_NotesReplicationEntry: TGUID = '{29131543-2EED-1069-BF5D-00DD011186B7}';
  CLASS_NotesColorObject: TGUID = '{29131544-2EED-1069-BF5D-00DD011186B7}';
  CLASS_NotesRichTextNavigator: TGUID = '{29131545-2EED-1069-BF5D-00DD011186B7}';
  CLASS_NotesRichTextRange: TGUID = '{29131546-2EED-1069-BF5D-00DD011186B7}';
  IID_IRichTextDoclink: TGUID = '{29131586-2EED-1069-BF5D-00DD011186B7}';
  CLASS_NotesRichTextDoclink: TGUID = '{29131547-2EED-1069-BF5D-00DD011186B7}';
  IID_IRichTextSection: TGUID = '{29131587-2EED-1069-BF5D-00DD011186B7}';
  CLASS_NotesRichTextSection: TGUID = '{29131548-2EED-1069-BF5D-00DD011186B7}';
  IID_IRichTextTable: TGUID = '{29131588-2EED-1069-BF5D-00DD011186B7}';
  CLASS_NotesRichTextTable: TGUID = '{29131549-2EED-1069-BF5D-00DD011186B7}';
  CLASS_NotesNoteCollection: TGUID = '{29131550-2EED-1069-BF5D-00DD011186B7}';
  CLASS_NotesDXLExporter: TGUID = '{29131551-2EED-1069-BF5D-00DD011186B7}';
  CLASS_NotesDXLImporter: TGUID = '{29131552-2EED-1069-BF5D-00DD011186B7}';

// *********************************************************************//
// Declaration of Enumerations defined in Type Library                    
// *********************************************************************//
// Constants for enum _ACLLEVEL
type
  _ACLLEVEL = TOleEnum;
const
  ACLLEVEL_NOACCESS = $00000000;
  ACLLEVEL_DEPOSITOR = $00000001;
  ACLLEVEL_READER = $00000002;
  ACLLEVEL_AUTHOR = $00000003;
  ACLLEVEL_EDITOR = $00000004;
  ACLLEVEL_DESIGNER = $00000005;
  ACLLEVEL_MANAGER = $00000006;

// Constants for enum _COLORS
type
  _COLORS = TOleEnum;
const
  COLOR_BLACK = $00000000;
  COLOR_WHITE = $00000001;
  COLOR_RED = $00000002;
  COLOR_GREEN = $00000003;
  COLOR_BLUE = $00000004;
  COLOR_MAGENTA = $00000005;
  COLOR_YELLOW = $00000006;
  COLOR_CYAN = $00000007;
  COLOR_DARK_RED = $00000008;
  COLOR_DARK_GREEN = $00000009;
  COLOR_DARK_BLUE = $0000000A;
  COLOR_DARK_MAGENTA = $0000000B;
  COLOR_DARK_YELLOW = $0000000C;
  COLOR_DARK_CYAN = $0000000D;
  COLOR_GRAY = $0000000E;
  COLOR_LIGHT_GRAY = $0000000F;

// Constants for enum _SPACING
type
  _SPACING = TOleEnum;
const
  SPACING_SINGLE = $00000000;
  SPACING_DOUBLE = $00000002;
  SPACING_ONE_POINT_25 = $00000003;
  SPACING_ONE_POINT_50 = $00000001;
  SPACING_ONE_POINT_75 = $00000004;
  VW_SPACING_SINGLE = $00000000;
  VW_SPACING_DOUBLE = $00000002;
  VW_SPACING_ONE_POINT_25 = $00000003;
  VW_SPACING_ONE_POINT_50 = $00000001;
  VW_SPACING_ONE_POINT_75 = $00000004;

// Constants for enum _VC_ALIGN
type
  _VC_ALIGN = TOleEnum;
const
  VC_ALIGN_LEFT = $00000000;
  VC_ALIGN_RIGHT = $00000001;
  VC_ALIGN_CENTER = $00000002;

// Constants for enum _VC_DATEFMT
type
  _VC_DATEFMT = TOleEnum;
const
  VC_FMT_YMD = $00000000;
  VC_FMT_MD = $00000002;
  VC_FMT_YM = $00000003;
  VC_FMT_Y4M = $00000006;

// Constants for enum _VC_FONTSTYLE
type
  _VC_FONTSTYLE = TOleEnum;
const
  VC_FONT_BOLD = $00000001;
  VC_FONT_ITALIC = $00000002;
  VC_FONT_UNDERLINE = $00000004;
  VC_FONT_STRIKEOUT = $00000008;
  VC_FONT_STRIKETHROUGH = $00000008;

// Constants for enum _VC_SEP
type
  _VC_SEP = TOleEnum;
const
  VC_SEP_SPACE = $00000001;
  VC_SEP_COMMA = $00000002;
  VC_SEP_SEMICOLON = $00000003;
  VC_SEP_NEWLINE = $00000004;

// Constants for enum _VC_NUMATTR
type
  _VC_NUMATTR = TOleEnum;
const
  VC_ATTR_PUNCTUATED = $00000001;
  VC_ATTR_PARENS = $00000002;
  VC_ATTR_PERCENT = $00000004;

// Constants for enum _VC_NUMFMT
type
  _VC_NUMFMT = TOleEnum;
const
  VC_FMT_GENERAL = $00000000;
  VC_FMT_FIXED = $00000001;
  VC_FMT_SCIENTIFIC = $00000002;
  VC_FMT_CURRENCY = $00000003;

// Constants for enum _VC_TDFMT
type
  _VC_TDFMT = TOleEnum;
const
  VC_FMT_DATE = $00000000;
  VC_FMT_TIME = $00000001;
  VC_FMT_DATETIME = $00000002;
  VC_FMT_TODAYTIME = $00000003;

// Constants for enum _VC_TIMEFMT
type
  _VC_TIMEFMT = TOleEnum;
const
  VC_FMT_HMS = $00000000;
  VC_FMT_HM = $00000001;
  VC_FMT_H = $00000002;
  VC_FMT_ALL = $00000003;

// Constants for enum _VC_TIMEZONEFMT
type
  _VC_TIMEZONEFMT = TOleEnum;
const
  VC_FMT_NEVER = $00000000;
  VC_FMT_SOMETIMES = $00000001;
  VC_FMT_ALWAYS = $00000002;

// Constants for enum _AG_TARGET
type
  _AG_TARGET = TOleEnum;
const
  TARGET_NONE = $00000000;
  TARGET_ALL_DOCS = $00000001;
  TARGET_NEW_DOCS = $00000002;
  TARGET_NEW_OR_MODIFIED_DOCS = $00000003;
  TARGET_SELECTED_DOCS = $00000004;
  TARGET_ALL_DOCS_IN_VIEW = $00000005;
  TARGET_UNREAD_DOCS_IN_VIEW = $00000006;

// Constants for enum _AG_TRIGGER
type
  _AG_TRIGGER = TOleEnum;
const
  TRIGGER_NONE = $00000000;
  TRIGGER_SCHEDULED = $00000001;
  TRIGGER_AFTER_MAIL_DELIVERY = $00000002;
  TRIGGER_DOC_PASTED = $00000003;
  TRIGGER_MANUAL = $00000004;
  TRIGGER_UPDATE = $00000005;
  TRIGGER_BEFORE_MAIL_DELIVERY = $00000006;

// Constants for enum _LOG_EVENTS
type
  _LOG_EVENTS = TOleEnum;
const
  EV_UNKNOWN = $00000000;
  EV_COMM = $00000001;
  EV_SECURITY = $00000002;
  EV_MAIL = $00000003;
  EV_REPLICA = $00000004;
  EV_RESOURCE = $00000005;
  EV_MISC = $00000006;
  EV_SERVER = $00000007;
  EV_ALARM = $00000008;
  EV_UPDATE = $00000009;

// Constants for enum _LOG_SEVERITY
type
  _LOG_SEVERITY = TOleEnum;
const
  SEV_UNKNOWN = $00000000;
  SEV_FATAL = $00000001;
  SEV_FAILURE = $00000002;
  SEV_WARNING1 = $00000003;
  SEV_WARNING2 = $00000004;
  SEV_NORMAL = $00000005;

// Constants for enum _REG_TYPE
type
  _REG_TYPE = TOleEnum;
const
  ID_FLAT = $000000AB;
  ID_HIERARCHICAL = $000000AC;
  ID_CERTIFIER = $000000AD;

// Constants for enum _USER_TYPE
type
  _USER_TYPE = TOleEnum;
const
  NOTES_LIMITED_CLIENT = $000000AE;
  NOTES_DESKTOP_CLIENT = $000000AF;
  NOTES_FULL_CLIENT = $000000B0;

// Constants for enum _REG_MAILOWNACL
type
  _REG_MAILOWNACL = TOleEnum;
const
  REG_MAIL_OWNER_ACL_MANAGER = $00000000;
  REG_MAIL_OWNER_ACL_DESIGNER = $00000001;
  REG_MAIL_OWNER_ACL_EDITOR = $00000002;

// Constants for enum _REG_MAILTYPE
type
  _REG_MAILTYPE = TOleEnum;
const
  REG_MAILSYSTEM_NOTES = $00000000;
  REG_MAILSYSTEM_POP = $00000001;
  REG_MAILSYSTEM_IMAP = $00000002;
  REG_MAILSYSTEM_INOTES = $00000003;
  REG_MAILSYSTEM_INTERNET = $00000004;
  REG_MAILSYSTEM_OTHER = $00000005;
  REG_MAILSYSTEM_NONE = $00000006;

// Constants for enum _REG_ROAMCLEANUP
type
  _REG_ROAMCLEANUP = TOleEnum;
const
  REG_ROAMING_CLEANUP_NEVER = $00000000;
  REG_ROAMING_CLEANUP_EVERY_NDAYS = $00000001;
  REG_ROAMING_CLEANUP_AT_SHUTDOWN = $00000002;
  REG_ROAMING_CLEANUP_PROMPT = $00000003;

// Constants for enum _RT_ALIGN
type
  _RT_ALIGN = TOleEnum;
const
  ALIGN_LEFT = $00000000;
  ALIGN_RIGHT = $00000001;
  ALIGN_CENTER = $00000003;
  ALIGN_FULL = $00000002;
  ALIGN_NOWRAP = $00000004;

// Constants for enum _RT_PAGINATE
type
  _RT_PAGINATE = TOleEnum;
const
  PAGINATE_DEFAULT = $00000000;
  PAGINATE_BEFORE = $00000001;
  PAGINATE_KEEP_WITH_NEXT = $00000002;
  PAGINATE_KEEP_TOGETHER = $00000004;

// Constants for enum _RT_TAB
type
  _RT_TAB = TOleEnum;
const
  TAB_LEFT = $00000000;
  TAB_RIGHT = $00000001;
  TAB_DECIMAL = $00000002;
  TAB_CENTER = $00000003;

// Constants for enum _RT_EFFECTS
type
  _RT_EFFECTS = TOleEnum;
const
  EFFECTS_NONE = $00000000;
  EFFECTS_SUPERSCRIPT = $00000001;
  EFFECTS_SUBSCRIPT = $00000002;
  EFFECTS_SHADOW = $00000003;
  EFFECTS_EMBOSS = $00000004;
  EFFECTS_EXTRUDE = $00000005;

// Constants for enum _RT_FONTS
type
  _RT_FONTS = TOleEnum;
const
  FONT_ROMAN = $00000000;
  FONT_HELV = $00000001;
  FONT_COURIER = $00000004;

// Constants for enum _DB_TYPES
type
  _DB_TYPES = TOleEnum;
const
  REPLICA_CANDIDATE = $000004DD;
  TEMPLATE_CANDIDATE = $000004DE;
  DATABASE = $000004DF;
  NOTES_DATABASE = $000004DF;
  TEMPLATE = $000004E0;

// Constants for enum _ADMP_MAILDEL
type
  _ADMP_MAILDEL = TOleEnum;
const
  MAILDELNONE = $00000000;
  MAILDELHOME = $00000001;
  MAILDELALL = $00000002;

// Constants for enum _ADMP_PWDCHK
type
  _ADMP_PWDCHK = TOleEnum;
const
  PWD_CHK_DONTCHECKPASSWORD = $00000000;
  PWD_CHK_CHECKPASSWORD = $00000001;
  PWD_CHK_LOCKOUT = $00000002;

// Constants for enum _STMREAD_LEN
type
  _STMREAD_LEN = TOleEnum;
const
  STMREAD_LINE = $00000000;

// Constants for enum _EOL_TYPE
type
  _EOL_TYPE = TOleEnum;
const
  EOL_CRLF = $00000000;
  EOL_LF = $00000001;
  EOL_CR = $00000002;
  EOL_PLATFORM = $00000003;
  EOL_ANY = $00000004;
  EOL_NONE = $00000005;

// Constants for enum _DXLIMPORTOPTION
type
  _DXLIMPORTOPTION = TOleEnum;
const
  DXLIMPORTOPTION_IGNORE = $00000001;
  DXLIMPORTOPTION_CREATE = $00000002;
  DXLIMPORTOPTION_REPLACE_ELSE_IGNORE = $00000005;
  DXLIMPORTOPTION_REPLACE_ELSE_CREATE = $00000006;
  DXLIMPORTOPTION_UPDATE_ELSE_IGNORE = $00000009;
  DXLIMPORTOPTION_UPDATE_ELSE_CREATE = $0000000A;

// Constants for enum _VALIDATIONOPTION
type
  _VALIDATIONOPTION = TOleEnum;
const
  VALIDATE_NEVER = $00000000;
  VALIDATE_ALWAYS = $00000001;
  VALIDATE_AUTO = $00000002;

// Constants for enum _DXLLOGOPTION
type
  _DXLLOGOPTION = TOleEnum;
const
  DXLLOGOPTION_IGNORE = $00000001;
  DXLLOGOPTION_WARNING = $00000002;
  DXLLOGOPTION_ERROR = $00000003;
  DXLLOGOPTION_FATALERROR = $00000004;

// Constants for enum _SESS_POLICY
type
  _SESS_POLICY = TOleEnum;
const
  POLICYSETTINGS_ARCHIVE = $00000002;
  POLICYSETTINGS_DESKTOP = $00000004;
  POLICYSETTINGS_REGISTRATION = $00000000;
  POLICYSETTINGS_SECURITY = $00000003;
  POLICYSETTINGS_SETUP = $00000001;
  POLICYSETTINGS_MAIL = $00000005;

// Constants for enum _IT_TYPE
type
  _IT_TYPE = TOleEnum;
const
  ERRORITEM = $00000100;
  UNAVAILABLE = $00000200;
  Text = $00000500;
  NUMBERS = $00000300;
  DATETIMES = $00000400;
  Names = $00000432;
  Readers = $00000433;
  Authors = $00000434;
  RICHTEXT = $00000001;
  USERID = $00000700;
  Formula = $00000600;
  COLLATION = $00000002;
  NOTEREFS = $00000004;
  NOTELINKS = $00000007;
  ATTACHMENT = $0000043C;
  OTHEROBJECT = $0000043D;
  UNKNOWN = $00000000;
  ICON = $00000006;
  SIGNATURE = $00000008;
  USERDATA = $0000000E;
  EMBEDDEDOBJECT = $00000442;
  QUERYCD = $0000000F;
  ACTIONCD = $00000010;
  ASSISTANTINFO = $00000011;
  VIEWMAPDATA = $00000012;
  VIEWMAPLAYOUT = $00000013;
  LSOBJECT = $00000014;
  HTML = $00000015;
  MIME_PART = $00000019;
  RFC822TEXT = $00000502;

// Constants for enum _MIME_ENCODING
type
  _MIME_ENCODING = TOleEnum;
const
  ENC_NONE = $000006BD;
  ENC_QUOTED_PRINTABLE = $000006BE;
  ENC_BASE64 = $000006BF;
  ENC_IDENTITY_7BIT = $000006C0;
  ENC_IDENTITY_8BIT = $000006C1;
  ENC_IDENTITY_BINARY = $000006C2;
  ENC_EXTENSION = $000006C3;

// Constants for enum _SEARCH_PATH
type
  _SEARCH_PATH = TOleEnum;
const
  SEARCH_DEPTH = $000006BB;
  SEARCH_BREADTH = $000006BC;

// Constants for enum _EMBED_TYPE
type
  _EMBED_TYPE = TOleEnum;
const
  EMBED_OBJECTLINK = $000005AC;
  EMBED_OBJECT = $000005AD;
  EMBED_ATTACHMENT = $000005AE;

// Constants for enum _RT_ELEM
type
  _RT_ELEM = TOleEnum;
const
  RTELEM_TYPE_TABLE = $00000001;
  RTELEM_TYPE_TEXTRUN = $00000003;
  RTELEM_TYPE_TEXTPARAGRAPH = $00000004;
  RTELEM_TYPE_DOCLINK = $00000005;
  RTELEM_TYPE_SECTION = $00000006;
  RTELEM_TYPE_TABLECELL = $00000007;
  RTELEM_TYPE_FILEATTACHMENT = $00000008;
  RTELEM_TYPE_OLE = $00000009;
  RTELEM_TYPE_TEXTPOSITION = $0000000A;
  RTELEM_TYPE_TEXTSTRING = $0000000B;

// Constants for enum _RP_PRIORITY
type
  _RP_PRIORITY = TOleEnum;
const
  DB_REPLICATION_PRIORITY_LOW = $0000060B;
  DB_REPLICATION_PRIORITY_MED = $0000060C;
  DB_REPLICATION_PRIORITY_HIGH = $0000060D;
  DB_REPLICATION_PRIORITY_NOTSET = $0000061D;

// Constants for enum _OE_CLASS
type
  _OE_CLASS = TOleEnum;
const
  OUTLINE_CLASS_UNKNOWN = $0000088D;
  OUTLINE_CLASS_DOCUMENT = $0000088E;
  OUTLINE_CLASS_VIEW = $0000088F;
  OUTLINE_CLASS_FORM = $00000890;
  OUTLINE_CLASS_NAVIGATOR = $00000891;
  OUTLINE_CLASS_DATABASE = $00000892;
  OUTLINE_CLASS_FRAMESET = $00000893;
  OUTLINE_CLASS_PAGE = $00000894;
  OUTLINE_CLASS_FOLDER = $00000895;

// Constants for enum _OE_TYPE
type
  _OE_TYPE = TOleEnum;
const
  OUTLINE_TYPE_URL = $00000889;
  OUTLINE_TYPE_NOTELINK = $0000088A;
  OUTLINE_TYPE_NAMEDELEMENT = $0000088B;
  OUTLINE_TYPE_ACTION = $0000088C;
  OUTLINE_OTHER_VIEWS_TYPE = $00000634;
  OUTLINE_OTHER_FOLDERS_TYPE = $00000635;
  OUTLINE_OTHER_UNKNOWN_TYPE = $00000637;

// Constants for enum _FT_TYPES
type
  _FT_TYPES = TOleEnum;
const
  FT_SCORES = $00000008;
  FT_DATE_DES = $00000020;
  FT_DATE_ASC = $00000040;
  FT_STEMS = $00000200;
  FT_THESAURUS = $00000400;
  FT_DATECREATED_DES = $00000606;
  FT_DATECREATED_ASC = $00000607;
  FT_FILESYSTEM = $00001000;
  FT_DATABASE = $00002000;
  FT_FUZZY = $00004000;

// Constants for enum _FIELD_TYPE
type
  _FIELD_TYPE = TOleEnum;
const
  FORM_OBJECTLINK = $000005AC;
  FORM_OBJECT = $000005AD;
  FORM_ATTACHMENT = $000005AE;
  FIELD_UNKNOWN = $00000000;
  FIELD_RICHTEXT = $00000001;
  FIELD_NUMBERS = $00000300;
  FIELD_DATETIMES = $00000400;
  FIELD_TEXT = $00000500;
  FIELD_TEXTMULTI = $00000501;
  FIELD_FORMULA = $00000600;
  FIELD_USERID = $00000700;

// Constants for enum _FTIDX_FREQ
type
  _FTIDX_FREQ = TOleEnum;
const
  FTINDEX_DAILY = $00000001;
  FTINDEX_SCHEDULED = $00000002;
  FTINDEX_HOURLY = $00000003;
  FTINDEX_IMMEDIATE = $00000004;

// Constants for enum _DATABASE_TYPES
type
  _DATABASE_TYPES = TOleEnum;
const
  DBTYPE_WEB_APP = $00000001;
  DBTYPE_MAILFILE = $00000002;
  DBTYPE_MAILBOX = $00000003;
  DBTYPE_SUBSCRIPTIONS = $00000004;
  DBTYPE_NEWS_SVR_PROXY = $00000005;
  DBTYPE_IMAP_SVR_PROXY = $00000006;
  DBTYPE_PORTFOLIO = $00000007;
  DBTYPE_MULTIDB_SRCH = $00000008;
  DBTYPE_LIGHT_ADDR_BOOK = $00000009;
  DBTYPE_ADDR_BOOK = $0000000A;
  DBTYPE_PERS_JOURNAL = $0000000B;
  DBTYPE_LIBRARY = $0000000C;
  DBTYPE_STANDARD = $0000000D;

// Constants for enum _CMPC_OPTS
type
  _CMPC_OPTS = TOleEnum;
const
  CMPC_ARCHIVE_DELETE_COMPACT = $00000001;
  CMPC_ARCHIVE_DELETE_ONLY = $00000002;
  CMPC_RECOVER_REDUCE_INPLACE = $00000004;
  CMPC_RECOVER_INPLACE = $00000008;
  CMPC_COPYSTYLE = $00000010;
  CMPC_DISCARD_VIEW_INDICES = $00000020;
  CMPC_ENABLE_DOCTBLBIT_OPTMZN = $00000040;
  CMPC_DISABLE_DOCTBLBIT_OPTMZN = $00000080;
  CMPC_ENABLE_RESPONSE_INFO = $00000100;
  CMPC_DISABLE_RESPONSE_INFO = $00000200;
  CMPC_IGNORE_COPYSTYLE_ERRORS = $00000400;
  CMPC_ENABLE_LARGE_UNKTBL = $00000800;
  CMPC_DISABLE_LARGE_UNKTBL = $00001000;
  CMPC_NO_LOCKOUT = $00002000;
  CMPC_MAX_4GB = $00004000;
  CMPC_CHK_OVERLAP = $00008000;
  CMPC_REVERT_FILEFORMAT = $00010000;
  CMPC_ENABLE_TRANSACTIONLOGGING = $00020000;
  CMPC_DISABLE_TRANSACTIONLOGGING = $00040000;
  CMPC_ENABLE_UNREAD_MARKS = $00080000;
  CMPC_DISABLE_UNREAD_MARKS = $00100000;

// Constants for enum _FTIDX_OPTS
type
  _FTIDX_OPTS = TOleEnum;
const
  FTINDEX_ATTACHED_FILES = $00000001;
  FTINDEX_ENCRYPTED_FIELDS = $00000002;
  FTINDEX_ALL_BREAKS = $00000004;
  FTINDEX_CASE_SENSITIVE = $00000008;
  FTINDEX_ATTACHED_BIN_FILES = $00000010;

// Constants for enum _DBACL_PRIVS
type
  _DBACL_PRIVS = TOleEnum;
const
  DBACL_CREATE_DOCS = $00000001;
  DBACL_DELETE_DOCS = $00000002;
  DBACL_CREATE_PRIV_AGENTS = $00000004;
  DBACL_CREATE_PRIV_FOLDERS_VIEWS = $00000008;
  DBACL_CREATE_SHARED_FOLDERS_VIEWS = $00000010;
  DBACL_CREATE_SCRIPT_AGENTS = $00000020;
  DBACL_READ_PUBLIC_DOCS = $00000040;
  DBACL_WRITE_PUBLIC_DOCS = $00000080;
  DBACL_REPLICATE_COPY_DOCS = $00000100;

// Constants for enum _DBFIXUP_TYPES
type
  _DBFIXUP_TYPES = TOleEnum;
const
  FIXUP_DEFAULT = $00000000;
  FIXUP_VERIFY = $00000001;
  FIXUP_QUICK = $00000002;
  FIXUP_INCREMENTAL = $00000004;
  FIXUP_TXLOGGED = $00000008;
  FIXUP_NODELETE = $00000010;
  FIXUP_REVERT = $00000020;
  FIXUP_NOVIEWS = $00000040;

// Constants for enum _DB_OPTIONS
type
  _DB_OPTIONS = TOleEnum;
const
  DBOPT_LZCOMPRESSION = $00000041;
  DBOPT_MAINTAINLASTACCESSED = $0000002C;
  DBOPT_MOREFIELDS = $00000036;
  DBOPT_NOHEADLINEMONITORS = $0000002E;
  DBOPT_NOOVERWRITE = $00000024;
  DBOPT_NORESPONSEINFO = $00000026;
  DBOPT_NOTRANSACTIONLOGGING = $0000002D;
  DBOPT_NOUNREAD = $00000025;
  DBOPT_OPTIMIZATION = $00000029;
  DBOPT_SOFTDELETE = $00000031;
  DBOPT_REPLICATEUNREADMARKSTOCLUSTER = $00000046;
  DBOPT_REPLICATEUNREADMARKSTOANY = $00000047;

// Constants for enum _DBSIGN_TYPES
type
  _DBSIGN_TYPES = TOleEnum;
const
  DBSIGN_DOC_FORM = $00000004;
  DBSIGN_DOC_VIEW = $00000008;
  DBSIGN_DOC_ICON = $00000010;
  DBSIGN_DOC_ACL = $00000040;
  DBSIGN_DOC_DATA = $00000001;
  DBSIGN_DOC_HELP = $00000100;
  DBSIGN_DOC_AGENT = $00000200;
  DBSIGN_DOC_SHAREDFIELD = $00000400;
  DBSIGN_DOC_REPLFORMULA = $00000800;
  DBSIGN_DOC_ALL = $00007FFF;

// Constants for enum _DBMOD_TYPES
type
  _DBMOD_TYPES = TOleEnum;
const
  DBMOD_DOC_FORM = $00000004;
  DBMOD_DOC_VIEW = $00000008;
  DBMOD_DOC_ICON = $00000010;
  DBMOD_DOC_ACL = $00000040;
  DBMOD_DOC_DATA = $00000001;
  DBMOD_DOC_HELP = $00000100;
  DBMOD_DOC_AGENT = $00000200;
  DBMOD_DOC_SHAREDFIELD = $00000400;
  DBMOD_DOC_REPLFORMULA = $00000800;
  DBMOD_DOC_ALL = $00007FFF;

// Constants for enum _LSXBE_ACLTYPE
type
  _LSXBE_ACLTYPE = TOleEnum;
const
  ACLTYPE_UNSPECIFIED = $00000000;
  ACLTYPE_PERSON = $00000001;
  ACLTYPE_SERVER = $00000002;
  ACLTYPE_MIXEDGROUP = $00000003;
  ACLTYPE_PERSONGROUP = $00000004;
  ACLTYPE_SERVERGROUP = $00000005;

// Constants for enum _RT_TBLSTYLE
type
  _RT_TBLSTYLE = TOleEnum;
const
  TABLESTYLE_NONE = $00000000;
  TABLESTYLE_LEFTTOP = $00000001;
  TABLESTYLE_TOP = $00000002;
  TABLESTYLE_LEFT = $00000003;
  TABLESTYLE_ALTERNATINGCOLS = $00000004;
  TABLESTYLE_ALTERNATINGROWS = $00000005;
  TABLESTYLE_RIGHTTOP = $00000006;
  TABLESTYLE_RIGHT = $00000007;
  TABLESTYLE_SOLID = $00000008;

// Constants for enum NOTES_ERRORS
type
  NOTES_ERRORS = TOleEnum;
const
  ERR_NOTES_ERROR = $80040FA0;
  ERR_SYS_OUT_OF_MEMORY = $80040FA1;
  ERR_SYS_LOAD_OUT_OF_MEM = $80040FA2;
  ERR_SYS_FILE_NOT_FOUND = $80040FA3;
  ERR_SYS_DICT_NOT_ON_PATH = $80040FA4;
  ERR_NOTES_ERROR2 = $80040FA5;
  ERR_SYS_RESOURCE_NOT_FOUND = $80040FA8;
  ERR_SYS_LOADING_RESOURCE = $80040FA9;
  ERR_SYS_LOCKING_RESOURCE = $80040FAA;
  ERR_SYS_FREEING_RESOURCE = $80040FAB;
  ERR_SYS_NOSUCH_RESOURCE = $80040FAC;
  ERR_SYS_WARNING_TITLE = $80040FB0;
  ERR_MAIL_COPEN_FAILED = $80040FBA;
  ERR_MAIL_PAOPEN_FAILED = $80040FBB;
  ERR_MAIL_LAOPEN_FAILED = $80040FBC;
  ERR_MAIL_VIM_MESSAGE = $80040FBD;
  ERR_MAIL_CANT_CREATE = $80040FBE;
  ERR_MAIL_UNKNOWN_PROP = $80040FBF;
  ERR_MAIL_INVALID_MSG = $80040FC0;
  ERR_MAIL_NOPUBLIC_GRP = $80040FC1;
  ERR_MAIL_NOPRIVATE_GRP = $80040FC2;
  ERR_MAIL_GRPCREATE_FAILED = $80040FC3;
  ERR_MAIL_GROUP_DELETED = $80040FC4;
  ERR_MAIL_NAME_REQUIRED = $80040FC5;
  ERR_NOTES_FAILURE = $80040FC6;
  ERR_NOTES_NOSUCH_VIEW = $80040FC7;
  ERR_NOTES_NOFTINDEX = $80040FC8;
  ERR_NOTES_DBCREATE_FAILED = $80040FC9;
  ERR_NOTES_DBDELETE_FAILED = $80040FCA;
  ERR_NOTES_DBOPEN_FAILED = $80040FCB;
  ERR_NOTES_INVALID_FORMULA = $80040FCC;
  ERR_NOTES_INVALID_DATE = $80040FCD;
  ERR_NOTES_COPY_FAILED = $80040FCE;
  ERR_NOTES_VIEWOPEN_FAILED = $80040FCF;
  ERR_NOTES_NOTEDEL_FAILED = $80040FD0;
  ERR_NOTES_NEXTITEM_FAILED = $80040FD1;
  ERR_NOTES_FINDITEM_FAILED = $80040FD2;
  ERR_NOTES_MODLOAD_FAILED = $80040FD3;
  ERR_NOTES_PROCFIND_FAILED = $80040FD4;
  ERR_NOTES_RTWRITE_FAILED = $80040FD5;
  ERR_NOTES_RTCONVERT_FAILED = $80040FD6;
  ERR_NOTES_FTSRCH_FAILED = $80040FD7;
  ERR_NOTES_QUERY_FAILED = $80040FD8;
  ERR_NOTES_DOCSEARCH_FAILED = $80040FD9;
  ERR_NOTES_ITEMCOPY_FAILED = $80040FDA;
  ERR_NOTES_CREATENOTE_FAILED = $80040FDB;
  ERR_NOTES_DBNOACCESS = $80040FDC;
  ERR_NOTES_UNAME_LOOKUP = $80040FDD;
  ERR_NOTES_SESOPEN_FAILED = $80040FDE;
  ERR_NOTES_DATABASE_NOTOPEN = $80040FDF;
  ERR_NOTES_SESSION_DATECONV = $80040FE0;
  ERR_NOTES_SESSION_VALNOTSUPP = $80040FE1;
  ERR_NOTES_CANT_GETNTH = $80040FE2;
  ERR_NOTES_ATTACH_FAILED = $80040FE3;
  ERR_NOTES_DETACH_FAILED = $80040FE4;
  ERR_NOTES_EXTRACT_FAILED = $80040FE5;
  ERR_NOTES_DIRSEARCH_FAILED = $80040FE6;
  ERR_NOTES_BAD_INDEX = $80040FE7;
  ERR_NOTES_NOSUCH_DIRECTORY = $80040FE8;
  ERR_CDTEXTCREATE_FAILED = $80040FE9;
  ERR_CDASSIM_FAILED = $80040FEA;
  ERR_NOT_RT_ITEM = $80040FEB;
  ERR_NOTES_FORMCOMP_FAILED = $80040FEC;
  ERR_NOTES_FORMEVAL_FAILED = $80040FED;
  ERR_NOTES_ITEMCREATE_FAILED = $80040FEE;
  ERR_NOTES_DECRYPT_FAILED = $80040FEF;
  ERR_NOTES_NOTLOCAL_IDX = $80040FF0;
  ERR_NOTES_FTIDX_FAILED = $80040FF1;
  ERR_NOTES_NOTEOPEN_FAILED = $80040FF2;
  ERR_NOTES_RENDER_FAILED = $80040FF3;
  ERR_NOTES_FILENOTFOUND = $80040FF4;
  ERR_NOTES_UNKNOWN_TYPE = $80040FF5;
  ERR_NOTES_FILEOPEN_FAILED = $80040FF6;
  ERR_NOTES_FILEWRITE_FAILED = $80040FF7;
  ERR_NOTES_DATE_NOTSET = $80040FF8;
  ERR_NOTES_NODBNAME = $80040FF9;
  ERR_NOTES_TEMPLCOPY_FAILED = $80040FFA;
  ERR_NOTES_BAD_UNID = $80040FFB;
  ERR_NOTES_UNAME_REQ = $80040FFC;
  ERR_NOTES_GETACL_FAILED = $80040FFD;
  ERR_NOTES_ACLENTRY_FAILED = $80040FFE;
  ERR_NOTES_ACL_INVALID = $80040FFF;
  ERR_NOTES_QUERYACL_FAILED = $80041000;
  ERR_NOTES_REFRESH_FAILED = $80041001;
  ERR_NOTES_OLEPKG_FAILED = $80041002;
  ERR_NOTES_TMPFILE_FAILED = $80041003;
  ERR_NOTES_READFILE_FAILED = $80041004;
  ERR_NOTES_RTRENDER_FAILED = $80041005;
  ERR_NOTES_WRONG_CLASS = $80041006;
  ERR_NOTES_INVALID_ID = $80041007;
  ERR_NOTES_INVALID_AGENT = $80041008;
  ERR_NOTES_VIEWCLONE_FAILED = $80041009;
  ERR_NOTES_NOVIEWNAME = $8004100A;
  ERR_NOTES_NEWSGROUPDB_FAILED = $8004100B;
  ERR_NOTES_NONEWSGROUPNAME = $8004100C;
  ERR_NOTES_ARC_NOT_ENABLED = $8004100D;
  ERR_NOTES_ARC_INCORRECT_PROFILE = $8004100E;
  ERR_NOTES_ARC_REQ_SRC_ACCESS = $8004100F;
  ERR_NOTES_ARC_REQ_ARC_ACCESS = $80041010;
  ERR_NOTES_ARC_INCORRECT_SVR = $80041011;
  ERR_NOTES_ARC_ARCFILE_NOT_ON_SVR = $80041012;
  ERR_NOTES_ARC_FAILED = $80041013;
  ERR_NOTES_ARC_SERVER_ARCHIVING = $80041014;
  ERR_NOTES_ARC_SETTINGS_SIGNATURE = $80041015;
  ERR_NOTES_ARC_REQ_SRC_USER_ACCESS = $80041016;
  ERR_NOTES_ARC_REQ_ARC_USER_ACCESS = $80041017;
  ERR_NOTES_ARC_PROHIBITED = $80041018;
  ERR_LOG_DBOPEN_FAILED = $80041027;
  ERR_LOG_FOPEN_FAILED = $80041028;
  ERR_LOG_CDCREATE_FAILED = $80041029;
  ERR_LOG_MAILLOG_FAILED = $8004102A;
  ERR_MEM_HVPOOLFULL = $8004102B;
  ERR_NOTES_COPYACL_FAILED = $80041036;
  ERR_NOTES_DOC_NOTINVIEW = $80041037;
  ERR_NOTES_NOFTQUERY = $80041038;
  ERR_NOTES_NOITEMNAME = $80041039;
  ERR_NOTES_NOTEUPDATE_FAILED = $8004103A;
  ERR_NOTES_NOTELOCATE_FAILED = $8004103B;
  ERR_NOTES_VIEWDEL_FAILED = $8004103C;
  ERR_LOG_CONSTRUCT_FAILED = $8004103D;
  ERR_SEM_ALLOC_FAILED = $8004103E;
  ERR_NOTES_LOOKUP_FAILED = $8004103F;
  ERR_NOTES_SEND_FAILED = $80041040;
  ERR_NOTES_NCREATE_FAILED = $80041041;
  ERR_MACRO_IDTBL_FAILED = $80041042;
  ERR_MACRO_RUN_FAILED = $80041043;
  ERR_NOTES_DBOPEN_NOTLOCAL = $80041044;
  ERR_NOTES_SIGN_NOPERM = $80041045;
  ERR_NOTES_ENCRYPT_NOPERM = $80041046;
  ERR_NOTES_ENCRYPT_FAILED = $80041047;
  ERR_NOTES_NOSENDTO = $80041048;
  ERR_LOG_EVENTPUT_FAILED = $80041049;
  ERR_LOG_INVALID_EVTYPE = $8004104A;
  ERR_LOG_INVALID_SEVERITY = $8004104B;
  ERR_NOTES_NO_NEWSLETTERDOCS = $8004104C;
  ERR_NOTES_MAILDBOPEN_FAILED = $8004104D;
  ERR_NOTES_NEWSLETTER_FAILED = $8004104E;
  ERR_NOTES_DFLT_VID_FAILED = $8004104F;
  ERR_NOTES_KEYFIND_FAILED = $80041050;
  ERR_NOTES_RTTEXT_FAILED = $80041051;
  ERR_NOTES_RTDOCLINK_FAILED = $80041052;
  ERR_NOTES_NOPERM_DISKIO = $80041053;
  ERR_NOTES_NOPERM_SIGN = $80041054;
  ERR_NOTES_NOPERM_ENCRYPT = $80041055;
  ERR_NOTES_NOPERM_ENVIRON = $80041056;
  ERR_NOTES_NOPERM_ANY = $80041057;
  ERR_NOTES_NOSERV_DB = $80041058;
  ERR_NOTES_INVALID_DB = $80041059;
  ERR_NOTES_INVALID_CREDEL = $8004105A;
  ERR_NOTES_INVALID_DOC = $8004105B;
  ERR_NOTES_DBS_MUST_MATCH = $8004105C;
  ERR_NOTES_RESPONSE_FAILED = $8004105D;
  ERR_NOTES_NOLISTS = $8004105E;
  ERR_NOTES_CONTAINS_FAILED = $8004105F;
  ERR_NOTES_MUSTBE_STRING = $80041060;
  ERR_NOTES_DESVIEW_FAILED = $80041061;
  ERR_NOTES_ITEMARR_FAILED = $80041062;
  ERR_NOTES_SRVSEARCH_FAILED = $80041063;
  ERR_NOTES_UNKNOWN_SRCHTYPE = $80041064;
  ERR_NOTES_MUSTCALL_FIRSTDB = $80041065;
  ERR_NOTES_ALLDOCS_FAILED = $80041066;
  ERR_NOTES_ITYPENOT_TEXT = $80041067;
  ERR_NOTES_INVALID_ITYPE = $80041068;
  ERR_NOTES_NOSUCH_FOLDER = $80041069;
  ERR_NOTES_ADDRBOOK_FAILED = $8004106A;
  ERR_NOTES_NOTCONTEXT_DB = $8004106B;
  ERR_NOTES_LTDACCESS_FAILED = $8004106C;
  ERR_NOTES_LTDUPDATE_FAILED = $8004106D;
  ERR_NOTES_BADVIEW_VERSION = $8004106E;
  ERR_NOTES_NEED_ADT = $8004106F;
  ERR_NOTES_ACLWRITE_FAILED = $80041070;
  ERR_NOTES_RENAME_FAILED = $80041071;
  ERR_NOTES_NOSUCH_ROLENAME = $80041072;
  ERR_NOTES_PRIVNAME_FAILED = $80041073;
  ERR_NOTES_READPRIV_FAILED = $80041074;
  ERR_NOTES_DELPRIV_FAILED = $80041075;
  ERR_NOTES_DELENTRY_FAILED = $80041076;
  ERR_NOTES_NOSERV_EVENTS = $80041077;
  ERR_NOTES_INVALID_ACLENTRYNAME = $80041078;
  ERR_NOTES_ENTRYNAME_FAILED = $80041079;
  ERR_NOTES_NOTLOCAL_REPL = $8004107A;
  ERR_NOTES_REPL_FAILED = $8004107B;
  ERR_NOTES_NOTLOCAL_COMPACT = $8004107C;
  ERR_NOTES_COMPACT_FAILED = $8004107D;
  ERR_NOTES_TIMEADJUST_FAILED = $8004107E;
  ERR_NOTES_NOSUCH_EMBED = $8004107F;
  ERR_NOTES_NOSUCH_EOFILE = $80041080;
  ERR_NOTES_NOSUCH_PATH = $80041081;
  ERR_NOTES_EMBEDARR_FAILED = $80041082;
  ERR_NOTES_NOADDRS_FOUND = $80041083;
  ERR_NOTES_DUP_ROLENAME = $80041084;
  ERR_NOTES_CANTCREATE_FOLDER = $80041085;
  ERR_NOTERENDER_FAILED = $80041086;
  ERR_NOFROMFIELD = $80041087;
  ERR_TEXTLIST_FAILED = $80041088;
  ERR_NOTES_NOTA_DOCUMENT = $80041089;
  ERR_NOTES_VALIDATE_FAILED = $8004108A;
  ERR_NOTES_ABSTRACT_BUFFER = $8004108B;
  ERR_NOTES_ABSTRACTING_TEXT = $8004108C;
  ERR_NOTES_DESAGENT_FAILED = $8004108D;
  ERR_NOTES_MIXED_ARRAY = $8004108E;
  ERR_NOTES_INVALID_DOCLINK = $8004108F;
  ERR_TEXTLIST_BAD_INPUT = $80041090;
  ERR_NOTES_CANTREMOVE = $80041091;
  ERR_NOTES_CANTENCRYPT = $80041092;
  ERR_NOTES_CANTCLOSEDB = $80041093;
  ERR_NOTES_CANTRUN_OLEOBJ = $80041094;
  ERR_NOTES_CANTSHOW_OLEOBJ = $80041095;
  ERR_NOTES_NOEMBEDDED_OBJ = $80041096;
  ERR_NOTES_NOSUCH_EMBEDCLASS = $80041097;
  ERR_NOTES_CANTGET_DBSUMMARY = $80041098;
  ERR_NOTES_CANTCOPY_ITEMTYPE = $80041099;
  ERR_NOTES_NEED_DB = $8004109A;
  ERR_NOTES_NEED_NOTE = $8004109B;
  ERR_NOTES_CANT_LINK_OLE1 = $8004109C;
  ERR_NOTES_ROLENAME_TOOBIG = $8004109D;
  ERR_NOTES_EOARRAY_FAILED = $8004109E;
  ERR_NOTES_ATTACHINFO_FAILED = $8004109F;
  ERR_NOTES_QUOTAINFO_FAILED = $800410A0;
  ERR_NOTES_DOCNOTSAVED = $800410A1;
  ERR_NOTES_ACLNEXT_INVALID = $800410A2;
  ERR_NOTES_NOTAFILE = $800410A3;
  ERR_NOTES_CANTFIND_ATTACHMENT = $800410A4;
  ERR_NOTES_NOSUCH_VERB = $800410A5;
  ERR_NOTES_DOVERB_FAILED = $800410A6;
  ERR_NOTES_INVALID_ADTTYPE = $800410A7;
  ERR_NOTES_FTQUERY_FAILED = $800410A8;
  ERR_NOTES_NOSUCH_DBID = $800410A9;
  ERR_NOTES_OPENBYRID_FAILED = $800410AA;
  ERR_NOTES_BAD_UNPROCFT = $800410AB;
  ERR_AGENT_NO_RECURSION = $800410AC;
  ERR_NOTES_CANTGET_MAILSERVER = $800410AD;
  ERR_NOTES_BAD_NOTEID = $800410AE;
  ERR_NOTES_DBSECURITY = $800410AF;
  ERR_NOTES_DELETE_AGENT = $800410B0;
  ERR_NOTES_RUN_AGENT = $800410B1;
  ERR_NOTES_NOSUCH_DOCINDEX = $800410B2;
  ERR_NOTES_BAD_SOURCE_CLASS = $800410B3;
  ERR_NOTES_CANT_CHANGE_DEFACL = $800410B4;
  ERR_NOTES_LINKNOCLASS = $800410B5;
  ERR_NOTES_CANTDO_ARRAYOFARRAY = $800410B6;
  ERR_NOTES_SESSION_CLOSED = $800410B7;
  ERR_NOTES_CANTOPEN_URLDB = $800410B8;
  ERR_NOTES_NEED_URL = $800410B9;
  ERR_NOTES_INVALID_URL = $800410BA;
  ERR_NOTES_INVALID_URLHEADER = $800410BB;
  ERR_NOTES_NOSUCH_URLHEADER = $800410BC;
  ERR_NOTES_NOUNPROC_DOCS = $800410BD;
  ERR_NOTES_EMBED_FAILED = $800410BE;
  ERR_NOTES_NODEL_CURRENTDB = $800410BF;
  ERR_NOTES_INVALID_TIMEEXPR = $800410C0;
  ERR_NOTES_RECURSIVE_RENDER = $800410C1;
  ERR_NOTES_INVALID_ITEM = $800410C2;
  ERR_NOTES_NOMOVETO_PRIV1STUSE = $800410C3;
  ERR_NOTES_SAMESRV_REPLICA = $800410C4;
  ERR_NOTES_CANT_SIGN = $800410C5;
  ERR_NOTES_NO_MATCH = $800410C6;
  ERR_NOTES_AMBIGUOUS_MATCH = $800410C7;
  ERR_NOTES_DBALREADY_OPEN = $800410C8;
  ERR_NOTES_OLE_NOTAVAIL = $800410C9;
  ERR_NOTES_ARRAY_NOGOOD = $800410CA;
  ERR_NOTES_REGARG_NOTGIVEN = $800410CB;
  ERR_NOTES_MISSING_CERTID = $800410CC;
  ERR_NOTES_NOCERT_CTX = $800410CD;
  ERR_NOTES_REGFAILED = $800410CE;
  ERR_NOTES_SRVREGFAILED = $800410CF;
  ERR_NOTES_CERTREGFAILED = $800410D0;
  ERR_NOTES_XCERTFAILED = $800410D1;
  ERR_NOTES_RECERTFAILED = $800410D2;
  ERR_NOTES_NOSUCH_BOOL = $800410D3;
  ERR_NOTES_CANTSWITCH_ID = $800410D4;
  ERR_NOTES_NOSUCH_MAILPATH = $800410D5;
  ERR_NOTES_BAD_IDFILE = $800410D6;
  ERR_NOTES_CANTADD_USER = $800410D7;
  ERR_NOTES_CANTADD_SERV = $800410D8;
  ERR_NOTES_CANTADD_CERT = $800410D9;
  ERR_NOTES_NOCURRENT_AGENT = $800410DA;
  ERR_NOTES_AGENTLOG_FAILED = $800410DB;
  ERR_NOTES_NOSUCH_CERTIDTYPE = $800410DC;
  ERR_NOTES_NOCURRENT_FTRESULT = $800410DD;
  ERR_NOTES_IDTBL_FAILED = $800410DE;
  ERR_NOTES_PROF_ARG_MISSING = $800410DF;
  ERR_NOTES_NOSUCH_PROFILE = $800410E0;
  ERR_NOTES_PROFUPDATE_FAILED = $800410E1;
  ERR_NOTES_PROFDELETE_FAILED = $800410E2;
  ERR_NOTES_NOSUCH_ARG = $800410E3;
  ERR_NOTES_WRONG_UNID_LEN = $800410E4;
  ERR_NOTES_DESFORM_FAILED = $800410E5;
  ERR_NOTES_FORMDEL_FAILED = $800410E6;
  ERR_NOTES_NOCLOSE_CURRDB = $800410E7;
  ERR_NOTES_FREETIME_FAILED = $800410E8;
  ERR_NOTES_UNIFORM_FAILED = $800410E9;
  ERR_NOTES_GETOPTION_FAILED = $800410EA;
  ERR_NOTES_MARKREAD_FAILED = $800410EB;
  ERR_NOTES_MARKUNREAD_FAILED = $800410EC;
  ERR_NOTES_MULTIDB_FAILED = $800410ED;
  ERR_NOTES_ADDPROF_FAILED = $800410EE;
  ERR_NOTES_ULOOKUP_FAILED = $800410EF;
  ERR_NOTES_INVALID_OBJECT = $800410F0;
  ERR_NOTES_STAMP_FAILED = $800410F1;
  ERR_NOTES_BAD_ORGUNIT = $800410F2;
  ERR_NOTES_BAD_FTSORT = $800410F3;
  ERR_NOTES_NOTCONTEXT_COLLEC = $800410F4;
  ERR_NOTES_ECLACCESS_FAILED = $800410F5;
  ERR_NOTES_W32DOM_FAILED = $800410F6;
  ERR_NOTES_W32DOM_NOFIRSTUSER = $800410F7;
  ERR_NOTES_W32DOM_BADPLATFORM = $800410F8;
  ERR_NOTES_W32DOM_BADNETAPI32 = $800410F9;
  ERR_NOTES_W32DOM_DOMAIN_CONTROLLER = $800410FA;
  ERR_NOTES_TOOMANY_SORT_KEYS = $800410FB;
  ERR_NOTES_BAD_KEYTYPE = $800410FC;
  ERR_NOTES_CANT_SELF_ASSIMILATE = $800410FD;
  ERR_NOTES_CANT_SELF_COPY = $800410FE;
  ERR_NOTES_POP3_FAILED = $800410FF;
  ERR_NOTES_ARRCREATE_FAILED = $80041100;
  ERR_NOTES_AGSAVE_FAILED = $80041101;
  ERR_NOTES_CANTREMOVE_AGC = $80041102;
  ERR_NOTES_CANTENCRYPT_AGC = $80041103;
  ERR_NOTES_RTSTYLE_CREATEFAILED = $80041104;
  ERR_NOTES_RTSTYLE_APPENDFAILED = $80041105;
  ERR_NOTES_RTSTYLE_BADFONT = $80041106;
  ERR_NOTES_NO_CONTEXTDB = $80041107;
  ERR_NOTES_NULL_APPENDLIST = $80041108;
  ERR_NOTES_NOSUCH_JAVA_TYPE = $80041109;
  ERR_NOTES_INVALID_JARRAY = $8004110A;
  ERR_NOTES_RTSTYLE_BADBOOL = $8004110B;
  ERR_NOTES_RTSTYLE_BADFONTSIZE = $8004110C;
  ERR_NOTES_RTSTYLE_BADCOLOR = $8004110D;
  ERR_NOTES_RTSTYLE_BADEFFECT = $8004110E;
  ERR_NOTES_NOTREMOTE_DB = $8004110F;
  ERR_NOTES_RTITEM_EXISTS = $80041110;
  ERR_NOTES_NOFORM = $80041111;
  ERR_NOTES_NOTA_VECTOR = $80041112;
  ERR_NOTES_SERVER_SWITCH = $80041113;
  ERR_NOTES_DBDIR_THREAD = $80041114;
  ERR_NOTES_ACL_CONSTRUCTOR_FAILED = $8004111C;
  ERR_NOTES_ACL_INVALID_TYPE = $8004111D;
  ERR_NOTES_INVALID_TIMEZONE = $8004111F;
  ERR_NOTES_VIEW_STATS = $80041120;
  ERR_NOTES_VIEW_ENTRY_READ = $80041121;
  ERR_NOTES_DBFOLDERREFS_NOT_SUPPORTED = $80041122;
  ERR_NOTES_DBFOLDERREFS_NOT_ENABLED = $80041123;
  ERR_NOTES_VE_NO_SEPARATOR = $80041124;
  ERR_NOTES_STRING_TOO_LONG = $80041125;
  ERR_NOTES_VIEW_FMT_READ = $80041126;
  ERR_NOTES_VIEW_INVALID_COLUMN = $8004112C;
  ERR_NOTES_NO_COLLECTION = $80041115;
  ERR_NOTES_NOT_IN_SESSION = $80041116;
  ERR_NOTES_INVALID_NAME = $80041117;
  ERR_NOTES_DELETED = $80041118;
  ERR_NOTES_NOT_LOCAL = $80041119;
  ERR_NOTES_INVALID_RANGE = $8004111A;
  ERR_NOTES_OBJECT_NOT_FOUND = $8004111B;
  ERR_NOTES_ITEM_CONVERT = $8004111E;
  ERR_NOTES_VIEW_BAD_ENTRY = $80041127;
  ERR_NOTES_VIEWNAV_BAD_MAX = $80041128;
  ERR_NOTES_VIEWNAV_BAD_POS = $80041129;
  ERR_NOTES_VIEWNAV_BAD_PARENT = $8004112A;
  ERR_NOTES_NOT_IMPLEMENTED = $8004112B;
  ERR_NOTES_RTPSTYLE_APPENDFAILED = $8004112D;
  ERR_NOTES_RTPSTYLE_TOOMANYTABS = $8004112E;
  ERR_NOTES_RTPSTYLE_OUTOFRANGE = $8004112F;
  ERR_NOTES_RTPSTYLE_BADALIGN = $80041130;
  ERR_NOTES_RTPSTYLE_BADSPACING = $80041131;
  ERR_NOTES_RTPSTYLE_BADPAGINATE = $80041132;
  ERR_NOTES_ACL_MISSING = $80041133;
  ERR_NOTES_SESSION_MISSING = $80041134;
  ERR_NOTES_DATABASE_MISSING = $80041135;
  ERR_NOTES_DOCUMENT_MISSING = $80041136;
  ERR_NOTES_VIEW_MISSING = $80041137;
  ERR_NOTES_PARENT_MISSING = $80041138;
  ERR_NOTES_NOT_RICHTEXT = $80041139;
  ERR_NOTES_PSTYPE_MISSING = $8004113A;
  ERR_NOTES_REMOVEALL_FAILED = $8004113B;
  ERR_NOTES_ENTRY_NOT_FROM_COLLECTION = $8004113C;
  ERR_NOTES_NOTE_NOT_FROM_COLLECTION = $8004113D;
  ERR_NOTES_ADDENTRY_DUP = $8004113E;
  ERR_NOTES_ADDENTRY_FAILED = $8004113F;
  ERR_MACRO_SYNCH_ENABLE_FAILED = $80041140;
  ERR_NOTES_SYNCH_RUN_AGENT = $80041141;
  ERR_NOTES_SYNCH_NOOLE = $80041142;
  ERR_NOTES_RTPSTYLE_BADTABTYPE = $80041143;
  ERR_NOTES_GETALLENTRIES_FAILED = $80041144;
  ERR_NOTES_EXECUTESETUP_FAILED = $80041145;
  ERR_NOTES_MAXDBSIZE_EXCEEDED = $80041146;
  ERR_NOTES_INVALID_NAV = $80041147;
  ERR_NOTES_SVRACCESS_FAILED = $80041149;
  ERR_NOTES_NOT_IN_VIEW = $8004114A;
  ERR_NOTES_NOT_IN_DB = $8004114B;
  ERR_NOTES_PROP_NOT_AVAIL = $8004114C;
  ERR_NOTES_NOT_IN_ACL = $8004114D;
  ERR_NOTES_NO_LOGS_OPEN = $8004114E;
  ERR_NOTES_CACHE_SZ_INVALID = $8004114F;
  ERR_NOTES_VIEW_ENTRY_REMOVED = $80041150;
  ERR_NOTES_VIEW_ENTRY_DELETED = $80041151;
  ERR_NOTES_DOCUMENT_DELETED = $80041152;
  ERR_NOTES_SYNCH_INVALIDOP = $80041153;
  ERR_NOTES_CREATEOUTLINE_FAILED = $80041154;
  ERR_NOTES_HTML_GENFAILED = $80041155;
  ERR_NOTES_CREATE_DOCCOLL_FAILED = $80041156;
  ERR_NOTES_EXECUTESETUP_FAILED2 = $80041157;
  ERR_NOTES_CANTUPDATE_FOLDER = $80041158;
  ERR_NOTES_RTITEM_MISSING = $80041159;
  ERR_NOTES_NO_AUTHORIZATION = $8004115A;
  ERR_NOTES_NAME_MISSING = $8004115B;
  ERR_NOTES_ITEM_MISSING = $8004115C;
  ERR_NOTES_DATERANGE_MISSING = $8004115D;
  ERR_NOTES_VIEWENTRY_MISSING = $8004115E;
  ERR_NOTES_VIEWENTRY_OR_DOC_MISSING = $8004115F;
  ERR_NOTES_OUTLINE_MISSING = $80041160;
  ERR_NOTES_DATETIME_MISSING = $80041161;
  ERR_NOTES_VNAV_CAT_PARENT = $80041162;
  ERR_NOTES_VNAV_CAT_GOTO = $80041163;
  ERR_NOTES_INVALID_SIZE = $80041164;
  ERR_NOTES_REGSERVER_NOTSET = $80041165;
  ERR_NOTES_NOT_ATTACHMENT = $80041166;
  ERR_NOTES_URL_NOT_RESOLVED = $80041167;
  ERR_NOTES_INVALID_IOR = $80041168;
  ERR_NOTES_GETIOR_FAILED = $80041169;
  ERR_NOTES_INVALID_DATESPEC = $8004116A;
  ERR_NOTES_INVALID_TIMESPEC = $8004116B;
  ERR_NOTES_CANTSAVE_CURRENTAGENT = $8004116C;
  ERR_NOTES_CANTDISABLE_MANUALAGENT = $8004116D;
  ERR_NOTES_BAD_ENTRYDOC = $8004116E;
  ERR_NOTES_UNINITIALIZED_THREAD = $8004116F;
  ERR_NOTES_INVALIDATED_OBJECT = $80041170;
  ERR_NOTES_ACL_ROLE_INVALID = $80041171;
  ERR_NOTES_ARG_DELETED = $80041172;
  ERR_NOTES_ACLENTRY_MISSING = $80041173;
  ERR_NOTES_INVALID_DATE_NOARG = $80041174;
  ERR_NOTES_ADDDOC_DUP = $80041175;
  ERR_NOTES_BADDBSIZE = $80041176;
  ERR_NOTES_BAD_OUTLINE_ENTRY = $80041177;
  ERR_NOTES_CANTMODIFY_REMOTE_AGENT = $80041178;
  ERR_NOTES_CANT_ADD_CHILD_BEFORE_ENTRY = $80041179;
  ERR_NOTES_NULL_REF_ENTRY = $8004117A;
  ERR_NOTES_REF_ENTRY_NOTINOUTLINE = $8004117B;
  ERR_NOTES_OUTLINE_ADDENTRY_FAILED = $8004117C;
  ERR_NOTES_OUTLINE_MOVEENTRY_FAILED = $8004117D;
  ERR_NOTES_OUTLINE_REMOVEENTRY_FAILED = $8004117E;
  ERR_NOTES_INVALID_PLACEHOLDER_PARENT = $8004117F;
  ERR_NOTES_INVALID_REPLICATION_PRIORITY = $80041180;
  ERR_NOTES_OUTLINE_INVALID_PRIVATE_VIEW = $80041181;
  ERR_NOTES_NOT_SUPPORTED = $80041182;
  ERR_NOTES_NEED_HDRNAME = $80041183;
  ERR_NOTES_NEED_MIMEENT = $80041184;
  ERR_NOTES_ITEM_EXISTS = $80041185;
  ERR_NOTES_INVALID_USERNAME_PASSWD = $80041186;
  ERR_NOTES_INVALID_USERNAME = $80041187;
  ERR_NOTES_SERVER_ACCESS_DENIED = $80041188;
  ERR_NOTES_NO_SERVER = $80041189;
  ERR_NOTES_SESSION_NOT_INIT = $8004118B;
  ERR_NOTES_SESSION_IS_INIT = $8004118C;
  ERR_NOTES_AGENT_SESSION = $8004118D;
  ERR_NOTES_INVALID_CREDENTIALS = $8004118E;
  ERR_NOTES_INVALID_LTPA = $8004118F;
  ERR_NOTES_CANT_GET_THAT = $80041190;
  ERR_NOTES_ARRAY_MISMATCH = $80041191;
  ERR_NOTES_RTCTX_POSITION_INVALID = $80041192;
  ERR_NOTES_RTTABLE_APPENDFAILED = $80041193;
  ERR_NOTES_RTTBL_MAXROWS = $80041194;
  ERR_NOTES_RTTBL_MAXCOLS = $80041195;
  ERR_NOTES_RTTBL_MINSIZE = $80041196;
  ERR_NOTES_RTCTX_POSITION_UNDEF = $80041197;
  ERR_NOTES_RTRNG_RESTRICTED_OPERATION = $80041198;
  ERR_NOTES_RTEDIT_FAILED = $80041199;
  ERR_NOTES_RTELEM_TYPEUNKNOWN = $8004119A;
  ERR_NOTES_RT_FIRSTFINISHINSERT = $8004119B;
  ERR_NOTES_METHODNOTAVAILABLE = $8004119C;
  ERR_NOTES_INVALID_VALUE = $8004119D;
  ERR_NOTES_DXLEXPORTER_INPUT_OBJECT = $8004119E;
  ERR_NOTES_DXLEXPORTER_OUTPUT_OBJECT = $8004119F;
  ERR_NOTES_ANADMINP_NOSUCH_CAORG = $800411A0;
  ERR_NOTES_ANADMINP_UNKNOWN = $800411A1;
  ERR_NOTES_RTNAV_INVALID_TYPE = $800411A2;
  ERR_NOTES_TIMEMERGE_FAILED = $800411A3;
  ERR_NOTES_GETFONT_FAILED = $800411A4;
  ERR_NOTES_DXLIMPORTER_INPUT_OBJECT = $800411A5;
  ERR_NOTES_DXLIMPORTER_OUTPUT_OBJECT = $800411A6;
  ERR_NOTES_XSLT_INPUT_OBJECT = $800411A7;
  ERR_NOTES_XSLT_OUTPUT_OBJECT = $800411A8;
  ERR_NOTES_XSLT_STYLESHEET_OBJECT = $800411A9;
  ERR_NOTES_DXLIMPORTER_FAILED = $800411AA;
  ERR_NOTES_DXLIMPORTER_INVALID_OPTION = $800411AB;
  ERR_NOTES_XML_PIPING = $800411AC;
  ERR_NOTES_RT_FIRSTFINISHSECTION = $800411AD;
  ERR_NOTES_DB_POLICYNOTFOUND = $800411AE;
  ERR_NOTES_DB_ARCHIVEINFO = $800411AF;
  ERR_NOTES_SS_ALREADYINUSE = $800411B0;
  ERR_NOTES_FILEREADONLY = $800411B1;
  ERR_NOTES_FILE_NONAME = $800411B2;
  ERR_NOTES_NOTBYTEARRAY = $800411B3;
  ERR_NOTES_NULLSTRING = $800411B4;
  ERR_NOTES_NOTHOTSPOTLINK = $800411B5;
  ERR_NOTES_BADTBLSTYLE = $800411B6;
  ERR_NOTES_ME_ILLEGALXNOTES = $800411B7;
  ERR_NOTES_NON_BODY_MIME = $800411B8;
  ERR_NOTES_NOSUCH_MAILSYSTEM = $800411B9;
  ERR_NOTES_NOSUCH_MAILOWNERACCESS = $800411BA;
  ERR_NOTES_NOSUCH_ROAMINGCLEANUPSETTING = $800411BB;
  ERR_NOTES_BADMAILFILEACTION = $800411BC;
  ERR_NOTES_SMSDEL_FAILED = $800411BD;
  ERR_NOTES_NOSUCH_GROUP = $800411BE;
  ERR_NOTES_SAXPARSER_INPUT_OBJECT = $800411BF;
  ERR_NOTES_SAXPARSER_OUTPUT_OBJECT = $800411C0;
  ERR_NOTES_DOMPARSER_INPUT_OBJECT = $800411C1;
  ERR_NOTES_DOMPARSER_OUTPUT_OBJECT = $800411C2;
  ERR_NOTES_SS_CHARSET_UNKNOWN = $800411C3;
  ERR_NOTES_ATTRIBUTE_NOT_FOUND = $800411C4;
  ERR_NOTES_INVALID_XML_OUTPUT_FORMAT = $800411C5;
  ERR_NOTES_OUTPUT_OBJECT_NOT_SET = $800411C6;
  ERR_NOTES_RTRNG_USESTANDARDNAV = $800411C7;
  ERR_NOTES_POLICY_DOC_FAILED = $800411C8;
  ERR_NOTES_RTNAV_MUSTBETYPETEXT = $800411C9;
  ERR_NOTES_RTNAV_NOOFFSETWITHAFTER = $800411CA;
  ERR_NOTES_NOT_HIER_MAIL_SERVERS = $800411CB;
  ERR_NOTES_SERVER_MUST_BE_R5 = $800411CC;
  ERR_NOTES_NO_CREATE_REPLICA = $800411CD;
  ERR_NOTES_BAD_REPLICA_LIST = $800411CE;
  ERR_NOTES_MAIL_NOMOVE_SAMEPATH = $800411CF;
  ERR_NOTES_NOSUCH_ROAMINGUSER = $800411D0;
  ERR_NOTES_NOT_HIERARCHICAL_SERVER = $800411D1;
  ERR_NOTES_NOT_IN_SAME_DOMAIN = $800411D2;
  ERR_NOTES_ROAMING_NOMOVE_SAMEPATH = $800411D3;
  ERR_NOTES_INVALID_APPROVAL_REQUEST = $800411D4;
  ERR_NOTES_PERSON_NOT_FOUND = $800411D5;
  ERR_NOTES_XMLREFORMATTER_INPUT_OBJECT = $800411D6;
  ERR_NOTES_XMLREFORMATTER_OUTPUT_OBJECT = $800411D7;
  ERR_NOTES_FIRST_ARG_NOT_DOMNODE = $800411D8;
  ERR_NOTES_SECOND_ARG_NOT_DOMNODE = $800411D9;
  ERR_NOTES_NULL_DOMNODE = $800411DA;
  ERR_NOTES_UNSUPPORTED_PLATFORM_OP = $800411DB;
  ERR_NOTES_FIRST_ARG_NOT_ATTR_NODE = $800411DC;
  ERR_NOTES_FIXUP_FAILED = $800411DD;
  ERR_NOTES_NOTLOCAL_FIXUP = $800411DE;
  ERR_NOTES_MUST_BE_NOTESDATETIME = $800411DF;
  ERR_NOTES_DOM_OPERATION = $800411E0;
  ERR_NOTES_CANTHASH = $800411E1;
  ERR_NOTES_UNABLETOLOCK = $800411E2;
  ERR_NOTES_CANTLOCK_NOTEMODIFIED = $800411E3;
  ERR_NOTES_CANTUNLOCK = $800411E4;
  ERR_NOTES_DATATOOBIG = $800411E5;
  ERR_NOTES_DATATYPETOOBIG = $800411E6;
  ERR_NOTES_DATATYPENOMATCH = $800411E7;
  ERR_NOTES_XMLREFORMATTER_CONNECTION = $800411E8;
  ERR_NOTES_XMLREFORMATTER_FAILED = $800411E9;
  ERR_NOTES_ACL_ADMINREADERAUTHOR_FAILED = $800411EA;
  ERR_NOTES_ACL_ADMINNAMES_FAILED = $800411EB;
  ERR_NOTES_ADMINSERVER_FAILED = $800411EC;
  ERR_NOTES_NOFIXEDSTRINGS = $800411ED;
  ERR_NOTES_INVALID_VARIANT_DATATYPE = $800411EE;
  ERR_NOTES_COMPACT_INVALID_OPTION = $800411EF;
  ERR_NOTES_COMPACT_UNSUPPORTED_OPTION = $800411F0;
  ERR_NOTES_BADPWDCHKSETTING = $800411F1;
  ERR_NOTES_CANT_SIGN_DATABASE = $800411F2;
  ERR_NOTES_LOCKED = $800411F3;
  ERR_NOTES_INVALID_NAMELIST = $800411F4;
  ERR_NOTES_CANTCONNECT_MASTERLOCKDB = $800411F5;
  ERR_NOTES_NOMASTERLOCKDB_DOC = $800411F6;
  ERR_NOTES_NOMASTERLOCKDB_DESIGN = $800411F7;
  ERR_NOTES_INVALID_VALIDATION_OPTION = $800411F8;
  ERR_NOTES_DXLEXPORTER_FAILED = $800411F9;
  ERR_NOTES_DOMPARSER_FAILED = $800411FA;
  ERR_NOTES_SAXPARSER_FAILED = $800411FB;
  ERR_NOTES_XSLTRANSFORMER_FAILED = $800411FC;
  ERR_NOTES_EXTENDEDINFO_FAILED = $800411FD;
  ERR_NOTES_NOTA_JBOOLEAN = $800411FE;
  ERR_NOTES_ADMINSERVER_EXISTS = $800411FF;
  ERR_NOTES_SSOTOKEN_GEN = $80041200;
  ERR_NOTES_SSOTOKEN_AUTH = $80041201;
  ERR_NOTES_SSOCONFIG = $80041202;
  ERR_NOTES_SSOTOKEN_INV = $80041203;
  ERR_NOTES_SSOTOKEN_EXP = $80041204;
  ERR_NOTES_SERVERCONFIG = $80041205;
  ERR_NOTES_COOKIE_BADADDR = $80041206;
  ERR_NOTES_COOKIE_EXP = $80041207;
  ERR_NOTES_COOKIE_INV = $80041208;
  ERR_NOTES_PREVIEW_RESTRICTED = $80041209;
  ERR_NOTES_INCOMPATIBLE_VERSION = $8004120A;
  ERR_NOTES_SS_ALIEN_THREAD_ACCESS = $8004120B;
  ERR_NOTES_SS_TEXTLINE_TOO_LONG = $8004120C;
  ERR_NOTES_SS_INCOMPATIBLE_CHARSETS = $8004120D;
  ERR_NOTES_INVALID_DBSIZE = $8004120E;
  ERR_NOTES_NOSUCH_DESIGN = $8004120F;
  ERR_NOTES_EMBED_IN_PROGRESS = $80041210;
  ERR_NOTES_EMBED_NOT_STARTED = $80041211;
  ERR_NOTES_INVALID_RESOLVER_RETVAL = $80041212;
  ERR_NOTES_DB_MARKED_FOR_DELETE = $80041213;
  ERR_NOTES_NOTE_NOT_IN_DATABASE = $80041214;
  ERR_NOTES_CANNOT_SERIALIZE_DOM_TREE = $80041215;
  ERR_NOTES_NO_CLUSTER_DB = $80041216;
  ERR_NOTES_NEGATIVE_VALUE = $80041217;
  ERR_NOTES_USER_NO_SERVER = $80041218;
  ERR_NOTES_DELETE_NET_USER_FALIED = $80041219;
  ERR_NOTES_NULL_SERVER_NAME = $8004121A;
  ERR_NOTES_INVALID_VIEW_TEMPLATE = $8004121B;
  ERR_NOTES_ILLEGAL_SERVER_NAME = $8004121C;
  ERR_NOTES_NOT_A_DATE_ITEM = $8004121D;
  ERR_NOTES_RTTBL_BADCOLWIDTH = $8004121E;
  ERR_NOTES_INVALID_RECEIVEDITEM = $8004121F;
  ERR_NOTES_NOTA_JINTEGER = $80041220;
  ERR_NOTES_DOMOP_INDEX_SIZE = $80041221;
  ERR_NOTES_DOMOP_XMLSTRING_SIZE = $80041222;
  ERR_NOTES_DOMOP_HIERARCHY_REQUEST = $80041223;
  ERR_NOTES_DOMOP_WRONG_DOCUMENT = $80041224;
  ERR_NOTES_DOMOP_INVALID_CHARACTER = $80041225;
  ERR_NOTES_DOMOP_NO_DATA_ALLOWED = $80041226;
  ERR_NOTES_DOMOP_NO_MODIFY_ALLOWED = $80041227;
  ERR_NOTES_DOMOP_NOT_FOUND = $80041228;
  ERR_NOTES_DOMOP_NOT_SUPPORTED = $80041229;
  ERR_NOTES_DOMOP_INUSE_ATTRIBUTE = $8004122A;
  ERR_NOTES_DOMOP_INVALID_STATE = $8004122B;
  ERR_NOTES_DOMOP_SYNTAX = $8004122C;
  ERR_NOTES_DOMOP_INVALID_MODIFICATION = $8004122D;
  ERR_NOTES_DOMOP_NAMESPACE = $8004122E;
  ERR_NOTES_DOMOP_INVALID_ACCESS = $8004122F;
  ERR_NOTES_NOSUCH_DBSIGN = $80041230;
  ERR_NOTES_FORMEDIT_FAILED = $80041231;
  ERR_NOTES_ME_DUPLICATEXNOTES_NAME = $80041232;
  ERR_NOTES_ME_MISSINGXNOTES_NAME = $80041233;
  ERR_NOTES_NO_OLECONTEXT = $80041234;
  ERR_NOTES_CANTSIGN_BYNAME = $80041235;
  ERR_NOTES_ADMINSERVER_NEXIST = $80041236;
  ERR_NOTES_COMPACT_I_REQ_C = $80041237;
  ERR_NOTES_UNDELETENONPOSITIVEVALUE = $80041238;
  ERR_NOTES_XML_PROCESS_ERROR = $80041239;
  ERR_NOTES_XML_PIPELINE_LOOP_ERROR = $8004123A;
  ERR_NOTES_STREAM_HAS_BEEN_USED = $8004123B;
  ERR_NOTES_STREAM_HAS_MIXED_CONTENT = $8004123C;
  ERR_NOTES_XML_PROCESSOR_CANNOT_BE_USED = $8004123D;
  ERR_NOTES_DB_BADINDEXFREQUENCY = $80041240;
  ERR_NOTES_LONG_OVERFLOW = $80041241;
  ERR_NOTES_INVALID_CREDEL_TEMPLATE = $80041242;
  ERR_NOTES_BADPLCYSETSTYPE = $80041243;
  ERR_NOTES_CANTRETNOTEID = $80041245;
  ERR_NOTES_STALE_COLLECTION = $80041246;
  ERR_NOTES_EXTENDEDACCESS_FAILED = $80041247;
  ERR_NOTES_UNIFORM_FAILED_EA = $80041248;
  ERR_NOTES_NOTEIDFIND_FAILED = $80041249;
  ERR_NOTES_NOFIXUP_CURRDB = $8004124A;
  ERR_NOTES_NOT_AN_URLDB = $8004124B;
  ERR_NOTES_RTNAV_USE_FINDSTRING = $8004124C;
  ERR_NOTES_UNINITIALIZED_STRUCT = $8004124D;
  ERR_NOTES_UNINITIALIZED_REMOTE_OBJ = $8004124E;
  ERR_NOTES_NEVER_SUPPORTED = $8004124F;
  ERR_NOTES_SS_TRUNCATION_FAILED = $80041250;
  ERR_NOTES_NEED_STREAM = $80041251;
  ERR_NOTES_SS_IO_FAILED = $80041252;
  ERR_NOTES_NO_MEMBERS_REFRESHED = $80041253;
  ERR_NOTES_SS_NO_LOCAL_STREAM_REPLACE = $80041254;
  ERR_NOTES_SS_NO_LOCAL_STREAM_CLOSE = $80041255;
  ERR_NOTES_SS_NO_LOCAL_STREAM_OPEN = $80041256;
  ERR_NOTES_SS_MAX_SPACE_EXCEEDED = $80041257;
  ERR_NOTES_DOCUMENTCOLLECTION_MISSING = $80041258;
  ERR_NOTES_NOTECOLLECTION_MISSING = $80041259;
  ERR_NOTES_NOSUCH_DBGETMODDOCS = $8004125A;
  ERR_NOTES_BEP_CLASS = $8004125B;
  ERR_NOTES_BEP_METHOD = $8004125C;
  ERR_NOTES_BEP_OPERATION = $8004125D;
  ERR_NOTES_BEP_CALLS = $8004125E;
  ERR_NOTES_BEP_TIME = $8004125F;
  ERR_NOTES_BEP_MEASUREDTIME = $80041260;
  ERR_NOTES_BEP_METHODSPROFILED = $80041261;
  ERR_NOTES_BEP_MILLISECONDS = $80041262;
  ERR_NOTES_BEP_AGENTEXECUTIONTIME = $80041263;
  ERR_NOTES_BEP_PROFILE = $80041264;
  ERR_NOTES_AP_CFA_NOADMSRV = $80041265;
  ERR_NOTES_MAX_THREADSESSIONS = $80041266;
  ERR_NOTES_TOOMANY_IN_DIR = $80041267;
  ERR_NOTES_BUSYTIME_FAILED = $80041268;
  ERR_NOTES_UNREAD_USERNAME = $80041269;
  ERR_NOTES_UNREAD_READ = $8004126A;
  ERR_NOTES_UNREAD_WRITE = $8004126B;
  ERR_NOTES_DEFAULTVIEW = $8004126C;
  ERR_NOTES_NOSINGLES = $8004126D;

type

// *********************************************************************//
// Forward declaration of types defined in TypeLibrary                    
// *********************************************************************//
  IACL = interface;
  IACLDisp = dispinterface;
  IDatabase = interface;
  IDatabaseDisp = dispinterface;
  IDocumentCollection = interface;
  IDocumentCollectionDisp = dispinterface;
  IDocument = interface;
  IDocumentDisp = dispinterface;
  IView = interface;
  IViewDisp = dispinterface;
  IViewEntryCollection = interface;
  IViewEntryCollectionDisp = dispinterface;
  IViewEntry = interface;
  IViewEntryDisp = dispinterface;
  IViewNavigator = interface;
  IViewNavigatorDisp = dispinterface;
  IViewColumn = interface;
  IViewColumnDisp = dispinterface;
  IItem = interface;
  IItemDisp = dispinterface;
  IItem2 = interface;
  IItem2Disp = dispinterface;
  IDateTime = interface;
  IDateTimeDisp = dispinterface;
  ISession = interface;
  ISessionDisp = dispinterface;
  IAgent = interface;
  IAgentDisp = dispinterface;
  IInternational = interface;
  IInternationalDisp = dispinterface;
  IName = interface;
  INameDisp = dispinterface;
  IDateRange = interface;
  IDateRangeDisp = dispinterface;
  ILog = interface;
  ILogDisp = dispinterface;
  INewsletter = interface;
  INewsletterDisp = dispinterface;
  IRegistration = interface;
  IRegistrationDisp = dispinterface;
  IRichTextParagraphStyle = interface;
  IRichTextParagraphStyleDisp = dispinterface;
  IRichTextStyle = interface;
  IRichTextStyleDisp = dispinterface;
  IDbDirectory = interface;
  IDbDirectoryDisp = dispinterface;
  IAdministrationProcess = interface;
  IAdministrationProcessDisp = dispinterface;
  INotesStream = interface;
  INotesStreamDisp = dispinterface;
  IColorObject = interface;
  IColorObjectDisp = dispinterface;
  IDXLExporter = interface;
  IDXLExporterDisp = dispinterface;
  IDXLImporter = interface;
  IDXLImporterDisp = dispinterface;
  IMIMEEntity = interface;
  IMIMEEntityDisp = dispinterface;
  IMIMEHeader = interface;
  IMIMEHeaderDisp = dispinterface;
  IRichTextItem = interface;
  IRichTextItemDisp = dispinterface;
  IEmbeddedObject = interface;
  IEmbeddedObjectDisp = dispinterface;
  IRichTextNavigator = interface;
  IRichTextNavigatorDisp = dispinterface;
  IRichTextRange = interface;
  IRichTextRangeDisp = dispinterface;
  IReplication = interface;
  IReplicationDisp = dispinterface;
  IReplicationEntry = interface;
  IReplicationEntryDisp = dispinterface;
  IOutline = interface;
  IOutlineDisp = dispinterface;
  IOutlineEntry = interface;
  IOutlineEntryDisp = dispinterface;
  IForm = interface;
  IFormDisp = dispinterface;
  INoteCollection = interface;
  INoteCollectionDisp = dispinterface;
  IACLEntry = interface;
  IACLEntryDisp = dispinterface;
  IRichTextTab = interface;
  IRichTextTabDisp = dispinterface;
  IRichTextDoclink = interface;
  IRichTextDoclinkDisp = dispinterface;
  IRichTextSection = interface;
  IRichTextSectionDisp = dispinterface;
  IRichTextTable = interface;
  IRichTextTableDisp = dispinterface;

// *********************************************************************//
// Declaration of CoClasses defined in Type Library                       
// (NOTE: Here we map each CoClass to its Default Interface)              
// *********************************************************************//
  NotesACL = IACL;
  NotesACLEntry = IACLEntry;
  NotesAgent = IAgent;
  NotesDatabase = IDatabase;
  NotesDateRange = IDateRange;
  NotesDateTime = IDateTime;
  NotesDbDirectory = IDbDirectory;
  NotesDocument = IDocument;
  NotesDocumentCollection = IDocumentCollection;
  NotesEmbeddedObject = IEmbeddedObject;
  NotesForm = IForm;
  NotesItem = IItem2;
  NotesInternational = IInternational;
  NotesLog = ILog;
  NotesName = IName;
  NotesNewsletter = INewsletter;
  NotesOutline = IOutline;
  NotesOutlineEntry = IOutlineEntry;
  NotesRichTextItem = IRichTextItem;
  NotesRichTextStyle = IRichTextStyle;
  NotesRichTextParagraphStyle = IRichTextParagraphStyle;
  NotesRichTextTab = IRichTextTab;
  NotesRegistration = IRegistration;
  NotesReplication = IReplication;
  NotesSession = ISession;
  NotesView = IView;
  NotesViewColumn = IViewColumn;
  NotesViewEntry = IViewEntry;
  NotesViewEntryCollection = IViewEntryCollection;
  NotesViewNavigator = IViewNavigator;
  NotesMIMEEntity = IMIMEEntity;
  NotesMIMEHeader = IMIMEHeader;
  NotesStream = INotesStream;
  NotesAdministrationProcess = IAdministrationProcess;
  NotesReplicationEntry = IReplicationEntry;
  NotesColorObject = IColorObject;
  NotesRichTextNavigator = IRichTextNavigator;
  NotesRichTextRange = IRichTextRange;
  NotesRichTextDoclink = IRichTextDoclink;
  NotesRichTextSection = IRichTextSection;
  NotesRichTextTable = IRichTextTable;
  NotesNoteCollection = INoteCollection;
  NotesDXLExporter = IDXLExporter;
  NotesDXLImporter = IDXLImporter;


// *********************************************************************//
// Declaration of structures, unions and aliases.                         
// *********************************************************************//
  POleVariant1 = ^OleVariant; {*}

  ACLLEVEL = _ACLLEVEL; 
  COLORS = _COLORS; 
  SPACING = _SPACING; 
  VC_ALIGN = _VC_ALIGN; 
  VC_DATEFMT = _VC_DATEFMT; 
  VC_FONTSTYLE = _VC_FONTSTYLE; 
  VC_SEP = _VC_SEP; 
  VC_NUMATTR = _VC_NUMATTR; 
  VC_NUMFMT = _VC_NUMFMT; 
  VC_TDFMT = _VC_TDFMT; 
  VC_TIMEFMT = _VC_TIMEFMT; 
  VC_TIMEZONEFMT = _VC_TIMEZONEFMT; 
  AG_TARGET = _AG_TARGET; 
  AG_TRIGGER = _AG_TRIGGER; 
  LOG_EVENTS = _LOG_EVENTS; 
  LOG_SEVERITY = _LOG_SEVERITY; 
  REG_TYPE = _REG_TYPE; 
  USER_TYPE = _USER_TYPE; 
  REG_MAILOWNACL = _REG_MAILOWNACL; 
  REG_MAILTYPE = _REG_MAILTYPE; 
  REG_ROAMCLEANUP = _REG_ROAMCLEANUP; 
  RT_ALIGN = _RT_ALIGN; 
  RT_PAGINATE = _RT_PAGINATE; 
  RT_TAB = _RT_TAB; 
  RT_EFFECTS = _RT_EFFECTS; 
  RT_FONTS = _RT_FONTS; 
  DB_TYPES = _DB_TYPES; 
  ADMP_MAILDEL = _ADMP_MAILDEL; 
  ADMP_PWDCHK = _ADMP_PWDCHK; 
  STMREAD_LEN = _STMREAD_LEN; 
  EOL_TYPE = _EOL_TYPE; 
  DXLIMPORTOPTION = _DXLIMPORTOPTION; 
  VALIDATIONOPTION = _VALIDATIONOPTION; 
  DXLLOGOPTION = _DXLLOGOPTION; 
  SESS_POLICY = _SESS_POLICY; 
  IT_TYPE = _IT_TYPE; 
  MIME_ENCODING = _MIME_ENCODING; 
  SEARCH_PATH = _SEARCH_PATH; 
  EMBED_TYPE = _EMBED_TYPE; 
  RT_ELEM = _RT_ELEM; 
  RP_PRIORITY = _RP_PRIORITY; 
  OE_CLASS = _OE_CLASS; 
  OE_TYPE = _OE_TYPE; 
  FT_TYPES = _FT_TYPES; 
  FIELD_TYPE = _FIELD_TYPE; 
  FTINDEX_FREQUENCY = _FTIDX_FREQ; 
  DATABASE_TYPES = _DATABASE_TYPES; 
  COMPACT_OPTIONS = _CMPC_OPTS; 
  FTINDEX_OPTIONS = _FTIDX_OPTS; 
  ACCESS_PRIVILEGES = _DBACL_PRIVS; 
  DBFIXUP_TYPES = _DBFIXUP_TYPES; 
  DB_OPTIONS = _DB_OPTIONS; 
  DBSIGN_TYPES = _DBSIGN_TYPES; 
  DBMOD_TYPES = _DBMOD_TYPES; 
  LSXBE_ACLTYPE = _LSXBE_ACLTYPE; 
  RT_TBLSTYLE = _RT_TBLSTYLE; 

// *********************************************************************//
// Interface: IACL
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {29131560-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  IACL = interface(IDispatch)
    ['{29131560-2EED-1069-BF5D-00DD011186B7}']
    function Get_InternetLevel: ACLLEVEL; safecall;
    procedure Set_InternetLevel(plLevel: ACLLEVEL); safecall;
    function Get_Parent: IDatabase; safecall;
    function Get_Roles: OleVariant; safecall;
    procedure Set_UniformAccess(pbFlag: WordBool); safecall;
    function Get_UniformAccess: WordBool; safecall;
    procedure AddRole(const pRole: WideString); safecall;
    function CreateACLEntry(const pName: WideString; lLevel: ACLLEVEL): IACLEntry; safecall;
    procedure DeleteRole(const pRole: WideString); safecall;
    function GetEntry(const pEname: WideString): IACLEntry; safecall;
    function GetFirstEntry: IACLEntry; safecall;
    function GetNextEntry(const pIEntry: IACLEntry): IACLEntry; safecall;
    procedure RenameRole(const pOldname: WideString; const pNewname: WideString); safecall;
    procedure RemoveACLEntry(const pName: WideString); safecall;
    procedure Save; safecall;
    procedure Set_AdministrationServer(const ppName: WideString); safecall;
    function Get_AdministrationServer: WideString; safecall;
    procedure Set_IsAdminNames(pbFlag: WordBool); safecall;
    function Get_IsAdminNames: WordBool; safecall;
    procedure Set_IsAdminReaderAuthor(pbFlag: WordBool); safecall;
    function Get_IsAdminReaderAuthor: WordBool; safecall;
    procedure Set_IsExtendedAccess(pbFlag: WordBool); safecall;
    function Get_IsExtendedAccess: WordBool; safecall;
    property InternetLevel: ACLLEVEL read Get_InternetLevel write Set_InternetLevel;
    property Parent: IDatabase read Get_Parent;
    property Roles: OleVariant read Get_Roles;
    property UniformAccess: WordBool read Get_UniformAccess write Set_UniformAccess;
    property AdministrationServer: WideString read Get_AdministrationServer write Set_AdministrationServer;
    property IsAdminNames: WordBool read Get_IsAdminNames write Set_IsAdminNames;
    property IsAdminReaderAuthor: WordBool read Get_IsAdminReaderAuthor write Set_IsAdminReaderAuthor;
    property IsExtendedAccess: WordBool read Get_IsExtendedAccess write Set_IsExtendedAccess;
  end;

// *********************************************************************//
// DispIntf:  IACLDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {29131560-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  IACLDisp = dispinterface
    ['{29131560-2EED-1069-BF5D-00DD011186B7}']
    property InternetLevel: ACLLEVEL dispid 1610743808;
    property Parent: IDatabase readonly dispid 1610743810;
    property Roles: OleVariant readonly dispid 1610743811;
    property UniformAccess: WordBool dispid 1610743812;
    procedure AddRole(const pRole: WideString); dispid 1610743814;
    function CreateACLEntry(const pName: WideString; lLevel: ACLLEVEL): IACLEntry; dispid 1610743815;
    procedure DeleteRole(const pRole: WideString); dispid 1610743816;
    function GetEntry(const pEname: WideString): IACLEntry; dispid 1610743817;
    function GetFirstEntry: IACLEntry; dispid 1610743818;
    function GetNextEntry(const pIEntry: IACLEntry): IACLEntry; dispid 1610743819;
    procedure RenameRole(const pOldname: WideString; const pNewname: WideString); dispid 1610743820;
    procedure RemoveACLEntry(const pName: WideString); dispid 1610743821;
    procedure Save; dispid 1610743822;
    property AdministrationServer: WideString dispid 1610743823;
    property IsAdminNames: WordBool dispid 1610743825;
    property IsAdminReaderAuthor: WordBool dispid 1610743827;
    property IsExtendedAccess: WordBool dispid 1610743829;
  end;

// *********************************************************************//
// Interface: IDatabase
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {29131563-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  IDatabase = interface(IDispatch)
    ['{29131563-2EED-1069-BF5D-00DD011186B7}']
    function Get_ACL: IACL; safecall;
    function Get_AllDocuments: IDocumentCollection; safecall;
    function Get_Agents: OleVariant; safecall;
    function Get_Categories: WideString; safecall;
    procedure Set_Categories(const ppCategories: WideString); safecall;
    function Get_Created: OleVariant; safecall;
    function Get_CurrentAccessLevel: Integer; safecall;
    function Get_DelayUpdates: WordBool; safecall;
    procedure Set_DelayUpdates(pbFlag: WordBool); safecall;
    function Get_DesignTemplateName: WideString; safecall;
    function Get_FileName: WideString; safecall;
    function Get_FilePath: WideString; safecall;
    function Get_FolderReferencesEnabled: WordBool; safecall;
    procedure Set_FolderReferencesEnabled(pbEnable: WordBool); safecall;
    function Get_Forms: OleVariant; safecall;
    function Get_HttpURL: WideString; safecall;
    function Get_IsDirectoryCatalog: WordBool; safecall;
    function Get_IsFTIndexed: WordBool; safecall;
    function Get_IsMultiDbSearch: WordBool; safecall;
    function Get_IsOpen: WordBool; safecall;
    function Get_IsPublicAddressBook: WordBool; safecall;
    function Get_IsPrivateAddressBook: WordBool; safecall;
    function Get_LastFTIndexed: OleVariant; safecall;
    function Get_LastModified: OleVariant; safecall;
    function Get_Managers: OleVariant; safecall;
    function Get_MaxSize: Double; safecall;
    function Get_NotesURL: WideString; safecall;
    function Get_Parent: ISession; safecall;
    function Get_PercentUsed: Double; safecall;
    function Get_ReplicaID: WideString; safecall;
    function Get_ReplicationInfo: IReplication; safecall;
    function Get_Server: WideString; safecall;
    function Get_Size: Double; safecall;
    function Get_SizeQuota: Integer; safecall;
    procedure Set_SizeQuota(plQuota: Integer); safecall;
    function Get_TemplateName: WideString; safecall;
    function Get_Title: WideString; safecall;
    procedure Set_Title(const ppTitle: WideString); safecall;
    function Get_UnprocessedDocuments: IDocumentCollection; safecall;
    function Get_Views: OleVariant; safecall;
    function Compact: Integer; safecall;
    function CreateCopy(const pServer: WideString; const pFile: WideString; lMaxsize: Integer): IDatabase; safecall;
    function CreateDocument: IDocument; safecall;
    function CreateFromTemplate(const pServer: WideString; const pFile: WideString; 
                                bInherit: WordBool; lMaxsize: Integer): IDatabase; safecall;
    function CreateOutline(const pName: WideString; bGenDefault: WordBool): IOutline; safecall;
    function CreateReplica(const pServer: WideString; const pFile: WideString): IDatabase; safecall;
    procedure EnableFolder(const pName: WideString); safecall;
    function FTDomainSearch(const pQuery: WideString; lMax: Integer; lSortopt: FT_TYPES; 
                            lOtheropt: FT_TYPES; lStart: Integer; lCount: Integer; 
                            const pEntryForm: WideString): IDocument; safecall;
    function FTSearch(const pQuery: WideString; lMax: Integer; lSortopt: FT_TYPES; 
                      lOtheropt: FT_TYPES): IDocumentCollection; safecall;
    function GetAgent(const pName: WideString): IAgent; safecall;
    function GetDocumentByID(const pNoteid: WideString): IDocument; safecall;
    function GetDocumentByUNID(const pUnid: WideString): IDocument; safecall;
    function GetDocumentByURL(const pURL: WideString; lReload: Integer; bUrllist: WordBool; 
                              const pCharset: WideString; const pWebuser: WideString; 
                              const pWebpasswd: WideString; const pProxyuser: WideString; 
                              const pProxypasswd: WideString; bNowait: WordBool): IDocument; safecall;
    function GetForm(const pName: WideString): IForm; safecall;
    function GetOutline(const pName: WideString): IOutline; safecall;
    function GetProfileDocument(const pProfile: WideString; const pProfileuser: WideString): IDocument; safecall;
    function GetProfileDocCollection(const pProfileName: WideString): IDocumentCollection; safecall;
    function GetURLHeaderInfo(const pURL: WideString; const pHeader: WideString; 
                              const pWebuser: WideString; const pWebpasswd: WideString; 
                              const pProxyuser: WideString; const pProxypasswd: WideString): WideString; safecall;
    function GetView(const pName: WideString): IView; safecall;
    procedure GrantAccess(const pName: WideString; lLevel: ACLLEVEL); safecall;
    procedure Open; safecall;
    function QueryAccess(const pName: WideString): ACLLEVEL; safecall;
    procedure Remove; safecall;
    function Replicate(const pServer: WideString): WordBool; safecall;
    procedure RevokeAccess(const pName: WideString); safecall;
    function Search(const pFormula: WideString; const pIDt: IDateTime; lMax: Integer): IDocumentCollection; safecall;
    function UnprocessedFTSearch(const pQuery: WideString; lMax: Integer; lSortopt: FT_TYPES; 
                                 lOtheropt: FT_TYPES): IDocumentCollection; safecall;
    function UnprocessedSearch(const pFormula: WideString; const pDt: IDateTime; lMax: Integer): IDocumentCollection; safecall;
    procedure UpdateFTIndex(bCreate: WordBool); safecall;
    function Get_ACLActivityLog: OleVariant; safecall;
    function Get_FTIndexFrequency: FTINDEX_FREQUENCY; safecall;
    procedure Set_FTIndexFrequency(pFtiFreq: FTINDEX_FREQUENCY); safecall;
    function Get_IsCurrentAccessPublicReader: WordBool; safecall;
    function Get_IsCurrentAccessPublicWriter: WordBool; safecall;
    function Get_IsInMultiDbIndexing: WordBool; safecall;
    procedure Set_IsInMultiDbIndexing(pbFlag: WordBool); safecall;
    function Get_IsLink: WordBool; safecall;
    function Get_type_: DATABASE_TYPES; safecall;
    function Get_IsDocumentLockingEnabled: WordBool; safecall;
    procedure Set_IsDocumentLockingEnabled(pbFlag: WordBool); safecall;
    function Get_IsDesignLockingEnabled: WordBool; safecall;
    procedure Set_IsDesignLockingEnabled(pbFlag: WordBool); safecall;
    function CompactWithOptions(cmpcFlags: OleVariant; const pSpacethreshhold: WideString; 
                                unused: COMPACT_OPTIONS): Integer; safecall;
    procedure CreateFTIndex(ftiFlags: FTINDEX_OPTIONS; bRecreate: WordBool); safecall;
    function FTSearchRange(const pQuery: WideString; lMax: Integer; lSortopt: FT_TYPES; 
                           lOtheropt: FT_TYPES; start: Integer): IDocumentCollection; safecall;
    function OpenByReplicaID(const pServer: WideString; const pReplicaID: WideString): WordBool; safecall;
    function OpenIfModified(const pServer: WideString; const pDbfile: WideString; 
                            const pITimeModifiedSince: IDateTime): WordBool; safecall;
    function OpenWithFailover(const pServer: WideString; const pDbfile: WideString): WordBool; safecall;
    function QueryAccessPrivileges(const pName: WideString): ACCESS_PRIVILEGES; safecall;
    procedure RemoveFTIndex; safecall;
    function UnprocessedFTSearchRange(const pQuery: WideString; lMax: Integer; lSortopt: FT_TYPES; 
                                      lOtheropt: FT_TYPES; start: Integer): IDocumentCollection; safecall;
    function CreateView(const Title: WideString; const Formula: WideString; 
                        const templateView: IView; noRefresh: WordBool): IView; safecall;
    procedure Fixup(opts: DBFIXUP_TYPES); safecall;
    procedure MarkForDelete; safecall;
    function GetOption(bit: DB_OPTIONS): WordBool; safecall;
    procedure SetOption(bit: DB_OPTIONS; bValue: WordBool); safecall;
    function Get_IsInService: WordBool; safecall;
    function Get_IsPendingDelete: WordBool; safecall;
    function Get_IsConfigurationDirectory: WordBool; safecall;
    function Get_IsClusterReplication: WordBool; safecall;
    function Get_ListInDbCatalog: WordBool; safecall;
    function Get_LastFixup: IDateTime; safecall;
    function Get_LimitRevisions: Double; safecall;
    function Get_LimitUpdatedBy: Double; safecall;
    function Get_FileFormat: Integer; safecall;
    function Get_UndeleteExpireTime: Integer; safecall;
    function Get_SizeWarning: Integer; safecall;
    procedure Set_LimitRevisions(pD: Double); safecall;
    procedure Set_LimitUpdatedBy(pD: Double); safecall;
    procedure Set_SizeWarning(plValue: Integer); safecall;
    procedure Set_UndeleteExpireTime(plValue: Integer); safecall;
    procedure Set_InService(Param1: WordBool); safecall;
    procedure Set_ListInDbCatalog(bValue: WordBool); safecall;
    function CreateNoteCollection(bSelectAll: WordBool): INoteCollection; safecall;
    procedure Sign(lDocumentType: DBSIGN_TYPES; bExistingSigsOnly: WordBool; 
                   const pNameStr: WideString; bNameStrIsNoteID: WordBool); safecall;
    function QueryAccessRoles(const pName: WideString): OleVariant; safecall;
    function GetModifiedDocuments(const pDTSince: IDateTime; noteClass: DBMOD_TYPES): IDocumentCollection; safecall;
    procedure Set_IsInService(bValue: WordBool); safecall;
    property ACL: IACL read Get_ACL;
    property AllDocuments: IDocumentCollection read Get_AllDocuments;
    property Agents: OleVariant read Get_Agents;
    property Categories: WideString read Get_Categories write Set_Categories;
    property Created: OleVariant read Get_Created;
    property CurrentAccessLevel: Integer read Get_CurrentAccessLevel;
    property DelayUpdates: WordBool read Get_DelayUpdates write Set_DelayUpdates;
    property DesignTemplateName: WideString read Get_DesignTemplateName;
    property FileName: WideString read Get_FileName;
    property FilePath: WideString read Get_FilePath;
    property FolderReferencesEnabled: WordBool read Get_FolderReferencesEnabled write Set_FolderReferencesEnabled;
    property Forms: OleVariant read Get_Forms;
    property HttpURL: WideString read Get_HttpURL;
    property IsDirectoryCatalog: WordBool read Get_IsDirectoryCatalog;
    property IsFTIndexed: WordBool read Get_IsFTIndexed;
    property IsMultiDbSearch: WordBool read Get_IsMultiDbSearch;
    property IsOpen: WordBool read Get_IsOpen;
    property IsPublicAddressBook: WordBool read Get_IsPublicAddressBook;
    property IsPrivateAddressBook: WordBool read Get_IsPrivateAddressBook;
    property LastFTIndexed: OleVariant read Get_LastFTIndexed;
    property LastModified: OleVariant read Get_LastModified;
    property Managers: OleVariant read Get_Managers;
    property MaxSize: Double read Get_MaxSize;
    property NotesURL: WideString read Get_NotesURL;
    property Parent: ISession read Get_Parent;
    property PercentUsed: Double read Get_PercentUsed;
    property ReplicaID: WideString read Get_ReplicaID;
    property ReplicationInfo: IReplication read Get_ReplicationInfo;
    property Server: WideString read Get_Server;
    property Size: Double read Get_Size;
    property SizeQuota: Integer read Get_SizeQuota write Set_SizeQuota;
    property TemplateName: WideString read Get_TemplateName;
    property Title: WideString read Get_Title write Set_Title;
    property UnprocessedDocuments: IDocumentCollection read Get_UnprocessedDocuments;
    property Views: OleVariant read Get_Views;
    property ACLActivityLog: OleVariant read Get_ACLActivityLog;
    property FTIndexFrequency: FTINDEX_FREQUENCY read Get_FTIndexFrequency write Set_FTIndexFrequency;
    property IsCurrentAccessPublicReader: WordBool read Get_IsCurrentAccessPublicReader;
    property IsCurrentAccessPublicWriter: WordBool read Get_IsCurrentAccessPublicWriter;
    property IsInMultiDbIndexing: WordBool read Get_IsInMultiDbIndexing write Set_IsInMultiDbIndexing;
    property IsLink: WordBool read Get_IsLink;
    property type_: DATABASE_TYPES read Get_type_;
    property IsDocumentLockingEnabled: WordBool read Get_IsDocumentLockingEnabled write Set_IsDocumentLockingEnabled;
    property IsDesignLockingEnabled: WordBool read Get_IsDesignLockingEnabled write Set_IsDesignLockingEnabled;
    property IsInService: WordBool read Get_IsInService write Set_IsInService;
    property IsPendingDelete: WordBool read Get_IsPendingDelete;
    property IsConfigurationDirectory: WordBool read Get_IsConfigurationDirectory;
    property IsClusterReplication: WordBool read Get_IsClusterReplication;
    property ListInDbCatalog: WordBool read Get_ListInDbCatalog write Set_ListInDbCatalog;
    property LastFixup: IDateTime read Get_LastFixup;
    property LimitRevisions: Double read Get_LimitRevisions write Set_LimitRevisions;
    property LimitUpdatedBy: Double read Get_LimitUpdatedBy write Set_LimitUpdatedBy;
    property FileFormat: Integer read Get_FileFormat;
    property UndeleteExpireTime: Integer read Get_UndeleteExpireTime write Set_UndeleteExpireTime;
    property SizeWarning: Integer read Get_SizeWarning write Set_SizeWarning;
    property InService: WordBool write Set_InService;
  end;

// *********************************************************************//
// DispIntf:  IDatabaseDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {29131563-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  IDatabaseDisp = dispinterface
    ['{29131563-2EED-1069-BF5D-00DD011186B7}']
    property ACL: IACL readonly dispid 1610743808;
    property AllDocuments: IDocumentCollection readonly dispid 1610743809;
    property Agents: OleVariant readonly dispid 1610743810;
    property Categories: WideString dispid 1610743811;
    property Created: OleVariant readonly dispid 1610743813;
    property CurrentAccessLevel: Integer readonly dispid 1610743814;
    property DelayUpdates: WordBool dispid 1610743815;
    property DesignTemplateName: WideString readonly dispid 1610743817;
    property FileName: WideString readonly dispid 1610743818;
    property FilePath: WideString readonly dispid 0;
    property FolderReferencesEnabled: WordBool dispid 1610743820;
    property Forms: OleVariant readonly dispid 1610743822;
    property HttpURL: WideString readonly dispid 1610743823;
    property IsDirectoryCatalog: WordBool readonly dispid 1610743824;
    property IsFTIndexed: WordBool readonly dispid 1610743825;
    property IsMultiDbSearch: WordBool readonly dispid 1610743826;
    property IsOpen: WordBool readonly dispid 1610743827;
    property IsPublicAddressBook: WordBool readonly dispid 1610743828;
    property IsPrivateAddressBook: WordBool readonly dispid 1610743829;
    property LastFTIndexed: OleVariant readonly dispid 1610743830;
    property LastModified: OleVariant readonly dispid 1610743831;
    property Managers: OleVariant readonly dispid 1610743832;
    property MaxSize: Double readonly dispid 1610743833;
    property NotesURL: WideString readonly dispid 1610743834;
    property Parent: ISession readonly dispid 1610743835;
    property PercentUsed: Double readonly dispid 1610743836;
    property ReplicaID: WideString readonly dispid 1610743837;
    property ReplicationInfo: IReplication readonly dispid 1610743838;
    property Server: WideString readonly dispid 1610743839;
    property Size: Double readonly dispid 1610743840;
    property SizeQuota: Integer dispid 1610743841;
    property TemplateName: WideString readonly dispid 1610743843;
    property Title: WideString dispid 1610743844;
    property UnprocessedDocuments: IDocumentCollection readonly dispid 1610743846;
    property Views: OleVariant readonly dispid 1610743847;
    function Compact: Integer; dispid 1610743848;
    function CreateCopy(const pServer: WideString; const pFile: WideString; lMaxsize: Integer): IDatabase; dispid 1610743849;
    function CreateDocument: IDocument; dispid 1610743850;
    function CreateFromTemplate(const pServer: WideString; const pFile: WideString; 
                                bInherit: WordBool; lMaxsize: Integer): IDatabase; dispid 1610743851;
    function CreateOutline(const pName: WideString; bGenDefault: WordBool): IOutline; dispid 1610743852;
    function CreateReplica(const pServer: WideString; const pFile: WideString): IDatabase; dispid 1610743853;
    procedure EnableFolder(const pName: WideString); dispid 1610743854;
    function FTDomainSearch(const pQuery: WideString; lMax: Integer; lSortopt: FT_TYPES; 
                            lOtheropt: FT_TYPES; lStart: Integer; lCount: Integer; 
                            const pEntryForm: WideString): IDocument; dispid 1610743855;
    function FTSearch(const pQuery: WideString; lMax: Integer; lSortopt: FT_TYPES; 
                      lOtheropt: FT_TYPES): IDocumentCollection; dispid 1610743856;
    function GetAgent(const pName: WideString): IAgent; dispid 1610743857;
    function GetDocumentByID(const pNoteid: WideString): IDocument; dispid 1610743858;
    function GetDocumentByUNID(const pUnid: WideString): IDocument; dispid 1610743859;
    function GetDocumentByURL(const pURL: WideString; lReload: Integer; bUrllist: WordBool; 
                              const pCharset: WideString; const pWebuser: WideString; 
                              const pWebpasswd: WideString; const pProxyuser: WideString; 
                              const pProxypasswd: WideString; bNowait: WordBool): IDocument; dispid 1610743860;
    function GetForm(const pName: WideString): IForm; dispid 1610743861;
    function GetOutline(const pName: WideString): IOutline; dispid 1610743862;
    function GetProfileDocument(const pProfile: WideString; const pProfileuser: WideString): IDocument; dispid 1610743863;
    function GetProfileDocCollection(const pProfileName: WideString): IDocumentCollection; dispid 1610743864;
    function GetURLHeaderInfo(const pURL: WideString; const pHeader: WideString; 
                              const pWebuser: WideString; const pWebpasswd: WideString; 
                              const pProxyuser: WideString; const pProxypasswd: WideString): WideString; dispid 1610743865;
    function GetView(const pName: WideString): IView; dispid 1610743866;
    procedure GrantAccess(const pName: WideString; lLevel: ACLLEVEL); dispid 1610743867;
    procedure Open; dispid 1610743868;
    function QueryAccess(const pName: WideString): ACLLEVEL; dispid 1610743869;
    procedure Remove; dispid 1610743870;
    function Replicate(const pServer: WideString): WordBool; dispid 1610743871;
    procedure RevokeAccess(const pName: WideString); dispid 1610743872;
    function Search(const pFormula: WideString; const pIDt: IDateTime; lMax: Integer): IDocumentCollection; dispid 1610743873;
    function UnprocessedFTSearch(const pQuery: WideString; lMax: Integer; lSortopt: FT_TYPES; 
                                 lOtheropt: FT_TYPES): IDocumentCollection; dispid 1610743874;
    function UnprocessedSearch(const pFormula: WideString; const pDt: IDateTime; lMax: Integer): IDocumentCollection; dispid 1610743875;
    procedure UpdateFTIndex(bCreate: WordBool); dispid 1610743876;
    property ACLActivityLog: OleVariant readonly dispid 1610743877;
    property FTIndexFrequency: FTINDEX_FREQUENCY dispid 1610743878;
    property IsCurrentAccessPublicReader: WordBool readonly dispid 1610743880;
    property IsCurrentAccessPublicWriter: WordBool readonly dispid 1610743881;
    property IsInMultiDbIndexing: WordBool dispid 1610743882;
    property IsLink: WordBool readonly dispid 1610743884;
    property type_: DATABASE_TYPES readonly dispid 1610743885;
    property IsDocumentLockingEnabled: WordBool dispid 1610743886;
    property IsDesignLockingEnabled: WordBool dispid 1610743888;
    function CompactWithOptions(cmpcFlags: OleVariant; const pSpacethreshhold: WideString; 
                                unused: COMPACT_OPTIONS): Integer; dispid 1610743890;
    procedure CreateFTIndex(ftiFlags: FTINDEX_OPTIONS; bRecreate: WordBool); dispid 1610743891;
    function FTSearchRange(const pQuery: WideString; lMax: Integer; lSortopt: FT_TYPES; 
                           lOtheropt: FT_TYPES; start: Integer): IDocumentCollection; dispid 1610743892;
    function OpenByReplicaID(const pServer: WideString; const pReplicaID: WideString): WordBool; dispid 1610743893;
    function OpenIfModified(const pServer: WideString; const pDbfile: WideString; 
                            const pITimeModifiedSince: IDateTime): WordBool; dispid 1610743894;
    function OpenWithFailover(const pServer: WideString; const pDbfile: WideString): WordBool; dispid 1610743895;
    function QueryAccessPrivileges(const pName: WideString): ACCESS_PRIVILEGES; dispid 1610743896;
    procedure RemoveFTIndex; dispid 1610743897;
    function UnprocessedFTSearchRange(const pQuery: WideString; lMax: Integer; lSortopt: FT_TYPES; 
                                      lOtheropt: FT_TYPES; start: Integer): IDocumentCollection; dispid 1610743898;
    function CreateView(const Title: WideString; const Formula: WideString; 
                        const templateView: IView; noRefresh: WordBool): IView; dispid 1610743899;
    procedure Fixup(opts: DBFIXUP_TYPES); dispid 1610743900;
    procedure MarkForDelete; dispid 1610743901;
    function GetOption(bit: DB_OPTIONS): WordBool; dispid 1610743902;
    procedure SetOption(bit: DB_OPTIONS; bValue: WordBool); dispid 1610743903;
    property IsInService: WordBool dispid 1610743904;
    property IsPendingDelete: WordBool readonly dispid 1610743905;
    property IsConfigurationDirectory: WordBool readonly dispid 1610743906;
    property IsClusterReplication: WordBool readonly dispid 1610743907;
    property ListInDbCatalog: WordBool dispid 1610743908;
    property LastFixup: IDateTime readonly dispid 1610743909;
    property LimitRevisions: Double dispid 1610743910;
    property LimitUpdatedBy: Double dispid 1610743911;
    property FileFormat: Integer readonly dispid 1610743912;
    property UndeleteExpireTime: Integer dispid 1610743913;
    property SizeWarning: Integer dispid 1610743914;
    property InService: WordBool writeonly dispid 1610743919;
    function CreateNoteCollection(bSelectAll: WordBool): INoteCollection; dispid 1610743921;
    procedure Sign(lDocumentType: DBSIGN_TYPES; bExistingSigsOnly: WordBool; 
                   const pNameStr: WideString; bNameStrIsNoteID: WordBool); dispid 1610743922;
    function QueryAccessRoles(const pName: WideString): OleVariant; dispid 1610743923;
    function GetModifiedDocuments(const pDTSince: IDateTime; noteClass: DBMOD_TYPES): IDocumentCollection; dispid 1610743924;
  end;

// *********************************************************************//
// Interface: IDocumentCollection
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {29131568-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  IDocumentCollection = interface(IDispatch)
    ['{29131568-2EED-1069-BF5D-00DD011186B7}']
    function Get_Count: Integer; safecall;
    function Get_IsSorted: WordBool; safecall;
    function Get_Parent: IDatabase; safecall;
    function Get_Query: WideString; safecall;
    procedure AddDocument(const pIDoc: IDocument; bReserved: WordBool); safecall;
    procedure DeleteDocument(const pIDoc: IDocument); safecall;
    procedure FTSearch(const pQuery: WideString; lMaxDocs: Integer); safecall;
    function GetDocument(const pIIndoc: IDocument): IDocument; safecall;
    function GetFirstDocument: IDocument; safecall;
    function GetLastDocument: IDocument; safecall;
    function GetNextDocument(const pICurrent: IDocument): IDocument; safecall;
    function GetPrevDocument(const pICurrent: IDocument): IDocument; safecall;
    function GetNthDocument(lN: Integer): IDocument; safecall;
    procedure PutAllInFolder(const pFolderName: WideString; bCreateonfail: WordBool); safecall;
    procedure RemoveAll(bForce: WordBool); safecall;
    procedure RemoveAllFromFolder(const pFolderName: WideString); safecall;
    procedure StampAll(const pItemName: WideString; Value: OleVariant); safecall;
    procedure UpdateAll; safecall;
    function Get_UntilTime: IDateTime; safecall;
    property Count: Integer read Get_Count;
    property IsSorted: WordBool read Get_IsSorted;
    property Parent: IDatabase read Get_Parent;
    property Query: WideString read Get_Query;
    property UntilTime: IDateTime read Get_UntilTime;
  end;

// *********************************************************************//
// DispIntf:  IDocumentCollectionDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {29131568-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  IDocumentCollectionDisp = dispinterface
    ['{29131568-2EED-1069-BF5D-00DD011186B7}']
    property Count: Integer readonly dispid 1610743808;
    property IsSorted: WordBool readonly dispid 1610743809;
    property Parent: IDatabase readonly dispid 1610743810;
    property Query: WideString readonly dispid 1610743811;
    procedure AddDocument(const pIDoc: IDocument; bReserved: WordBool); dispid 1610743812;
    procedure DeleteDocument(const pIDoc: IDocument); dispid 1610743813;
    procedure FTSearch(const pQuery: WideString; lMaxDocs: Integer); dispid 1610743814;
    function GetDocument(const pIIndoc: IDocument): IDocument; dispid 1610743815;
    function GetFirstDocument: IDocument; dispid 1610743816;
    function GetLastDocument: IDocument; dispid 1610743817;
    function GetNextDocument(const pICurrent: IDocument): IDocument; dispid 1610743818;
    function GetPrevDocument(const pICurrent: IDocument): IDocument; dispid 1610743819;
    function GetNthDocument(lN: Integer): IDocument; dispid 1610743820;
    procedure PutAllInFolder(const pFolderName: WideString; bCreateonfail: WordBool); dispid 1610743821;
    procedure RemoveAll(bForce: WordBool); dispid 1610743822;
    procedure RemoveAllFromFolder(const pFolderName: WideString); dispid 1610743823;
    procedure StampAll(const pItemName: WideString; Value: OleVariant); dispid 1610743824;
    procedure UpdateAll; dispid 1610743825;
    property UntilTime: IDateTime readonly dispid 1610743826;
  end;

// *********************************************************************//
// Interface: IDocument
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {29131567-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  IDocument = interface(IDispatch)
    ['{29131567-2EED-1069-BF5D-00DD011186B7}']
    function Get_Authors: OleVariant; safecall;
    function Get_ColumnValues: OleVariant; safecall;
    function Get_Created: OleVariant; safecall;
    function Get_EmbeddedObjects: OleVariant; safecall;
    function Get_EncryptionKeys: OleVariant; safecall;
    procedure Set_EncryptionKeys(pKeys: OleVariant); safecall;
    procedure Set_EncryptOnSend(pbFlag: WordBool); safecall;
    function Get_EncryptOnSend: WordBool; safecall;
    function Get_FolderReferences: OleVariant; safecall;
    function Get_FTSearchScore: Integer; safecall;
    function Get_HasEmbedded: WordBool; safecall;
    function Get_HttpURL: WideString; safecall;
    function Get_IsDeleted: WordBool; safecall;
    function Get_IsNewNote: WordBool; safecall;
    function Get_IsProfile: WordBool; safecall;
    function Get_IsResponse: WordBool; safecall;
    function Get_IsSigned: WordBool; safecall;
    function Get_IsUIDocOpen: WordBool; safecall;
    function Get_IsValid: WordBool; safecall;
    function Get_Items: OleVariant; safecall;
    function Get_Key: WideString; safecall;
    function Get_LastAccessed: OleVariant; safecall;
    function Get_LastModified: OleVariant; safecall;
    function Get_NameOfProfile: WideString; safecall;
    function Get_NoteID: WideString; safecall;
    function Get_NotesURL: WideString; safecall;
    function Get_ParentDatabase: IDatabase; safecall;
    function Get_ParentDocumentUNID: WideString; safecall;
    function Get_ParentView: IView; safecall;
    function Get_Responses: IDocumentCollection; safecall;
    function Get_SaveMessageOnSend: WordBool; safecall;
    procedure Set_SaveMessageOnSend(pbFlag: WordBool); safecall;
    function Get_SentByAgent: WordBool; safecall;
    function Get_Signer: WideString; safecall;
    function Get_SignOnSend: WordBool; safecall;
    procedure Set_SignOnSend(pbFlag: WordBool); safecall;
    function Get_Size: Integer; safecall;
    function Get_UniversalID: WideString; safecall;
    procedure Set_UniversalID(const ppId: WideString); safecall;
    function Get_Verifier: WideString; safecall;
    function AppendItemValue(const pName: WideString; Value: OleVariant): IItem2; safecall;
    function ComputeWithForm(bDodatatypes: WordBool; bRaiseerror: WordBool): WordBool; safecall;
    procedure CopyAllItems(const pIDoc: IDocument; bReplace: WordBool); safecall;
    function CopyItem(const pIItem: IItem2; const pNewname: WideString): IItem2; safecall;
    function CopyToDatabase(const pIDb: IDatabase): IDocument; safecall;
    function CreateReplyMessage(bToall: WordBool): IDocument; safecall;
    function CreateRichTextItem(const pName: WideString): IRichTextItem; safecall;
    procedure Encrypt; safecall;
    function GetAttachment(const pFilename: WideString): IEmbeddedObject; safecall;
    function GetFirstItem(const pName: WideString): IItem2; safecall;
    function GetItemValue(const pName: WideString): OleVariant; safecall;
    function HasItem(const pName: WideString): WordBool; safecall;
    procedure MakeResponse(const pIDoc: IDocument); safecall;
    procedure PutInFolder(const pName: WideString; bCreateonfail: WordBool); safecall;
    function Remove(bForce: WordBool): WordBool; safecall;
    procedure RemoveFromFolder(const pName: WideString); safecall;
    procedure RemoveItem(const pName: WideString); safecall;
    function RenderToRTItem(const pIRTItem: IRichTextItem): WordBool; safecall;
    function ReplaceItemValue(const pName: WideString; Value: OleVariant): IItem2; safecall;
    function Save(bForce: WordBool; bMakeresponse: WordBool; bMarkread: WordBool): WordBool; safecall;
    procedure Send(bAttachform: WordBool; var pRecipients: OleVariant); safecall;
    procedure Sign; safecall;
    function CloseMIMEEntities(bSavechanges: WordBool; const pName: WideString): WordBool; safecall;
    function CreateMIMEEntity(const pName: WideString): IMIMEEntity; safecall;
    function GetMIMEEntity(const pName: WideString): IMIMEEntity; safecall;
    function GetItemValueCustomDataBytes(const pItemName: WideString; 
                                         const pDatatypeName: WideString): OleVariant; safecall;
    function GetItemValueDateTimeArray(const pItemName: WideString): OleVariant; safecall;
    function GetReceivedItemText: OleVariant; safecall;
    function ReplaceItemValueCustomDataBytes(const pItemName: WideString; 
                                             const pDatatypeName: WideString; CustomData: OleVariant): IItem2; safecall;
    function RemovePermanently(bForce: WordBool): WordBool; safecall;
    function Lock(var pName: OleVariant; bProvisionalOK: WordBool): WordBool; safecall;
    function LockProvisional(var pName: OleVariant): WordBool; safecall;
    procedure Unlock; safecall;
    function Get_LockHolders: OleVariant; safecall;
    function Get_IsEncrypted: WordBool; safecall;
    property Authors: OleVariant read Get_Authors;
    property ColumnValues: OleVariant read Get_ColumnValues;
    property Created: OleVariant read Get_Created;
    property EmbeddedObjects: OleVariant read Get_EmbeddedObjects;
    property EncryptionKeys: OleVariant read Get_EncryptionKeys write Set_EncryptionKeys;
    property EncryptOnSend: WordBool read Get_EncryptOnSend write Set_EncryptOnSend;
    property FolderReferences: OleVariant read Get_FolderReferences;
    property FTSearchScore: Integer read Get_FTSearchScore;
    property HasEmbedded: WordBool read Get_HasEmbedded;
    property HttpURL: WideString read Get_HttpURL;
    property IsDeleted: WordBool read Get_IsDeleted;
    property IsNewNote: WordBool read Get_IsNewNote;
    property IsProfile: WordBool read Get_IsProfile;
    property IsResponse: WordBool read Get_IsResponse;
    property IsSigned: WordBool read Get_IsSigned;
    property IsUIDocOpen: WordBool read Get_IsUIDocOpen;
    property IsValid: WordBool read Get_IsValid;
    property Items: OleVariant read Get_Items;
    property Key: WideString read Get_Key;
    property LastAccessed: OleVariant read Get_LastAccessed;
    property LastModified: OleVariant read Get_LastModified;
    property NameOfProfile: WideString read Get_NameOfProfile;
    property NoteID: WideString read Get_NoteID;
    property NotesURL: WideString read Get_NotesURL;
    property ParentDatabase: IDatabase read Get_ParentDatabase;
    property ParentDocumentUNID: WideString read Get_ParentDocumentUNID;
    property ParentView: IView read Get_ParentView;
    property Responses: IDocumentCollection read Get_Responses;
    property SaveMessageOnSend: WordBool read Get_SaveMessageOnSend write Set_SaveMessageOnSend;
    property SentByAgent: WordBool read Get_SentByAgent;
    property Signer: WideString read Get_Signer;
    property SignOnSend: WordBool read Get_SignOnSend write Set_SignOnSend;
    property Size: Integer read Get_Size;
    property UniversalID: WideString read Get_UniversalID write Set_UniversalID;
    property Verifier: WideString read Get_Verifier;
    property LockHolders: OleVariant read Get_LockHolders;
    property IsEncrypted: WordBool read Get_IsEncrypted;
  end;

// *********************************************************************//
// DispIntf:  IDocumentDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {29131567-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  IDocumentDisp = dispinterface
    ['{29131567-2EED-1069-BF5D-00DD011186B7}']
    property Authors: OleVariant readonly dispid 1610743808;
    property ColumnValues: OleVariant readonly dispid 1610743809;
    property Created: OleVariant readonly dispid 1610743810;
    property EmbeddedObjects: OleVariant readonly dispid 1610743811;
    property EncryptionKeys: OleVariant dispid 1610743812;
    property EncryptOnSend: WordBool dispid 1610743814;
    property FolderReferences: OleVariant readonly dispid 1610743816;
    property FTSearchScore: Integer readonly dispid 1610743817;
    property HasEmbedded: WordBool readonly dispid 1610743818;
    property HttpURL: WideString readonly dispid 1610743819;
    property IsDeleted: WordBool readonly dispid 1610743820;
    property IsNewNote: WordBool readonly dispid 1610743821;
    property IsProfile: WordBool readonly dispid 1610743822;
    property IsResponse: WordBool readonly dispid 1610743823;
    property IsSigned: WordBool readonly dispid 1610743824;
    property IsUIDocOpen: WordBool readonly dispid 1610743825;
    property IsValid: WordBool readonly dispid 1610743826;
    property Items: OleVariant readonly dispid 1610743827;
    property Key: WideString readonly dispid 1610743828;
    property LastAccessed: OleVariant readonly dispid 1610743829;
    property LastModified: OleVariant readonly dispid 1610743830;
    property NameOfProfile: WideString readonly dispid 1610743831;
    property NoteID: WideString readonly dispid 1610743832;
    property NotesURL: WideString readonly dispid 1610743833;
    property ParentDatabase: IDatabase readonly dispid 1610743834;
    property ParentDocumentUNID: WideString readonly dispid 1610743835;
    property ParentView: IView readonly dispid 1610743836;
    property Responses: IDocumentCollection readonly dispid 1610743837;
    property SaveMessageOnSend: WordBool dispid 1610743838;
    property SentByAgent: WordBool readonly dispid 1610743840;
    property Signer: WideString readonly dispid 1610743841;
    property SignOnSend: WordBool dispid 1610743842;
    property Size: Integer readonly dispid 1610743844;
    property UniversalID: WideString dispid 0;
    property Verifier: WideString readonly dispid 1610743847;
    function AppendItemValue(const pName: WideString; Value: OleVariant): IItem2; dispid 1610743848;
    function ComputeWithForm(bDodatatypes: WordBool; bRaiseerror: WordBool): WordBool; dispid 1610743849;
    procedure CopyAllItems(const pIDoc: IDocument; bReplace: WordBool); dispid 1610743850;
    function CopyItem(const pIItem: IItem2; const pNewname: WideString): IItem2; dispid 1610743851;
    function CopyToDatabase(const pIDb: IDatabase): IDocument; dispid 1610743852;
    function CreateReplyMessage(bToall: WordBool): IDocument; dispid 1610743853;
    function CreateRichTextItem(const pName: WideString): IRichTextItem; dispid 1610743854;
    procedure Encrypt; dispid 1610743855;
    function GetAttachment(const pFilename: WideString): IEmbeddedObject; dispid 1610743856;
    function GetFirstItem(const pName: WideString): IItem2; dispid 1610743857;
    function GetItemValue(const pName: WideString): OleVariant; dispid 1610743858;
    function HasItem(const pName: WideString): WordBool; dispid 1610743859;
    procedure MakeResponse(const pIDoc: IDocument); dispid 1610743860;
    procedure PutInFolder(const pName: WideString; bCreateonfail: WordBool); dispid 1610743861;
    function Remove(bForce: WordBool): WordBool; dispid 1610743862;
    procedure RemoveFromFolder(const pName: WideString); dispid 1610743863;
    procedure RemoveItem(const pName: WideString); dispid 1610743864;
    function RenderToRTItem(const pIRTItem: IRichTextItem): WordBool; dispid 1610743865;
    function ReplaceItemValue(const pName: WideString; Value: OleVariant): IItem2; dispid 1610743866;
    function Save(bForce: WordBool; bMakeresponse: WordBool; bMarkread: WordBool): WordBool; dispid 1610743867;
    procedure Send(bAttachform: WordBool; var pRecipients: OleVariant); dispid 1610743868;
    procedure Sign; dispid 1610743869;
    function CloseMIMEEntities(bSavechanges: WordBool; const pName: WideString): WordBool; dispid 1610743870;
    function CreateMIMEEntity(const pName: WideString): IMIMEEntity; dispid 1610743871;
    function GetMIMEEntity(const pName: WideString): IMIMEEntity; dispid 1610743872;
    function GetItemValueCustomDataBytes(const pItemName: WideString; 
                                         const pDatatypeName: WideString): OleVariant; dispid 1610743873;
    function GetItemValueDateTimeArray(const pItemName: WideString): OleVariant; dispid 1610743874;
    function GetReceivedItemText: OleVariant; dispid 1610743875;
    function ReplaceItemValueCustomDataBytes(const pItemName: WideString; 
                                             const pDatatypeName: WideString; CustomData: OleVariant): IItem2; dispid 1610743876;
    function RemovePermanently(bForce: WordBool): WordBool; dispid 1610743877;
    function Lock(var pName: OleVariant; bProvisionalOK: WordBool): WordBool; dispid 1610743878;
    function LockProvisional(var pName: OleVariant): WordBool; dispid 1610743879;
    procedure Unlock; dispid 1610743880;
    property LockHolders: OleVariant readonly dispid 1610743881;
    property IsEncrypted: WordBool readonly dispid 1610743882;
  end;

// *********************************************************************//
// Interface: IView
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {29131579-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  IView = interface(IDispatch)
    ['{29131579-2EED-1069-BF5D-00DD011186B7}']
    function Get_Aliases: OleVariant; safecall;
    function Get_AllEntries: IViewEntryCollection; safecall;
    function Get_AutoUpdate: WordBool; safecall;
    procedure Set_AutoUpdate(pbAuto: WordBool); safecall;
    function Get_BackgroundColor: COLORS; safecall;
    function Get_ColumnCount: Integer; safecall;
    function Get_ColumnNames: OleVariant; safecall;
    function Get_Columns: OleVariant; safecall;
    function Get_Created: OleVariant; safecall;
    function Get_HeaderLines: Integer; safecall;
    function Get_HttpURL: WideString; safecall;
    function Get_IsCalendar: WordBool; safecall;
    function Get_IsCategorized: WordBool; safecall;
    function Get_IsConflict: WordBool; safecall;
    function Get_IsDefaultView: WordBool; safecall;
    function Get_IsFolder: WordBool; safecall;
    function Get_IsHierarchical: WordBool; safecall;
    function Get_IsModified: WordBool; safecall;
    function Get_IsPrivate: WordBool; safecall;
    function Get_LastModified: OleVariant; safecall;
    function Get_Name: WideString; safecall;
    function Get_NotesURL: WideString; safecall;
    function Get_Parent: IDatabase; safecall;
    function Get_ProtectReaders: WordBool; safecall;
    procedure Set_ProtectReaders(pbReaders: WordBool); safecall;
    function Get_Readers: OleVariant; safecall;
    procedure Set_Readers(pReaders: OleVariant); safecall;
    function Get_RowLines: Integer; safecall;
    function Get_SPACING: SPACING; safecall;
    function Get_TopLevelEntryCount: Integer; safecall;
    function Get_UniversalID: WideString; safecall;
    procedure Clear; safecall;
    function CreateViewNav(lCacheSize: Integer): IViewNavigator; safecall;
    function CreateViewNavMaxLevel(lLevel: Integer; lCacheSize: Integer): IViewNavigator; safecall;
    function CreateViewNavFrom(const pIUnk: IUnknown; lCacheSize: Integer): IViewNavigator; safecall;
    function CreateViewNavFromCategory(const pName: WideString; lCacheSize: Integer): IViewNavigator; safecall;
    function CreateViewNavFromChildren(const pIUnk: IUnknown; lCacheSize: Integer): IViewNavigator; safecall;
    function CreateViewNavFromDescendants(const pIUnk: IUnknown; lCacheSize: Integer): IViewNavigator; safecall;
    function FTSearch(const pQuery: WideString; lMaxDocs: Integer): Integer; safecall;
    function GetAllDocumentsByKey(Keys: OleVariant; bExact: WordBool): IDocumentCollection; safecall;
    function GetAllEntriesByKey(Keys: OleVariant; bExact: WordBool): IViewEntryCollection; safecall;
    function GetChild(const pICurrent: IDocument): IDocument; safecall;
    function GetColumn(lColumnNumber: Integer): IViewColumn; safecall;
    function GetDocumentByKey(Keys: OleVariant; bExact: WordBool): IDocument; safecall;
    function GetEntryByKey(Keys: OleVariant; bExact: WordBool): IViewEntry; safecall;
    function GetFirstDocument: IDocument; safecall;
    function GetLastDocument: IDocument; safecall;
    function GetNextDocument(const pICurrent: IDocument): IDocument; safecall;
    function GetNextSibling(const pICurrent: IDocument): IDocument; safecall;
    function GetNthDocument(lN: Integer): IDocument; safecall;
    function GetParentDocument(const pICurrent: IDocument): IDocument; safecall;
    function GetPrevDocument(const pICurrent: IDocument): IDocument; safecall;
    function GetPrevSibling(const pICurrent: IDocument): IDocument; safecall;
    procedure Refresh; safecall;
    procedure Remove; safecall;
    function CreateColumn(pos: Integer; const Name: WideString; const Formula: WideString): IViewColumn; safecall;
    function CopyColumn(nameIndexObj: OleVariant; dst: Integer): IViewColumn; safecall;
    procedure RemoveColumn(nameIndex: OleVariant); safecall;
    procedure Set_Aliases(pAliases: OleVariant); safecall;
    procedure SetAliases(const Aliases: WideString); safecall;
    procedure Set_IsProhibitDesignRefresh(bValue: WordBool); safecall;
    function Get_IsProhibitDesignRefresh: WordBool; safecall;
    procedure Set_IsDefaultView(pbDefault: WordBool); safecall;
    procedure Set_BackgroundColor(plColor: Integer); safecall;
    procedure Set_SPACING(plSpacing: Integer); safecall;
    procedure Set_Name(const ppName: WideString); safecall;
    procedure Set_SelectionFormula(const psValue: WideString); safecall;
    function Get_SelectionFormula: WideString; safecall;
    function Get_EntryCount: Integer; safecall;
    function Lock(var pName: OleVariant; bProvisionalOK: WordBool): WordBool; safecall;
    function LockProvisional(var pName: OleVariant): WordBool; safecall;
    procedure Unlock; safecall;
    function Get_LockHolders: OleVariant; safecall;
    function Get_ViewInheritedName: WideString; safecall;
    property Aliases: OleVariant read Get_Aliases write Set_Aliases;
    property AllEntries: IViewEntryCollection read Get_AllEntries;
    property AutoUpdate: WordBool read Get_AutoUpdate write Set_AutoUpdate;
    property ColumnCount: Integer read Get_ColumnCount;
    property ColumnNames: OleVariant read Get_ColumnNames;
    property Columns: OleVariant read Get_Columns;
    property Created: OleVariant read Get_Created;
    property HeaderLines: Integer read Get_HeaderLines;
    property HttpURL: WideString read Get_HttpURL;
    property IsCalendar: WordBool read Get_IsCalendar;
    property IsCategorized: WordBool read Get_IsCategorized;
    property IsConflict: WordBool read Get_IsConflict;
    property IsDefaultView: WordBool read Get_IsDefaultView write Set_IsDefaultView;
    property IsFolder: WordBool read Get_IsFolder;
    property IsHierarchical: WordBool read Get_IsHierarchical;
    property IsModified: WordBool read Get_IsModified;
    property IsPrivate: WordBool read Get_IsPrivate;
    property LastModified: OleVariant read Get_LastModified;
    property Name: WideString read Get_Name write Set_Name;
    property NotesURL: WideString read Get_NotesURL;
    property Parent: IDatabase read Get_Parent;
    property ProtectReaders: WordBool read Get_ProtectReaders write Set_ProtectReaders;
    property Readers: OleVariant read Get_Readers write Set_Readers;
    property RowLines: Integer read Get_RowLines;
    property TopLevelEntryCount: Integer read Get_TopLevelEntryCount;
    property UniversalID: WideString read Get_UniversalID;
    property IsProhibitDesignRefresh: WordBool read Get_IsProhibitDesignRefresh write Set_IsProhibitDesignRefresh;
    property SelectionFormula: WideString read Get_SelectionFormula write Set_SelectionFormula;
    property EntryCount: Integer read Get_EntryCount;
    property LockHolders: OleVariant read Get_LockHolders;
    property ViewInheritedName: WideString read Get_ViewInheritedName;
  end;

// *********************************************************************//
// DispIntf:  IViewDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {29131579-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  IViewDisp = dispinterface
    ['{29131579-2EED-1069-BF5D-00DD011186B7}']
    property Aliases: OleVariant dispid 1610743808;
    property AllEntries: IViewEntryCollection readonly dispid 1610743809;
    property AutoUpdate: WordBool dispid 1610743810;
    function BackgroundColor: COLORS; dispid 1610743812;
    property ColumnCount: Integer readonly dispid 1610743813;
    property ColumnNames: OleVariant readonly dispid 1610743814;
    property Columns: OleVariant readonly dispid 1610743815;
    property Created: OleVariant readonly dispid 1610743816;
    property HeaderLines: Integer readonly dispid 1610743817;
    property HttpURL: WideString readonly dispid 1610743818;
    property IsCalendar: WordBool readonly dispid 1610743819;
    property IsCategorized: WordBool readonly dispid 1610743820;
    property IsConflict: WordBool readonly dispid 1610743821;
    property IsDefaultView: WordBool dispid 1610743822;
    property IsFolder: WordBool readonly dispid 1610743823;
    property IsHierarchical: WordBool readonly dispid 1610743824;
    property IsModified: WordBool readonly dispid 1610743825;
    property IsPrivate: WordBool readonly dispid 1610743826;
    property LastModified: OleVariant readonly dispid 1610743827;
    property Name: WideString dispid 0;
    property NotesURL: WideString readonly dispid 1610743829;
    property Parent: IDatabase readonly dispid 1610743830;
    property ProtectReaders: WordBool dispid 1610743831;
    property Readers: OleVariant dispid 1610743833;
    property RowLines: Integer readonly dispid 1610743835;
    function SPACING: SPACING; dispid 1610743836;
    property TopLevelEntryCount: Integer readonly dispid 1610743837;
    property UniversalID: WideString readonly dispid 1610743838;
    procedure Clear; dispid 1610743839;
    function CreateViewNav(lCacheSize: Integer): IViewNavigator; dispid 1610743840;
    function CreateViewNavMaxLevel(lLevel: Integer; lCacheSize: Integer): IViewNavigator; dispid 1610743841;
    function CreateViewNavFrom(const pIUnk: IUnknown; lCacheSize: Integer): IViewNavigator; dispid 1610743842;
    function CreateViewNavFromCategory(const pName: WideString; lCacheSize: Integer): IViewNavigator; dispid 1610743843;
    function CreateViewNavFromChildren(const pIUnk: IUnknown; lCacheSize: Integer): IViewNavigator; dispid 1610743844;
    function CreateViewNavFromDescendants(const pIUnk: IUnknown; lCacheSize: Integer): IViewNavigator; dispid 1610743845;
    function FTSearch(const pQuery: WideString; lMaxDocs: Integer): Integer; dispid 1610743846;
    function GetAllDocumentsByKey(Keys: OleVariant; bExact: WordBool): IDocumentCollection; dispid 1610743847;
    function GetAllEntriesByKey(Keys: OleVariant; bExact: WordBool): IViewEntryCollection; dispid 1610743848;
    function GetChild(const pICurrent: IDocument): IDocument; dispid 1610743849;
    function GetColumn(lColumnNumber: Integer): IViewColumn; dispid 1610743850;
    function GetDocumentByKey(Keys: OleVariant; bExact: WordBool): IDocument; dispid 1610743851;
    function GetEntryByKey(Keys: OleVariant; bExact: WordBool): IViewEntry; dispid 1610743852;
    function GetFirstDocument: IDocument; dispid 1610743853;
    function GetLastDocument: IDocument; dispid 1610743854;
    function GetNextDocument(const pICurrent: IDocument): IDocument; dispid 1610743855;
    function GetNextSibling(const pICurrent: IDocument): IDocument; dispid 1610743856;
    function GetNthDocument(lN: Integer): IDocument; dispid 1610743857;
    function GetParentDocument(const pICurrent: IDocument): IDocument; dispid 1610743858;
    function GetPrevDocument(const pICurrent: IDocument): IDocument; dispid 1610743859;
    function GetPrevSibling(const pICurrent: IDocument): IDocument; dispid 1610743860;
    procedure Refresh; dispid 1610743861;
    procedure Remove; dispid 1610743862;
    function CreateColumn(pos: Integer; const Name: WideString; const Formula: WideString): IViewColumn; dispid 1610743863;
    function CopyColumn(nameIndexObj: OleVariant; dst: Integer): IViewColumn; dispid 1610743864;
    procedure RemoveColumn(nameIndex: OleVariant); dispid 1610743865;
    procedure SetAliases(const Aliases: WideString); dispid 1610743867;
    property IsProhibitDesignRefresh: WordBool dispid 1610743868;
    property SelectionFormula: WideString dispid 1610743874;
    property EntryCount: Integer readonly dispid 1610743876;
    function Lock(var pName: OleVariant; bProvisionalOK: WordBool): WordBool; dispid 1610743877;
    function LockProvisional(var pName: OleVariant): WordBool; dispid 1610743878;
    procedure Unlock; dispid 1610743879;
    property LockHolders: OleVariant readonly dispid 1610743880;
    property ViewInheritedName: WideString readonly dispid 1610743881;
  end;

// *********************************************************************//
// Interface: IViewEntryCollection
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {2913157C-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  IViewEntryCollection = interface(IDispatch)
    ['{2913157C-2EED-1069-BF5D-00DD011186B7}']
    function Get_Count: Integer; safecall;
    function Get_Parent: IView; safecall;
    function Get_Query: WideString; safecall;
    procedure AddEntry(const pIObj: IUnknown; bReserved: WordBool); safecall;
    procedure DeleteEntry(const pIEntry: IViewEntry); safecall;
    procedure FTSearch(const pQuery: WideString; lMaxDocs: Integer); safecall;
    function GetEntry(const pIObj: IUnknown): IViewEntry; safecall;
    function GetFirstEntry: IViewEntry; safecall;
    function GetLastEntry: IViewEntry; safecall;
    function GetNextEntry(const pIEntry: IViewEntry): IViewEntry; safecall;
    function GetNthEntry(lN: Integer): IViewEntry; safecall;
    function GetPrevEntry(const pIEntry: IViewEntry): IViewEntry; safecall;
    procedure PutAllInFolder(const pFolderName: WideString; bCreateonfail: WordBool); safecall;
    procedure RemoveAll(bForce: WordBool); safecall;
    procedure RemoveAllFromFolder(const pFolderName: WideString); safecall;
    procedure StampAll(const pItemName: WideString; Value: OleVariant); safecall;
    procedure UpdateAll; safecall;
    property Count: Integer read Get_Count;
    property Parent: IView read Get_Parent;
    property Query: WideString read Get_Query;
  end;

// *********************************************************************//
// DispIntf:  IViewEntryCollectionDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {2913157C-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  IViewEntryCollectionDisp = dispinterface
    ['{2913157C-2EED-1069-BF5D-00DD011186B7}']
    property Count: Integer readonly dispid 1610743808;
    property Parent: IView readonly dispid 1610743809;
    property Query: WideString readonly dispid 1610743810;
    procedure AddEntry(const pIObj: IUnknown; bReserved: WordBool); dispid 1610743811;
    procedure DeleteEntry(const pIEntry: IViewEntry); dispid 1610743812;
    procedure FTSearch(const pQuery: WideString; lMaxDocs: Integer); dispid 1610743813;
    function GetEntry(const pIObj: IUnknown): IViewEntry; dispid 1610743814;
    function GetFirstEntry: IViewEntry; dispid 1610743815;
    function GetLastEntry: IViewEntry; dispid 1610743816;
    function GetNextEntry(const pIEntry: IViewEntry): IViewEntry; dispid 1610743817;
    function GetNthEntry(lN: Integer): IViewEntry; dispid 1610743818;
    function GetPrevEntry(const pIEntry: IViewEntry): IViewEntry; dispid 1610743819;
    procedure PutAllInFolder(const pFolderName: WideString; bCreateonfail: WordBool); dispid 1610743820;
    procedure RemoveAll(bForce: WordBool); dispid 1610743821;
    procedure RemoveAllFromFolder(const pFolderName: WideString); dispid 1610743822;
    procedure StampAll(const pItemName: WideString; Value: OleVariant); dispid 1610743823;
    procedure UpdateAll; dispid 1610743824;
  end;

// *********************************************************************//
// Interface: IViewEntry
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {2913157B-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  IViewEntry = interface(IDispatch)
    ['{2913157B-2EED-1069-BF5D-00DD011186B7}']
    function Get_ChildCount: Integer; safecall;
    function Get_ColumnIndentLevel: Integer; safecall;
    function Get_ColumnValues: OleVariant; safecall;
    function Get_DescendantCount: Integer; safecall;
    function Get_Document: IDocument; safecall;
    function Get_FTSearchScore: Integer; safecall;
    function Get_IndentLevel: Integer; safecall;
    function Get_IsCategory: WordBool; safecall;
    function Get_IsConflict: WordBool; safecall;
    function Get_IsDocument: WordBool; safecall;
    function Get_IsTotal: WordBool; safecall;
    function Get_IsValid: WordBool; safecall;
    function Get_NoteID: WideString; safecall;
    function Get_Parent: IUnknown; safecall;
    function Get_SiblingCount: Integer; safecall;
    function Get_UniversalID: WideString; safecall;
    function GetPosition(const pSeparator: WideString): WideString; safecall;
    property ChildCount: Integer read Get_ChildCount;
    property ColumnIndentLevel: Integer read Get_ColumnIndentLevel;
    property ColumnValues: OleVariant read Get_ColumnValues;
    property DescendantCount: Integer read Get_DescendantCount;
    property Document: IDocument read Get_Document;
    property FTSearchScore: Integer read Get_FTSearchScore;
    property IndentLevel: Integer read Get_IndentLevel;
    property IsCategory: WordBool read Get_IsCategory;
    property IsConflict: WordBool read Get_IsConflict;
    property IsDocument: WordBool read Get_IsDocument;
    property IsTotal: WordBool read Get_IsTotal;
    property IsValid: WordBool read Get_IsValid;
    property NoteID: WideString read Get_NoteID;
    property Parent: IUnknown read Get_Parent;
    property SiblingCount: Integer read Get_SiblingCount;
    property UniversalID: WideString read Get_UniversalID;
  end;

// *********************************************************************//
// DispIntf:  IViewEntryDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {2913157B-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  IViewEntryDisp = dispinterface
    ['{2913157B-2EED-1069-BF5D-00DD011186B7}']
    property ChildCount: Integer readonly dispid 1610743808;
    property ColumnIndentLevel: Integer readonly dispid 1610743809;
    property ColumnValues: OleVariant readonly dispid 1610743810;
    property DescendantCount: Integer readonly dispid 1610743811;
    property Document: IDocument readonly dispid 1610743812;
    property FTSearchScore: Integer readonly dispid 1610743813;
    property IndentLevel: Integer readonly dispid 1610743814;
    property IsCategory: WordBool readonly dispid 1610743815;
    property IsConflict: WordBool readonly dispid 1610743816;
    property IsDocument: WordBool readonly dispid 1610743817;
    property IsTotal: WordBool readonly dispid 1610743818;
    property IsValid: WordBool readonly dispid 1610743819;
    property NoteID: WideString readonly dispid 1610743820;
    property Parent: IUnknown readonly dispid 1610743821;
    property SiblingCount: Integer readonly dispid 1610743822;
    property UniversalID: WideString readonly dispid 1610743823;
    function GetPosition(const pSeparator: WideString): WideString; dispid 1610743824;
  end;

// *********************************************************************//
// Interface: IViewNavigator
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {2913157D-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  IViewNavigator = interface(IDispatch)
    ['{2913157D-2EED-1069-BF5D-00DD011186B7}']
    function Get_CacheSize: Integer; safecall;
    procedure Set_CacheSize(plSize: Integer); safecall;
    function Get_MaxLevel: Integer; safecall;
    procedure Set_MaxLevel(plLevel: Integer); safecall;
    function Get_ParentView: IView; safecall;
    function GetChild(const pICurrent: IViewEntry): IViewEntry; safecall;
    function GetEntry(const pICurrent: IViewEntry): IViewEntry; safecall;
    function GetCurrent: IViewEntry; safecall;
    function GetFirst: IViewEntry; safecall;
    function GetFirstDocument: IViewEntry; safecall;
    function GetLast: IViewEntry; safecall;
    function GetLastDocument: IViewEntry; safecall;
    function GetNext(const pICurrent: IViewEntry): IViewEntry; safecall;
    function GetNextCategory(const pICurrent: IViewEntry): IViewEntry; safecall;
    function GetNextDocument(const pICurrent: IViewEntry): IViewEntry; safecall;
    function GetNextSibling(const pICurrent: IViewEntry): IViewEntry; safecall;
    function GetNth(lN: Integer): IViewEntry; safecall;
    function GetParent(const pICurrent: IViewEntry): IViewEntry; safecall;
    function GetPos(const pPos: WideString; const pSeparator: WideString): IViewEntry; safecall;
    function GetPrev(const pICurrent: IViewEntry): IViewEntry; safecall;
    function GetPrevCategory(const pICurrent: IViewEntry): IViewEntry; safecall;
    function GetPrevDocument(const pICurrent: IViewEntry): IViewEntry; safecall;
    function GetPrevSibling(const pICurrent: IViewEntry): IViewEntry; safecall;
    procedure GotoChild(const pIViewEntry: IViewEntry); safecall;
    procedure GotoEntry(const pIObj: IUnknown); safecall;
    procedure GotoFirst; safecall;
    procedure GotoFirstDocument; safecall;
    procedure GotoLast; safecall;
    procedure GotoLastDocument; safecall;
    procedure GotoNext(const pIViewEntry: IViewEntry); safecall;
    procedure GotoNextCategory(const pIViewEntry: IViewEntry); safecall;
    procedure GotoNextDocument(const pIViewEntry: IViewEntry); safecall;
    procedure GotoNextSibling(const pIViewEntry: IViewEntry); safecall;
    procedure GotoParent(const pIViewEntry: IViewEntry); safecall;
    procedure GotoPos(const pPos: WideString; const pSeparator: WideString); safecall;
    procedure GotoPrev(const pIViewEntry: IViewEntry); safecall;
    procedure GotoPrevCategory(const pIViewEntry: IViewEntry); safecall;
    procedure GotoPrevDocument(const pIViewEntry: IViewEntry); safecall;
    procedure GotoPrevSibling(const pIViewEntry: IViewEntry); safecall;
    function Get_Count: Integer; safecall;
    property CacheSize: Integer read Get_CacheSize write Set_CacheSize;
    property MaxLevel: Integer read Get_MaxLevel write Set_MaxLevel;
    property ParentView: IView read Get_ParentView;
    property Count: Integer read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  IViewNavigatorDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {2913157D-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  IViewNavigatorDisp = dispinterface
    ['{2913157D-2EED-1069-BF5D-00DD011186B7}']
    property CacheSize: Integer dispid 1610743808;
    property MaxLevel: Integer dispid 1610743810;
    property ParentView: IView readonly dispid 1610743812;
    function GetChild(const pICurrent: IViewEntry): IViewEntry; dispid 1610743813;
    function GetEntry(const pICurrent: IViewEntry): IViewEntry; dispid 1610743814;
    function GetCurrent: IViewEntry; dispid 1610743815;
    function GetFirst: IViewEntry; dispid 1610743816;
    function GetFirstDocument: IViewEntry; dispid 1610743817;
    function GetLast: IViewEntry; dispid 1610743818;
    function GetLastDocument: IViewEntry; dispid 1610743819;
    function GetNext(const pICurrent: IViewEntry): IViewEntry; dispid 1610743820;
    function GetNextCategory(const pICurrent: IViewEntry): IViewEntry; dispid 1610743821;
    function GetNextDocument(const pICurrent: IViewEntry): IViewEntry; dispid 1610743822;
    function GetNextSibling(const pICurrent: IViewEntry): IViewEntry; dispid 1610743823;
    function GetNth(lN: Integer): IViewEntry; dispid 1610743824;
    function GetParent(const pICurrent: IViewEntry): IViewEntry; dispid 1610743825;
    function GetPos(const pPos: WideString; const pSeparator: WideString): IViewEntry; dispid 1610743826;
    function GetPrev(const pICurrent: IViewEntry): IViewEntry; dispid 1610743827;
    function GetPrevCategory(const pICurrent: IViewEntry): IViewEntry; dispid 1610743828;
    function GetPrevDocument(const pICurrent: IViewEntry): IViewEntry; dispid 1610743829;
    function GetPrevSibling(const pICurrent: IViewEntry): IViewEntry; dispid 1610743830;
    procedure GotoChild(const pIViewEntry: IViewEntry); dispid 1610743831;
    procedure GotoEntry(const pIObj: IUnknown); dispid 1610743832;
    procedure GotoFirst; dispid 1610743833;
    procedure GotoFirstDocument; dispid 1610743834;
    procedure GotoLast; dispid 1610743835;
    procedure GotoLastDocument; dispid 1610743836;
    procedure GotoNext(const pIViewEntry: IViewEntry); dispid 1610743837;
    procedure GotoNextCategory(const pIViewEntry: IViewEntry); dispid 1610743838;
    procedure GotoNextDocument(const pIViewEntry: IViewEntry); dispid 1610743839;
    procedure GotoNextSibling(const pIViewEntry: IViewEntry); dispid 1610743840;
    procedure GotoParent(const pIViewEntry: IViewEntry); dispid 1610743841;
    procedure GotoPos(const pPos: WideString; const pSeparator: WideString); dispid 1610743842;
    procedure GotoPrev(const pIViewEntry: IViewEntry); dispid 1610743843;
    procedure GotoPrevCategory(const pIViewEntry: IViewEntry); dispid 1610743844;
    procedure GotoPrevDocument(const pIViewEntry: IViewEntry); dispid 1610743845;
    procedure GotoPrevSibling(const pIViewEntry: IViewEntry); dispid 1610743846;
    property Count: Integer readonly dispid 1610743847;
  end;

// *********************************************************************//
// Interface: IViewColumn
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {2913157A-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  IViewColumn = interface(IDispatch)
    ['{2913157A-2EED-1069-BF5D-00DD011186B7}']
    function Get_Alignment: VC_ALIGN; safecall;
    function Get_DateFmt: VC_DATEFMT; safecall;
    function Get_FontColor: COLORS; safecall;
    function Get_FontFace: WideString; safecall;
    function Get_FontPointSize: Integer; safecall;
    function Get_FontStyle: VC_FONTSTYLE; safecall;
    function Get_Formula: WideString; safecall;
    function Get_HeaderAlignment: VC_ALIGN; safecall;
    function Get_IsAccentSensitiveSort: WordBool; safecall;
    function Get_IsCaseSensitiveSort: WordBool; safecall;
    function Get_IsCategory: WordBool; safecall;
    function Get_IsField: WordBool; safecall;
    function Get_IsFormula: WordBool; safecall;
    function Get_IsHidden: WordBool; safecall;
    function Get_IsHideDetail: WordBool; safecall;
    function Get_IsIcon: WordBool; safecall;
    function Get_IsResize: WordBool; safecall;
    function Get_IsResortAscending: WordBool; safecall;
    function Get_IsResortDescending: WordBool; safecall;
    function Get_IsResortToView: WordBool; safecall;
    function Get_IsResponse: WordBool; safecall;
    function Get_IsSecondaryResort: WordBool; safecall;
    function Get_IsSecondaryResortDescending: WordBool; safecall;
    function Get_IsShowTwistie: WordBool; safecall;
    function Get_IsSortDescending: WordBool; safecall;
    function Get_IsSorted: WordBool; safecall;
    function Get_ItemName: WideString; safecall;
    function Get_ListSep: VC_SEP; safecall;
    function Get_NumberAttrib: VC_NUMATTR; safecall;
    function Get_NumberDigits: Integer; safecall;
    function Get_NumberFormat: VC_NUMFMT; safecall;
    function Get_Parent: IView; safecall;
    function Get_Position: Integer; safecall;
    function Get_TimeDateFmt: VC_TDFMT; safecall;
    function Get_TimeFmt: VC_TIMEFMT; safecall;
    function Get_TimeZoneFmt: VC_TIMEZONEFMT; safecall;
    function Get_Title: WideString; safecall;
    function Get_Width: Integer; safecall;
    function Get_HeaderFontColor: Integer; safecall;
    function Get_HeaderFontFace: WideString; safecall;
    function Get_HeaderFontPointSize: Integer; safecall;
    function Get_HeaderFontStyle: Integer; safecall;
    function Get_SecondaryResortColumnIndex: Integer; safecall;
    function Get_IsFontBold: WordBool; safecall;
    function Get_IsFontItalic: WordBool; safecall;
    function Get_IsFontUnderline: WordBool; safecall;
    function Get_IsFontStrikethrough: WordBool; safecall;
    function Get_IsHeaderFontBold: WordBool; safecall;
    function Get_IsHeaderFontItalic: WordBool; safecall;
    function Get_IsHeaderFontUnderline: WordBool; safecall;
    function Get_IsHeaderFontStrikethrough: WordBool; safecall;
    function Get_IsNumberAttribParens: WordBool; safecall;
    function Get_IsNumberAttribPunctuated: WordBool; safecall;
    function Get_IsNumberAttribPercent: WordBool; safecall;
    function Get_ResortToViewName: WideString; safecall;
    procedure Set_Alignment(plVal: Integer); safecall;
    procedure Set_DateFmt(plVal: Integer); safecall;
    procedure Set_FontColor(plVal: Integer); safecall;
    procedure Set_FontFace(const ppResult: WideString); safecall;
    procedure Set_FontPointSize(plVal: Integer); safecall;
    procedure Set_FontStyle(plVal: Integer); safecall;
    procedure Set_Formula(const ppResult: WideString); safecall;
    procedure Set_HeaderAlignment(plVal: Integer); safecall;
    procedure Set_IsAccentSensitiveSort(pbFlag: WordBool); safecall;
    procedure Set_IsCaseSensitiveSort(pbFlag: WordBool); safecall;
    procedure Set_IsHidden(pbFlag: WordBool); safecall;
    procedure Set_IsHideDetail(pbFlag: WordBool); safecall;
    procedure Set_IsResize(pbFlag: WordBool); safecall;
    procedure Set_IsResortAscending(pbFlag: WordBool); safecall;
    procedure Set_IsResortDescending(pbFlag: WordBool); safecall;
    procedure Set_IsResortToView(pbFlag: WordBool); safecall;
    procedure Set_IsSecondaryResort(pbFlag: WordBool); safecall;
    procedure Set_IsSecondaryResortDescending(pbFlag: WordBool); safecall;
    procedure Set_IsShowTwistie(pbFlag: WordBool); safecall;
    procedure Set_IsSortDescending(pbFlag: WordBool); safecall;
    procedure Set_IsSorted(pbFlag: WordBool); safecall;
    procedure Set_ListSep(plVal: Integer); safecall;
    procedure Set_NumberAttrib(plVal: Integer); safecall;
    procedure Set_NumberDigits(plVal: Integer); safecall;
    procedure Set_NumberFormat(plVal: Integer); safecall;
    procedure Set_Position(plVal: Integer); safecall;
    procedure Set_TimeDateFmt(plVal: Integer); safecall;
    procedure Set_TimeFmt(plVal: Integer); safecall;
    procedure Set_TimeZoneFmt(plVal: Integer); safecall;
    procedure Set_Title(const ppResult: WideString); safecall;
    procedure Set_Width(plVal: Integer); safecall;
    procedure Set_HeaderFontColor(plVal: Integer); safecall;
    procedure Set_HeaderFontFace(const ppResult: WideString); safecall;
    procedure Set_HeaderFontPointSize(plVal: Integer); safecall;
    procedure Set_HeaderFontStyle(plVal: Integer); safecall;
    procedure Set_SecondaryResortColumnIndex(plVal: Integer); safecall;
    procedure Set_IsFontBold(pbFlag: WordBool); safecall;
    procedure Set_IsFontItalic(pbFlag: WordBool); safecall;
    procedure Set_IsFontUnderline(pbFlag: WordBool); safecall;
    procedure Set_IsFontStrikethrough(pbFlag: WordBool); safecall;
    procedure Set_IsHeaderFontBold(pbFlag: WordBool); safecall;
    procedure Set_IsHeaderFontItalic(pbFlag: WordBool); safecall;
    procedure Set_IsHeaderFontUnderline(pbFlag: WordBool); safecall;
    procedure Set_IsHeaderFontStrikethrough(pbFlag: WordBool); safecall;
    procedure Set_IsNumberAttribParens(pbFlag: WordBool); safecall;
    procedure Set_IsNumberAttribPunctuated(pbFlag: WordBool); safecall;
    procedure Set_IsNumberAttribPercent(pbFlag: WordBool); safecall;
    procedure Set_ResortToViewName(const ppResult: WideString); safecall;
    property FontFace: WideString read Get_FontFace write Set_FontFace;
    property FontPointSize: Integer read Get_FontPointSize write Set_FontPointSize;
    property Formula: WideString read Get_Formula write Set_Formula;
    property IsAccentSensitiveSort: WordBool read Get_IsAccentSensitiveSort write Set_IsAccentSensitiveSort;
    property IsCaseSensitiveSort: WordBool read Get_IsCaseSensitiveSort write Set_IsCaseSensitiveSort;
    property IsCategory: WordBool read Get_IsCategory;
    property IsField: WordBool read Get_IsField;
    property IsFormula: WordBool read Get_IsFormula;
    property IsHidden: WordBool read Get_IsHidden write Set_IsHidden;
    property IsHideDetail: WordBool read Get_IsHideDetail write Set_IsHideDetail;
    property IsIcon: WordBool read Get_IsIcon;
    property IsResize: WordBool read Get_IsResize write Set_IsResize;
    property IsResortAscending: WordBool read Get_IsResortAscending write Set_IsResortAscending;
    property IsResortDescending: WordBool read Get_IsResortDescending write Set_IsResortDescending;
    property IsResortToView: WordBool read Get_IsResortToView write Set_IsResortToView;
    property IsResponse: WordBool read Get_IsResponse;
    property IsSecondaryResort: WordBool read Get_IsSecondaryResort write Set_IsSecondaryResort;
    property IsSecondaryResortDescending: WordBool read Get_IsSecondaryResortDescending write Set_IsSecondaryResortDescending;
    property IsShowTwistie: WordBool read Get_IsShowTwistie write Set_IsShowTwistie;
    property IsSortDescending: WordBool read Get_IsSortDescending write Set_IsSortDescending;
    property IsSorted: WordBool read Get_IsSorted write Set_IsSorted;
    property ItemName: WideString read Get_ItemName;
    property NumberDigits: Integer read Get_NumberDigits write Set_NumberDigits;
    property Parent: IView read Get_Parent;
    property Position: Integer read Get_Position write Set_Position;
    property Title: WideString read Get_Title write Set_Title;
    property Width: Integer read Get_Width write Set_Width;
    property HeaderFontColor: Integer read Get_HeaderFontColor write Set_HeaderFontColor;
    property HeaderFontFace: WideString read Get_HeaderFontFace write Set_HeaderFontFace;
    property HeaderFontPointSize: Integer read Get_HeaderFontPointSize write Set_HeaderFontPointSize;
    property HeaderFontStyle: Integer read Get_HeaderFontStyle write Set_HeaderFontStyle;
    property SecondaryResortColumnIndex: Integer read Get_SecondaryResortColumnIndex write Set_SecondaryResortColumnIndex;
    property IsFontBold: WordBool read Get_IsFontBold write Set_IsFontBold;
    property IsFontItalic: WordBool read Get_IsFontItalic write Set_IsFontItalic;
    property IsFontUnderline: WordBool read Get_IsFontUnderline write Set_IsFontUnderline;
    property IsFontStrikethrough: WordBool read Get_IsFontStrikethrough write Set_IsFontStrikethrough;
    property IsHeaderFontBold: WordBool read Get_IsHeaderFontBold write Set_IsHeaderFontBold;
    property IsHeaderFontItalic: WordBool read Get_IsHeaderFontItalic write Set_IsHeaderFontItalic;
    property IsHeaderFontUnderline: WordBool read Get_IsHeaderFontUnderline write Set_IsHeaderFontUnderline;
    property IsHeaderFontStrikethrough: WordBool read Get_IsHeaderFontStrikethrough write Set_IsHeaderFontStrikethrough;
    property IsNumberAttribParens: WordBool read Get_IsNumberAttribParens write Set_IsNumberAttribParens;
    property IsNumberAttribPunctuated: WordBool read Get_IsNumberAttribPunctuated write Set_IsNumberAttribPunctuated;
    property IsNumberAttribPercent: WordBool read Get_IsNumberAttribPercent write Set_IsNumberAttribPercent;
    property ResortToViewName: WideString read Get_ResortToViewName write Set_ResortToViewName;
  end;

// *********************************************************************//
// DispIntf:  IViewColumnDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {2913157A-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  IViewColumnDisp = dispinterface
    ['{2913157A-2EED-1069-BF5D-00DD011186B7}']
    function Alignment: VC_ALIGN; dispid 1610743808;
    function DateFmt: VC_DATEFMT; dispid 1610743809;
    function FontColor: COLORS; dispid 1610743810;
    property FontFace: WideString dispid 1610743811;
    property FontPointSize: Integer dispid 1610743812;
    function FontStyle: VC_FONTSTYLE; dispid 1610743813;
    property Formula: WideString dispid 1610743814;
    function HeaderAlignment: VC_ALIGN; dispid 1610743815;
    property IsAccentSensitiveSort: WordBool dispid 1610743816;
    property IsCaseSensitiveSort: WordBool dispid 1610743817;
    property IsCategory: WordBool readonly dispid 1610743818;
    property IsField: WordBool readonly dispid 1610743819;
    property IsFormula: WordBool readonly dispid 1610743820;
    property IsHidden: WordBool dispid 1610743821;
    property IsHideDetail: WordBool dispid 1610743822;
    property IsIcon: WordBool readonly dispid 1610743823;
    property IsResize: WordBool dispid 1610743824;
    property IsResortAscending: WordBool dispid 1610743825;
    property IsResortDescending: WordBool dispid 1610743826;
    property IsResortToView: WordBool dispid 1610743827;
    property IsResponse: WordBool readonly dispid 1610743828;
    property IsSecondaryResort: WordBool dispid 1610743829;
    property IsSecondaryResortDescending: WordBool dispid 1610743830;
    property IsShowTwistie: WordBool dispid 1610743831;
    property IsSortDescending: WordBool dispid 1610743832;
    property IsSorted: WordBool dispid 1610743833;
    property ItemName: WideString readonly dispid 1610743834;
    function ListSep: VC_SEP; dispid 1610743835;
    function NumberAttrib: VC_NUMATTR; dispid 1610743836;
    property NumberDigits: Integer dispid 1610743837;
    function NumberFormat: VC_NUMFMT; dispid 1610743838;
    property Parent: IView readonly dispid 1610743839;
    property Position: Integer dispid 1610743840;
    function TimeDateFmt: VC_TDFMT; dispid 1610743841;
    function TimeFmt: VC_TIMEFMT; dispid 1610743842;
    function TimeZoneFmt: VC_TIMEZONEFMT; dispid 1610743843;
    property Title: WideString dispid 0;
    property Width: Integer dispid 1610743845;
    property HeaderFontColor: Integer dispid 1610743846;
    property HeaderFontFace: WideString dispid 1610743847;
    property HeaderFontPointSize: Integer dispid 1610743848;
    property HeaderFontStyle: Integer dispid 1610743849;
    property SecondaryResortColumnIndex: Integer dispid 1610743850;
    property IsFontBold: WordBool dispid 1610743851;
    property IsFontItalic: WordBool dispid 1610743852;
    property IsFontUnderline: WordBool dispid 1610743853;
    property IsFontStrikethrough: WordBool dispid 1610743854;
    property IsHeaderFontBold: WordBool dispid 1610743855;
    property IsHeaderFontItalic: WordBool dispid 1610743856;
    property IsHeaderFontUnderline: WordBool dispid 1610743857;
    property IsHeaderFontStrikethrough: WordBool dispid 1610743858;
    property IsNumberAttribParens: WordBool dispid 1610743859;
    property IsNumberAttribPunctuated: WordBool dispid 1610743860;
    property IsNumberAttribPercent: WordBool dispid 1610743861;
    property ResortToViewName: WideString dispid 1610743862;
  end;

// *********************************************************************//
// Interface: IItem
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {2913156B-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  IItem = interface(IDispatch)
    ['{2913156B-2EED-1069-BF5D-00DD011186B7}']
    function Get_DateTimeValue: IDateTime; safecall;
    procedure Set_DateTimeValue(const ppITime: IDateTime); safecall;
    function Get_IsAuthors: WordBool; safecall;
    procedure Set_IsAuthors(pbFlag: WordBool); safecall;
    function Get_IsEncrypted: WordBool; safecall;
    procedure Set_IsEncrypted(pbFlag: WordBool); safecall;
    function Get_IsNames: WordBool; safecall;
    procedure Set_IsNames(pbFlag: WordBool); safecall;
    function Get_IsProtected: WordBool; safecall;
    procedure Set_IsProtected(pbFlag: WordBool); safecall;
    function Get_IsReaders: WordBool; safecall;
    procedure Set_IsReaders(pbFlag: WordBool); safecall;
    function Get_IsSigned: WordBool; safecall;
    procedure Set_IsSigned(pbFlag: WordBool); safecall;
    function Get_IsSummary: WordBool; safecall;
    procedure Set_IsSummary(pbFlag: WordBool); safecall;
    function Get_LastModified: OleVariant; safecall;
    function Get_Name: WideString; safecall;
    function Get_Parent: IDocument; safecall;
    function Get_SaveToDisk: WordBool; safecall;
    procedure Set_SaveToDisk(pbFlag: WordBool); safecall;
    function Get_Text: WideString; safecall;
    function Get_type_: IT_TYPE; safecall;
    function Get_ValueLength: Integer; safecall;
    function Get_Values: OleVariant; safecall;
    procedure Set_Values(pValue: OleVariant); safecall;
    function Abstract(lMaxlen: Integer; bDropvowels: WordBool; bUsedict: WordBool): WideString; safecall;
    procedure AppendToTextList(Values: OleVariant); safecall;
    function Contains(Value: OleVariant): WordBool; safecall;
    function CopyItemToDocument(const pIDoc: IDocument; const pNewname: WideString): IItem2; safecall;
    function GetMIMEEntity: IMIMEEntity; safecall;
    procedure Remove; safecall;
    property DateTimeValue: IDateTime read Get_DateTimeValue write Set_DateTimeValue;
    property IsAuthors: WordBool read Get_IsAuthors write Set_IsAuthors;
    property IsEncrypted: WordBool read Get_IsEncrypted write Set_IsEncrypted;
    property IsNames: WordBool read Get_IsNames write Set_IsNames;
    property IsProtected: WordBool read Get_IsProtected write Set_IsProtected;
    property IsReaders: WordBool read Get_IsReaders write Set_IsReaders;
    property IsSigned: WordBool read Get_IsSigned write Set_IsSigned;
    property IsSummary: WordBool read Get_IsSummary write Set_IsSummary;
    property LastModified: OleVariant read Get_LastModified;
    property Name: WideString read Get_Name;
    property Parent: IDocument read Get_Parent;
    property SaveToDisk: WordBool read Get_SaveToDisk write Set_SaveToDisk;
    property Text: WideString read Get_Text;
    property type_: IT_TYPE read Get_type_;
    property ValueLength: Integer read Get_ValueLength;
    property Values: OleVariant read Get_Values write Set_Values;
  end;

// *********************************************************************//
// DispIntf:  IItemDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {2913156B-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  IItemDisp = dispinterface
    ['{2913156B-2EED-1069-BF5D-00DD011186B7}']
    property DateTimeValue: IDateTime dispid 1610743808;
    property IsAuthors: WordBool dispid 1610743810;
    property IsEncrypted: WordBool dispid 1610743812;
    property IsNames: WordBool dispid 1610743814;
    property IsProtected: WordBool dispid 1610743816;
    property IsReaders: WordBool dispid 1610743818;
    property IsSigned: WordBool dispid 1610743820;
    property IsSummary: WordBool dispid 1610743822;
    property LastModified: OleVariant readonly dispid 1610743824;
    property Name: WideString readonly dispid 0;
    property Parent: IDocument readonly dispid 1610743826;
    property SaveToDisk: WordBool dispid 1610743827;
    property Text: WideString readonly dispid 1610743829;
    property type_: IT_TYPE readonly dispid 1610743830;
    property ValueLength: Integer readonly dispid 1610743831;
    property Values: OleVariant dispid 1610743832;
    function Abstract(lMaxlen: Integer; bDropvowels: WordBool; bUsedict: WordBool): WideString; dispid 1610743834;
    procedure AppendToTextList(Values: OleVariant); dispid 1610743835;
    function Contains(Value: OleVariant): WordBool; dispid 1610743836;
    function CopyItemToDocument(const pIDoc: IDocument; const pNewname: WideString): IItem2; dispid 1610743837;
    function GetMIMEEntity: IMIMEEntity; dispid 1610743838;
    procedure Remove; dispid 1610743839;
  end;

// *********************************************************************//
// Interface: IItem2
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {2913158A-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  IItem2 = interface(IItem)
    ['{2913158A-2EED-1069-BF5D-00DD011186B7}']
    procedure GhostMethod_IItem2_0_1; safecall;
    procedure GhostMethod_IItem2_4_2; safecall;
    procedure GhostMethod_IItem2_8_3; safecall;
    procedure GhostMethod_IItem2_12_4; safecall;
    procedure GhostMethod_IItem2_16_5; safecall;
    procedure GhostMethod_IItem2_20_6; safecall;
    procedure GhostMethod_IItem2_24_7; safecall;
    procedure GhostMethod_IItem2_28_8; safecall;
    procedure GhostMethod_IItem2_32_9; safecall;
    procedure GhostMethod_IItem2_36_10; safecall;
    procedure GhostMethod_IItem2_40_11; safecall;
    procedure GhostMethod_IItem2_44_12; safecall;
    procedure GhostMethod_IItem2_48_13; safecall;
    procedure GhostMethod_IItem2_52_14; safecall;
    procedure GhostMethod_IItem2_56_15; safecall;
    procedure GhostMethod_IItem2_60_16; safecall;
    procedure GhostMethod_IItem2_64_17; safecall;
    procedure GhostMethod_IItem2_68_18; safecall;
    procedure GhostMethod_IItem2_72_19; safecall;
    procedure GhostMethod_IItem2_76_20; safecall;
    procedure GhostMethod_IItem2_80_21; safecall;
    procedure GhostMethod_IItem2_84_22; safecall;
    procedure GhostMethod_IItem2_88_23; safecall;
    procedure GhostMethod_IItem2_92_24; safecall;
    procedure GhostMethod_IItem2_96_25; safecall;
    procedure GhostMethod_IItem2_100_26; safecall;
    procedure GhostMethod_IItem2_104_27; safecall;
    procedure GhostMethod_IItem2_108_28; safecall;
    procedure GhostMethod_IItem2_112_29; safecall;
    procedure GhostMethod_IItem2_116_30; safecall;
    procedure GhostMethod_IItem2_120_31; safecall;
    procedure GhostMethod_IItem2_124_32; safecall;
    procedure GhostMethod_IItem2_128_33; safecall;
    procedure GhostMethod_IItem2_132_34; safecall;
    procedure GhostMethod_IItem2_136_35; safecall;
    procedure GhostMethod_IItem2_140_36; safecall;
    procedure GhostMethod_IItem2_144_37; safecall;
    procedure GhostMethod_IItem2_148_38; safecall;
    procedure GhostMethod_IItem2_152_39; safecall;
    function GetValueCustomDataBytes(const pDatatypeName: WideString): OleVariant; safecall;
    function GetValueDateTimeArray: OleVariant; safecall;
    procedure SetValueCustomDataBytes(const pDatatypeName: WideString; CustomData: OleVariant); safecall;
  end;

// *********************************************************************//
// DispIntf:  IItem2Disp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {2913158A-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  IItem2Disp = dispinterface
    ['{2913158A-2EED-1069-BF5D-00DD011186B7}']
    procedure GhostMethod_IItem2_0_1; dispid 1610678272;
    procedure GhostMethod_IItem2_4_2; dispid 1610678273;
    procedure GhostMethod_IItem2_8_3; dispid 1610678274;
    procedure GhostMethod_IItem2_12_4; dispid 1610678275;
    procedure GhostMethod_IItem2_16_5; dispid 1610678276;
    procedure GhostMethod_IItem2_20_6; dispid 1610678277;
    procedure GhostMethod_IItem2_24_7; dispid 1610678278;
    procedure GhostMethod_IItem2_28_8; dispid 1610678279;
    procedure GhostMethod_IItem2_32_9; dispid 1610678280;
    procedure GhostMethod_IItem2_36_10; dispid 1610678281;
    procedure GhostMethod_IItem2_40_11; dispid 1610678282;
    procedure GhostMethod_IItem2_44_12; dispid 1610678283;
    procedure GhostMethod_IItem2_48_13; dispid 1610678284;
    procedure GhostMethod_IItem2_52_14; dispid 1610678285;
    procedure GhostMethod_IItem2_56_15; dispid 1610678286;
    procedure GhostMethod_IItem2_60_16; dispid 1610678287;
    procedure GhostMethod_IItem2_64_17; dispid 1610678288;
    procedure GhostMethod_IItem2_68_18; dispid 1610678289;
    procedure GhostMethod_IItem2_72_19; dispid 1610678290;
    procedure GhostMethod_IItem2_76_20; dispid 1610678291;
    procedure GhostMethod_IItem2_80_21; dispid 1610678292;
    procedure GhostMethod_IItem2_84_22; dispid 1610678293;
    procedure GhostMethod_IItem2_88_23; dispid 1610678294;
    procedure GhostMethod_IItem2_92_24; dispid 1610678295;
    procedure GhostMethod_IItem2_96_25; dispid 1610678296;
    procedure GhostMethod_IItem2_100_26; dispid 1610678297;
    procedure GhostMethod_IItem2_104_27; dispid 1610678298;
    procedure GhostMethod_IItem2_108_28; dispid 1610678299;
    procedure GhostMethod_IItem2_112_29; dispid 1610678300;
    procedure GhostMethod_IItem2_116_30; dispid 1610678301;
    procedure GhostMethod_IItem2_120_31; dispid 1610678302;
    procedure GhostMethod_IItem2_124_32; dispid 1610678303;
    procedure GhostMethod_IItem2_128_33; dispid 1610678304;
    procedure GhostMethod_IItem2_132_34; dispid 1610678305;
    procedure GhostMethod_IItem2_136_35; dispid 1610678306;
    procedure GhostMethod_IItem2_140_36; dispid 1610678307;
    procedure GhostMethod_IItem2_144_37; dispid 1610678308;
    procedure GhostMethod_IItem2_148_38; dispid 1610678309;
    procedure GhostMethod_IItem2_152_39; dispid 1610678310;
    function GetValueCustomDataBytes(const pDatatypeName: WideString): OleVariant; dispid 1610809344;
    function GetValueDateTimeArray: OleVariant; dispid 1610809345;
    procedure SetValueCustomDataBytes(const pDatatypeName: WideString; CustomData: OleVariant); dispid 1610809346;
    property DateTimeValue: IDateTime dispid 1610743808;
    property IsAuthors: WordBool dispid 1610743810;
    property IsEncrypted: WordBool dispid 1610743812;
    property IsNames: WordBool dispid 1610743814;
    property IsProtected: WordBool dispid 1610743816;
    property IsReaders: WordBool dispid 1610743818;
    property IsSigned: WordBool dispid 1610743820;
    property IsSummary: WordBool dispid 1610743822;
    property LastModified: OleVariant readonly dispid 1610743824;
    property Name: WideString readonly dispid 0;
    property Parent: IDocument readonly dispid 1610743826;
    property SaveToDisk: WordBool dispid 1610743827;
    property Text: WideString readonly dispid 1610743829;
    property type_: IT_TYPE readonly dispid 1610743830;
    property ValueLength: Integer readonly dispid 1610743831;
    property Values: OleVariant dispid 1610743832;
    function Abstract(lMaxlen: Integer; bDropvowels: WordBool; bUsedict: WordBool): WideString; dispid 1610743834;
    procedure AppendToTextList(Values: OleVariant); dispid 1610743835;
    function Contains(Value: OleVariant): WordBool; dispid 1610743836;
    function CopyItemToDocument(const pIDoc: IDocument; const pNewname: WideString): IItem2; dispid 1610743837;
    function GetMIMEEntity: IMIMEEntity; dispid 1610743838;
    procedure Remove; dispid 1610743839;
  end;

// *********************************************************************//
// Interface: IDateTime
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {29131564-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  IDateTime = interface(IDispatch)
    ['{29131564-2EED-1069-BF5D-00DD011186B7}']
    function Get_DateOnly: WideString; safecall;
    function Get_GMTTime: WideString; safecall;
    function Get_IsDST: WordBool; safecall;
    function Get_IsValidDate: WordBool; safecall;
    function Get_LocalTime: WideString; safecall;
    procedure Set_LocalTime(const ppTime: WideString); safecall;
    function Get_LSGMTTime: OleVariant; safecall;
    function Get_LSLocalTime: OleVariant; safecall;
    procedure Set_LSLocalTime(pTime: OleVariant); safecall;
    function Get_Parent: ISession; safecall;
    function Get_TimeOnly: WideString; safecall;
    function Get_TimeZone: Integer; safecall;
    function Get_ZoneTime: WideString; safecall;
    procedure AdjustDay(lAdjust: Integer; bPreserveLocalTime: WordBool); safecall;
    procedure AdjustHour(lAdjust: Integer; bPreserveLocalTime: WordBool); safecall;
    procedure AdjustMinute(lAdjust: Integer; bPreserveLocalTime: WordBool); safecall;
    procedure AdjustMonth(lAdjust: Integer; bPreserveLocalTime: WordBool); safecall;
    procedure AdjustSecond(lAdjust: Integer; bPreserveLocalTime: WordBool); safecall;
    procedure AdjustYear(lAdjust: Integer; bPreserveLocalTime: WordBool); safecall;
    procedure ConvertToZone(lNewzone: Integer; bDst: WordBool); safecall;
    procedure SetAnyDate; safecall;
    procedure SetAnyTime; safecall;
    procedure SetNow; safecall;
    function TimeDifference(const pIDt: IDateTime): Integer; safecall;
    function TimeDifferenceDouble(const pIDt: IDateTime): Double; safecall;
    property DateOnly: WideString read Get_DateOnly;
    property GMTTime: WideString read Get_GMTTime;
    property IsDST: WordBool read Get_IsDST;
    property IsValidDate: WordBool read Get_IsValidDate;
    property LocalTime: WideString read Get_LocalTime write Set_LocalTime;
    property LSGMTTime: OleVariant read Get_LSGMTTime;
    property LSLocalTime: OleVariant read Get_LSLocalTime write Set_LSLocalTime;
    property Parent: ISession read Get_Parent;
    property TimeOnly: WideString read Get_TimeOnly;
    property TimeZone: Integer read Get_TimeZone;
    property ZoneTime: WideString read Get_ZoneTime;
  end;

// *********************************************************************//
// DispIntf:  IDateTimeDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {29131564-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  IDateTimeDisp = dispinterface
    ['{29131564-2EED-1069-BF5D-00DD011186B7}']
    property DateOnly: WideString readonly dispid 1610743808;
    property GMTTime: WideString readonly dispid 1610743809;
    property IsDST: WordBool readonly dispid 1610743810;
    property IsValidDate: WordBool readonly dispid 1610743811;
    property LocalTime: WideString dispid 0;
    property LSGMTTime: OleVariant readonly dispid 1610743814;
    property LSLocalTime: OleVariant dispid 1610743815;
    property Parent: ISession readonly dispid 1610743817;
    property TimeOnly: WideString readonly dispid 1610743818;
    property TimeZone: Integer readonly dispid 1610743819;
    property ZoneTime: WideString readonly dispid 1610743820;
    procedure AdjustDay(lAdjust: Integer; bPreserveLocalTime: WordBool); dispid 1610743821;
    procedure AdjustHour(lAdjust: Integer; bPreserveLocalTime: WordBool); dispid 1610743822;
    procedure AdjustMinute(lAdjust: Integer; bPreserveLocalTime: WordBool); dispid 1610743823;
    procedure AdjustMonth(lAdjust: Integer; bPreserveLocalTime: WordBool); dispid 1610743824;
    procedure AdjustSecond(lAdjust: Integer; bPreserveLocalTime: WordBool); dispid 1610743825;
    procedure AdjustYear(lAdjust: Integer; bPreserveLocalTime: WordBool); dispid 1610743826;
    procedure ConvertToZone(lNewzone: Integer; bDst: WordBool); dispid 1610743827;
    procedure SetAnyDate; dispid 1610743828;
    procedure SetAnyTime; dispid 1610743829;
    procedure SetNow; dispid 1610743830;
    function TimeDifference(const pIDt: IDateTime): Integer; dispid 1610743831;
    function TimeDifferenceDouble(const pIDt: IDateTime): Double; dispid 1610743832;
  end;

// *********************************************************************//
// Interface: ISession
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {29131578-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  ISession = interface(IDispatch)
    ['{29131578-2EED-1069-BF5D-00DD011186B7}']
    function Get_AddressBooks: OleVariant; safecall;
    function Get_CommonUserName: WideString; safecall;
    function Get_CurrentAgent: IAgent; safecall;
    function Get_CurrentDatabase: IDatabase; safecall;
    function Get_DocumentContext: IDocument; safecall;
    function Get_EffectiveUserName: WideString; safecall;
    function Get_HttpURL: WideString; safecall;
    function Get_International: IInternational; safecall;
    procedure Set_ConvertMime(pbFlag: WordBool); safecall;
    function Get_ConvertMime: WordBool; safecall;
    function Get_IsOnServer: WordBool; safecall;
    function Get_LastExitStatus: Integer; safecall;
    function Get_LastRun: OleVariant; safecall;
    function Get_NotesBuildVersion: Integer; safecall;
    function Get_NotesURL: WideString; safecall;
    function Get_NotesVersion: WideString; safecall;
    function Get_Platform: WideString; safecall;
    function Get_SavedData: IDocument; safecall;
    function Get_ServerName: WideString; safecall;
    function Get_UserName: WideString; safecall;
    function Get_UserNameList: OleVariant; safecall;
    function Get_UserNameObject: IName; safecall;
    function Get_URLDatabase: IDatabase; safecall;
    function CreateDateRange: IDateRange; safecall;
    function CreateDateTime(const pDate: WideString): IDateTime; safecall;
    function CreateLog(const Name: WideString): ILog; safecall;
    function CreateName(const pName: WideString; const pLang: WideString): IName; safecall;
    function CreateNewsletter(const pIDc: IDocumentCollection): INewsletter; safecall;
    function CreateRegistration: IRegistration; safecall;
    function CreateRichTextParagraphStyle: IRichTextParagraphStyle; safecall;
    function CreateRichTextStyle: IRichTextStyle; safecall;
    function Evaluate(const pFormula: WideString; const pIDoc: IDocument): OleVariant; safecall;
    function FreeTimeSearch(const pIWindow: IDateRange; iDuration: SYSINT; Names: OleVariant; 
                            bFirstfit: WordBool): OleVariant; safecall;
    function GetDatabase(const pServer: WideString; const pFile: WideString; bCreateonfail: WordBool): IDatabase; safecall;
    function GetDbDirectory(const pServer: WideString): IDbDirectory; safecall;
    function GetEnvironmentString(const pName: WideString; bisSystem: WordBool): WideString; safecall;
    function GetEnvironmentValue(const pName: WideString; bisSystem: WordBool): OleVariant; safecall;
    procedure Initialize(const pPassword: WideString); safecall;
    procedure InitializeUsingNotesUserName(const pUser: WideString; const pPassword: WideString); safecall;
    procedure SetEnvironmentVar(const pName: WideString; Value: OleVariant; bisSystem: WordBool); safecall;
    procedure UpdateProcessedDoc(const pIDoc: IDocument); safecall;
    function Resolve(const pURL: WideString): IUnknown; safecall;
    function Get_UserGroupNameList: OleVariant; safecall;
    function CreateAdministrationProcess(const pServer: WideString): IAdministrationProcess; safecall;
    function CreateStream: INotesStream; safecall;
    function SendConsoleCommand(const pServer: WideString; const pCommand: WideString): WideString; safecall;
    function CreateColorObject: IColorObject; safecall;
    function CreateDXLExporter: IDXLExporter; safecall;
    function CreateDXLImporter: IDXLImporter; safecall;
    function GetUserPolicySettings(const pServer: WideString; const pName: WideString; 
                                   lType: SESS_POLICY; const pExplicitPolicy: WideString; 
                                   const pReserved: WideString): IDocument; safecall;
    function HashPassword(const pPassword: WideString): WideString; safecall;
    function VerifyPassword(const pPassword: WideString; const pHashedPassword: WideString): WordBool; safecall;
    function Get_OrgDirectoryPath: WideString; safecall;
    property AddressBooks: OleVariant read Get_AddressBooks;
    property CommonUserName: WideString read Get_CommonUserName;
    property CurrentAgent: IAgent read Get_CurrentAgent;
    property CurrentDatabase: IDatabase read Get_CurrentDatabase;
    property DocumentContext: IDocument read Get_DocumentContext;
    property EffectiveUserName: WideString read Get_EffectiveUserName;
    property HttpURL: WideString read Get_HttpURL;
    property International: IInternational read Get_International;
    property ConvertMime: WordBool read Get_ConvertMime write Set_ConvertMime;
    property IsOnServer: WordBool read Get_IsOnServer;
    property LastExitStatus: Integer read Get_LastExitStatus;
    property LastRun: OleVariant read Get_LastRun;
    property NotesBuildVersion: Integer read Get_NotesBuildVersion;
    property NotesURL: WideString read Get_NotesURL;
    property NotesVersion: WideString read Get_NotesVersion;
    property Platform: WideString read Get_Platform;
    property SavedData: IDocument read Get_SavedData;
    property ServerName: WideString read Get_ServerName;
    property UserName: WideString read Get_UserName;
    property UserNameList: OleVariant read Get_UserNameList;
    property UserNameObject: IName read Get_UserNameObject;
    property URLDatabase: IDatabase read Get_URLDatabase;
    property UserGroupNameList: OleVariant read Get_UserGroupNameList;
    property OrgDirectoryPath: WideString read Get_OrgDirectoryPath;
  end;

// *********************************************************************//
// DispIntf:  ISessionDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {29131578-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  ISessionDisp = dispinterface
    ['{29131578-2EED-1069-BF5D-00DD011186B7}']
    property AddressBooks: OleVariant readonly dispid 1610743808;
    property CommonUserName: WideString readonly dispid 1610743809;
    property CurrentAgent: IAgent readonly dispid 1610743810;
    property CurrentDatabase: IDatabase readonly dispid 1610743811;
    property DocumentContext: IDocument readonly dispid 1610743812;
    property EffectiveUserName: WideString readonly dispid 1610743813;
    property HttpURL: WideString readonly dispid 1610743814;
    property International: IInternational readonly dispid 1610743815;
    property ConvertMime: WordBool dispid 1610743816;
    property IsOnServer: WordBool readonly dispid 1610743818;
    property LastExitStatus: Integer readonly dispid 1610743819;
    property LastRun: OleVariant readonly dispid 1610743820;
    property NotesBuildVersion: Integer readonly dispid 1610743821;
    property NotesURL: WideString readonly dispid 1610743822;
    property NotesVersion: WideString readonly dispid 1610743823;
    property Platform: WideString readonly dispid 1610743824;
    property SavedData: IDocument readonly dispid 1610743825;
    property ServerName: WideString readonly dispid 1610743826;
    property UserName: WideString readonly dispid 0;
    property UserNameList: OleVariant readonly dispid 1610743828;
    property UserNameObject: IName readonly dispid 1610743829;
    property URLDatabase: IDatabase readonly dispid 1610743830;
    function CreateDateRange: IDateRange; dispid 1610743831;
    function CreateDateTime(const pDate: WideString): IDateTime; dispid 1610743832;
    function CreateLog(const Name: WideString): ILog; dispid 1610743833;
    function CreateName(const pName: WideString; const pLang: WideString): IName; dispid 1610743834;
    function CreateNewsletter(const pIDc: IDocumentCollection): INewsletter; dispid 1610743835;
    function CreateRegistration: IRegistration; dispid 1610743836;
    function CreateRichTextParagraphStyle: IRichTextParagraphStyle; dispid 1610743837;
    function CreateRichTextStyle: IRichTextStyle; dispid 1610743838;
    function Evaluate(const pFormula: WideString; const pIDoc: IDocument): OleVariant; dispid 1610743839;
    function FreeTimeSearch(const pIWindow: IDateRange; iDuration: SYSINT; Names: OleVariant; 
                            bFirstfit: WordBool): OleVariant; dispid 1610743840;
    function GetDatabase(const pServer: WideString; const pFile: WideString; bCreateonfail: WordBool): IDatabase; dispid 1610743841;
    function GetDbDirectory(const pServer: WideString): IDbDirectory; dispid 1610743842;
    function GetEnvironmentString(const pName: WideString; bisSystem: WordBool): WideString; dispid 1610743843;
    function GetEnvironmentValue(const pName: WideString; bisSystem: WordBool): OleVariant; dispid 1610743844;
    procedure Initialize(const pPassword: WideString); dispid 1610743845;
    procedure InitializeUsingNotesUserName(const pUser: WideString; const pPassword: WideString); dispid 1610743846;
    procedure SetEnvironmentVar(const pName: WideString; Value: OleVariant; bisSystem: WordBool); dispid 1610743847;
    procedure UpdateProcessedDoc(const pIDoc: IDocument); dispid 1610743848;
    function Resolve(const pURL: WideString): IUnknown; dispid 1610743849;
    property UserGroupNameList: OleVariant readonly dispid 1610743850;
    function CreateAdministrationProcess(const pServer: WideString): IAdministrationProcess; dispid 1610743851;
    function CreateStream: INotesStream; dispid 1610743852;
    function SendConsoleCommand(const pServer: WideString; const pCommand: WideString): WideString; dispid 1610743853;
    function CreateColorObject: IColorObject; dispid 1610743854;
    function CreateDXLExporter: IDXLExporter; dispid 1610743855;
    function CreateDXLImporter: IDXLImporter; dispid 1610743856;
    function GetUserPolicySettings(const pServer: WideString; const pName: WideString; 
                                   lType: SESS_POLICY; const pExplicitPolicy: WideString; 
                                   const pReserved: WideString): IDocument; dispid 1610743857;
    function HashPassword(const pPassword: WideString): WideString; dispid 1610743858;
    function VerifyPassword(const pPassword: WideString; const pHashedPassword: WideString): WordBool; dispid 1610743859;
    property OrgDirectoryPath: WideString readonly dispid 1610743860;
  end;

// *********************************************************************//
// Interface: IAgent
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {29131562-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  IAgent = interface(IDispatch)
    ['{29131562-2EED-1069-BF5D-00DD011186B7}']
    function Get_Comment: WideString; safecall;
    function Get_CommonOwner: WideString; safecall;
    function Get_HasRunSinceModified: WordBool; safecall;
    function Get_HttpURL: WideString; safecall;
    function Get_IsEnabled: WordBool; safecall;
    procedure Set_IsEnabled(pbFlag: WordBool); safecall;
    function Get_IsNotesAgent: WordBool; safecall;
    function Get_IsPublic: WordBool; safecall;
    function Get_IsWebAgent: WordBool; safecall;
    function Get_LastRun: OleVariant; safecall;
    function Get_Name: WideString; safecall;
    function Get_NotesURL: WideString; safecall;
    function Get_Owner: WideString; safecall;
    function Get_ParameterDocID: WideString; safecall;
    function Get_Parent: IDatabase; safecall;
    function Get_Query: WideString; safecall;
    function Get_ServerName: WideString; safecall;
    procedure Set_ServerName(const ppName: WideString); safecall;
    function Get_Target: AG_TARGET; safecall;
    function Get_Trigger: AG_TRIGGER; safecall;
    procedure Remove; safecall;
    procedure Run(const pNoteid: WideString); safecall;
    procedure RunOnServer(const pNoteid: WideString); safecall;
    procedure Save; safecall;
    function Get_OnBehalfOf: WideString; safecall;
    function Lock(var pName: OleVariant; bProvisionalOK: WordBool): WordBool; safecall;
    function LockProvisional(var pName: OleVariant): WordBool; safecall;
    procedure Unlock; safecall;
    function Get_LockHolders: OleVariant; safecall;
    function Get_IsActivatable: WordBool; safecall;
    property Comment: WideString read Get_Comment;
    property CommonOwner: WideString read Get_CommonOwner;
    property HasRunSinceModified: WordBool read Get_HasRunSinceModified;
    property HttpURL: WideString read Get_HttpURL;
    property IsEnabled: WordBool read Get_IsEnabled write Set_IsEnabled;
    property IsNotesAgent: WordBool read Get_IsNotesAgent;
    property IsPublic: WordBool read Get_IsPublic;
    property IsWebAgent: WordBool read Get_IsWebAgent;
    property LastRun: OleVariant read Get_LastRun;
    property Name: WideString read Get_Name;
    property NotesURL: WideString read Get_NotesURL;
    property Owner: WideString read Get_Owner;
    property ParameterDocID: WideString read Get_ParameterDocID;
    property Parent: IDatabase read Get_Parent;
    property Query: WideString read Get_Query;
    property ServerName: WideString read Get_ServerName write Set_ServerName;
    property Target: AG_TARGET read Get_Target;
    property Trigger: AG_TRIGGER read Get_Trigger;
    property OnBehalfOf: WideString read Get_OnBehalfOf;
    property LockHolders: OleVariant read Get_LockHolders;
    property IsActivatable: WordBool read Get_IsActivatable;
  end;

// *********************************************************************//
// DispIntf:  IAgentDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {29131562-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  IAgentDisp = dispinterface
    ['{29131562-2EED-1069-BF5D-00DD011186B7}']
    property Comment: WideString readonly dispid 1610743808;
    property CommonOwner: WideString readonly dispid 1610743809;
    property HasRunSinceModified: WordBool readonly dispid 1610743810;
    property HttpURL: WideString readonly dispid 1610743811;
    property IsEnabled: WordBool dispid 1610743812;
    property IsNotesAgent: WordBool readonly dispid 1610743814;
    property IsPublic: WordBool readonly dispid 1610743815;
    property IsWebAgent: WordBool readonly dispid 1610743816;
    property LastRun: OleVariant readonly dispid 1610743817;
    property Name: WideString readonly dispid 0;
    property NotesURL: WideString readonly dispid 1610743819;
    property Owner: WideString readonly dispid 1610743820;
    property ParameterDocID: WideString readonly dispid 1610743821;
    property Parent: IDatabase readonly dispid 1610743822;
    property Query: WideString readonly dispid 1610743823;
    property ServerName: WideString dispid 1610743824;
    property Target: AG_TARGET readonly dispid 1610743826;
    property Trigger: AG_TRIGGER readonly dispid 1610743827;
    procedure Remove; dispid 1610743828;
    procedure Run(const pNoteid: WideString); dispid 1610743829;
    procedure RunOnServer(const pNoteid: WideString); dispid 1610743830;
    procedure Save; dispid 1610743831;
    property OnBehalfOf: WideString readonly dispid 1610743832;
    function Lock(var pName: OleVariant; bProvisionalOK: WordBool): WordBool; dispid 1610743833;
    function LockProvisional(var pName: OleVariant): WordBool; dispid 1610743834;
    procedure Unlock; dispid 1610743835;
    property LockHolders: OleVariant readonly dispid 1610743836;
    property IsActivatable: WordBool readonly dispid 1610743837;
  end;

// *********************************************************************//
// Interface: IInternational
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {2913156C-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  IInternational = interface(IDispatch)
    ['{2913156C-2EED-1069-BF5D-00DD011186B7}']
    function Get_AMString: WideString; safecall;
    function Get_CurrencyDigits: Integer; safecall;
    function Get_CurrencySymbol: WideString; safecall;
    function Get_DateSep: WideString; safecall;
    function Get_DecimalSep: WideString; safecall;
    function Get_IsCurrencySpace: WordBool; safecall;
    function Get_IsCurrencySuffix: WordBool; safecall;
    function Get_IsCurrencyZero: WordBool; safecall;
    function Get_IsDateDMY: WordBool; safecall;
    function Get_IsDateMDY: WordBool; safecall;
    function Get_IsDateYMD: WordBool; safecall;
    function Get_IsDST: WordBool; safecall;
    function Get_IsTime24Hour: WordBool; safecall;
    function Get_Parent: ISession; safecall;
    function Get_PMString: WideString; safecall;
    function Get_ThousandsSep: WideString; safecall;
    function Get_TimeSep: WideString; safecall;
    function Get_TimeZone: Integer; safecall;
    function Get_Today: WideString; safecall;
    function Get_Tomorrow: WideString; safecall;
    function Get_Yesterday: WideString; safecall;
    property AMString: WideString read Get_AMString;
    property CurrencyDigits: Integer read Get_CurrencyDigits;
    property CurrencySymbol: WideString read Get_CurrencySymbol;
    property DateSep: WideString read Get_DateSep;
    property DecimalSep: WideString read Get_DecimalSep;
    property IsCurrencySpace: WordBool read Get_IsCurrencySpace;
    property IsCurrencySuffix: WordBool read Get_IsCurrencySuffix;
    property IsCurrencyZero: WordBool read Get_IsCurrencyZero;
    property IsDateDMY: WordBool read Get_IsDateDMY;
    property IsDateMDY: WordBool read Get_IsDateMDY;
    property IsDateYMD: WordBool read Get_IsDateYMD;
    property IsDST: WordBool read Get_IsDST;
    property IsTime24Hour: WordBool read Get_IsTime24Hour;
    property Parent: ISession read Get_Parent;
    property PMString: WideString read Get_PMString;
    property ThousandsSep: WideString read Get_ThousandsSep;
    property TimeSep: WideString read Get_TimeSep;
    property TimeZone: Integer read Get_TimeZone;
    property Today: WideString read Get_Today;
    property Tomorrow: WideString read Get_Tomorrow;
    property Yesterday: WideString read Get_Yesterday;
  end;

// *********************************************************************//
// DispIntf:  IInternationalDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {2913156C-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  IInternationalDisp = dispinterface
    ['{2913156C-2EED-1069-BF5D-00DD011186B7}']
    property AMString: WideString readonly dispid 1610743808;
    property CurrencyDigits: Integer readonly dispid 1610743809;
    property CurrencySymbol: WideString readonly dispid 1610743810;
    property DateSep: WideString readonly dispid 1610743811;
    property DecimalSep: WideString readonly dispid 1610743812;
    property IsCurrencySpace: WordBool readonly dispid 1610743813;
    property IsCurrencySuffix: WordBool readonly dispid 1610743814;
    property IsCurrencyZero: WordBool readonly dispid 1610743815;
    property IsDateDMY: WordBool readonly dispid 1610743816;
    property IsDateMDY: WordBool readonly dispid 1610743817;
    property IsDateYMD: WordBool readonly dispid 1610743818;
    property IsDST: WordBool readonly dispid 1610743819;
    property IsTime24Hour: WordBool readonly dispid 1610743820;
    property Parent: ISession readonly dispid 1610743821;
    property PMString: WideString readonly dispid 1610743822;
    property ThousandsSep: WideString readonly dispid 1610743823;
    property TimeSep: WideString readonly dispid 1610743824;
    property TimeZone: Integer readonly dispid 1610743825;
    property Today: WideString readonly dispid 1610743826;
    property Tomorrow: WideString readonly dispid 1610743827;
    property Yesterday: WideString readonly dispid 1610743828;
  end;

// *********************************************************************//
// Interface: IName
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {2913156E-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  IName = interface(IDispatch)
    ['{2913156E-2EED-1069-BF5D-00DD011186B7}']
    function Get_Abbreviated: WideString; safecall;
    function Get_Addr821: WideString; safecall;
    function Get_Addr822Comment1: WideString; safecall;
    function Get_Addr822Comment2: WideString; safecall;
    function Get_Addr822Comment3: WideString; safecall;
    function Get_Addr822LocalPart: WideString; safecall;
    function Get_Addr822Phrase: WideString; safecall;
    function Get_ADMD: WideString; safecall;
    function Get_Canonical: WideString; safecall;
    function Get_Common: WideString; safecall;
    function Get_Country: WideString; safecall;
    function Get_Generation: WideString; safecall;
    function Get_Given: WideString; safecall;
    function Get_Initials: WideString; safecall;
    function Get_IsHierarchical: WordBool; safecall;
    function Get_Keyword: WideString; safecall;
    function Get_Language: WideString; safecall;
    function Get_Organization: WideString; safecall;
    function Get_OrgUnit1: WideString; safecall;
    function Get_OrgUnit2: WideString; safecall;
    function Get_OrgUnit3: WideString; safecall;
    function Get_OrgUnit4: WideString; safecall;
    function Get_Parent: ISession; safecall;
    function Get_PRMD: WideString; safecall;
    function Get_Surname: WideString; safecall;
    property Abbreviated: WideString read Get_Abbreviated;
    property Addr821: WideString read Get_Addr821;
    property Addr822Comment1: WideString read Get_Addr822Comment1;
    property Addr822Comment2: WideString read Get_Addr822Comment2;
    property Addr822Comment3: WideString read Get_Addr822Comment3;
    property Addr822LocalPart: WideString read Get_Addr822LocalPart;
    property Addr822Phrase: WideString read Get_Addr822Phrase;
    property ADMD: WideString read Get_ADMD;
    property Canonical: WideString read Get_Canonical;
    property Common: WideString read Get_Common;
    property Country: WideString read Get_Country;
    property Generation: WideString read Get_Generation;
    property Given: WideString read Get_Given;
    property Initials: WideString read Get_Initials;
    property IsHierarchical: WordBool read Get_IsHierarchical;
    property Keyword: WideString read Get_Keyword;
    property Language: WideString read Get_Language;
    property Organization: WideString read Get_Organization;
    property OrgUnit1: WideString read Get_OrgUnit1;
    property OrgUnit2: WideString read Get_OrgUnit2;
    property OrgUnit3: WideString read Get_OrgUnit3;
    property OrgUnit4: WideString read Get_OrgUnit4;
    property Parent: ISession read Get_Parent;
    property PRMD: WideString read Get_PRMD;
    property Surname: WideString read Get_Surname;
  end;

// *********************************************************************//
// DispIntf:  INameDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {2913156E-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  INameDisp = dispinterface
    ['{2913156E-2EED-1069-BF5D-00DD011186B7}']
    property Abbreviated: WideString readonly dispid 1610743808;
    property Addr821: WideString readonly dispid 1610743809;
    property Addr822Comment1: WideString readonly dispid 1610743810;
    property Addr822Comment2: WideString readonly dispid 1610743811;
    property Addr822Comment3: WideString readonly dispid 1610743812;
    property Addr822LocalPart: WideString readonly dispid 1610743813;
    property Addr822Phrase: WideString readonly dispid 1610743814;
    property ADMD: WideString readonly dispid 1610743815;
    property Canonical: WideString readonly dispid 0;
    property Common: WideString readonly dispid 1610743817;
    property Country: WideString readonly dispid 1610743818;
    property Generation: WideString readonly dispid 1610743819;
    property Given: WideString readonly dispid 1610743820;
    property Initials: WideString readonly dispid 1610743821;
    property IsHierarchical: WordBool readonly dispid 1610743822;
    property Keyword: WideString readonly dispid 1610743823;
    property Language: WideString readonly dispid 1610743824;
    property Organization: WideString readonly dispid 1610743825;
    property OrgUnit1: WideString readonly dispid 1610743826;
    property OrgUnit2: WideString readonly dispid 1610743827;
    property OrgUnit3: WideString readonly dispid 1610743828;
    property OrgUnit4: WideString readonly dispid 1610743829;
    property Parent: ISession readonly dispid 1610743830;
    property PRMD: WideString readonly dispid 1610743831;
    property Surname: WideString readonly dispid 1610743832;
  end;

// *********************************************************************//
// Interface: IDateRange
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {29131565-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  IDateRange = interface(IDispatch)
    ['{29131565-2EED-1069-BF5D-00DD011186B7}']
    function Get_EndDateTime: IDateTime; safecall;
    procedure Set_EndDateTime(const ppITime: IDateTime); safecall;
    function Get_Parent: ISession; safecall;
    function Get_StartDateTime: IDateTime; safecall;
    procedure Set_StartDateTime(const ppITime: IDateTime); safecall;
    function Get_Text: WideString; safecall;
    procedure Set_Text(const ppRange: WideString); safecall;
    property EndDateTime: IDateTime read Get_EndDateTime write Set_EndDateTime;
    property Parent: ISession read Get_Parent;
    property StartDateTime: IDateTime read Get_StartDateTime write Set_StartDateTime;
    property Text: WideString read Get_Text write Set_Text;
  end;

// *********************************************************************//
// DispIntf:  IDateRangeDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {29131565-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  IDateRangeDisp = dispinterface
    ['{29131565-2EED-1069-BF5D-00DD011186B7}']
    property EndDateTime: IDateTime dispid 1610743808;
    property Parent: ISession readonly dispid 1610743810;
    property StartDateTime: IDateTime dispid 1610743811;
    property Text: WideString dispid 0;
  end;

// *********************************************************************//
// Interface: ILog
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {2913156D-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  ILog = interface(IDispatch)
    ['{2913156D-2EED-1069-BF5D-00DD011186B7}']
    function Get_LogActions: WordBool; safecall;
    procedure Set_LogActions(pbFlag: WordBool); safecall;
    function Get_LogErrors: WordBool; safecall;
    procedure Set_LogErrors(pbFlag: WordBool); safecall;
    function Get_NumActions: Integer; safecall;
    function Get_NumErrors: Integer; safecall;
    function Get_OverwriteFile: WordBool; safecall;
    procedure Set_OverwriteFile(pbFlag: WordBool); safecall;
    function Get_ProgramName: WideString; safecall;
    procedure Set_ProgramName(const ppName: WideString); safecall;
    function Get_Parent: ISession; safecall;
    procedure Close; safecall;
    procedure LogAction(const pAction: WideString); safecall;
    procedure LogError(lCode: Integer; const pText: WideString); safecall;
    procedure LogEvent(const pText: WideString; const pQueue: WideString; lEvent: LOG_EVENTS; 
                       lSeverity: LOG_SEVERITY); safecall;
    procedure OpenAgentLog; safecall;
    procedure OpenFileLog(const pFilepath: WideString); safecall;
    procedure OpenMailLog(Recipients: OleVariant; const pSubject: WideString); safecall;
    procedure OpenNotesLog(const pServer: WideString; const pDatabase: WideString); safecall;
    property LogActions: WordBool read Get_LogActions write Set_LogActions;
    property LogErrors: WordBool read Get_LogErrors write Set_LogErrors;
    property NumActions: Integer read Get_NumActions;
    property NumErrors: Integer read Get_NumErrors;
    property OverwriteFile: WordBool read Get_OverwriteFile write Set_OverwriteFile;
    property ProgramName: WideString read Get_ProgramName write Set_ProgramName;
    property Parent: ISession read Get_Parent;
  end;

// *********************************************************************//
// DispIntf:  ILogDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {2913156D-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  ILogDisp = dispinterface
    ['{2913156D-2EED-1069-BF5D-00DD011186B7}']
    property LogActions: WordBool dispid 1610743808;
    property LogErrors: WordBool dispid 1610743810;
    property NumActions: Integer readonly dispid 1610743812;
    property NumErrors: Integer readonly dispid 1610743813;
    property OverwriteFile: WordBool dispid 1610743814;
    property ProgramName: WideString dispid 0;
    property Parent: ISession readonly dispid 1610743818;
    procedure Close; dispid 1610743819;
    procedure LogAction(const pAction: WideString); dispid 1610743820;
    procedure LogError(lCode: Integer; const pText: WideString); dispid 1610743821;
    procedure LogEvent(const pText: WideString; const pQueue: WideString; lEvent: LOG_EVENTS; 
                       lSeverity: LOG_SEVERITY); dispid 1610743822;
    procedure OpenAgentLog; dispid 1610743823;
    procedure OpenFileLog(const pFilepath: WideString); dispid 1610743824;
    procedure OpenMailLog(Recipients: OleVariant; const pSubject: WideString); dispid 1610743825;
    procedure OpenNotesLog(const pServer: WideString; const pDatabase: WideString); dispid 1610743826;
  end;

// *********************************************************************//
// Interface: INewsletter
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {2913156F-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  INewsletter = interface(IDispatch)
    ['{2913156F-2EED-1069-BF5D-00DD011186B7}']
    function Get_DoScore: WordBool; safecall;
    procedure Set_DoScore(pbFlag: WordBool); safecall;
    function Get_DoSubject: WordBool; safecall;
    procedure Set_DoSubject(pbFlag: WordBool); safecall;
    function Get_Parent: ISession; safecall;
    function Get_SubjectItemName: WideString; safecall;
    procedure Set_SubjectItemName(const ppName: WideString); safecall;
    function FormatDocument(const pIDb: IDatabase; lIndex: Integer): IDocument; safecall;
    function FormatMsgWithDoclinks(const pIDb: IDatabase): IDocument; safecall;
    property DoScore: WordBool read Get_DoScore write Set_DoScore;
    property DoSubject: WordBool read Get_DoSubject write Set_DoSubject;
    property Parent: ISession read Get_Parent;
    property SubjectItemName: WideString read Get_SubjectItemName write Set_SubjectItemName;
  end;

// *********************************************************************//
// DispIntf:  INewsletterDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {2913156F-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  INewsletterDisp = dispinterface
    ['{2913156F-2EED-1069-BF5D-00DD011186B7}']
    property DoScore: WordBool dispid 1610743808;
    property DoSubject: WordBool dispid 1610743810;
    property Parent: ISession readonly dispid 1610743812;
    property SubjectItemName: WideString dispid 1610743813;
    function FormatDocument(const pIDb: IDatabase; lIndex: Integer): IDocument; dispid 1610743815;
    function FormatMsgWithDoclinks(const pIDb: IDatabase): IDocument; dispid 1610743816;
  end;

// *********************************************************************//
// Interface: IRegistration
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {29131572-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  IRegistration = interface(IDispatch)
    ['{29131572-2EED-1069-BF5D-00DD011186B7}']
    function Get_CertifierIDFile: WideString; safecall;
    procedure Set_CertifierIDFile(const ppFile: WideString); safecall;
    function Get_CreateMailDb: WordBool; safecall;
    procedure Set_CreateMailDb(pbFlag: WordBool); safecall;
    function Get_Expiration: OleVariant; safecall;
    procedure Set_Expiration(pDate: OleVariant); safecall;
    function Get_IDType: REG_TYPE; safecall;
    procedure Set_IDType(plType: REG_TYPE); safecall;
    function Get_IsNorthAmerican: WordBool; safecall;
    procedure Set_IsNorthAmerican(pbFlag: WordBool); safecall;
    function Get_MinPasswordLength: Integer; safecall;
    procedure Set_MinPasswordLength(plLen: Integer); safecall;
    function Get_OrgUnit: WideString; safecall;
    procedure Set_OrgUnit(const ppUnit: WideString); safecall;
    function Get_RegistrationLog: WideString; safecall;
    procedure Set_RegistrationLog(const ppLog: WideString); safecall;
    function Get_RegistrationServer: WideString; safecall;
    procedure Set_RegistrationServer(const ppServer: WideString); safecall;
    function Get_StoreIDInAddressBook: WordBool; safecall;
    procedure Set_StoreIDInAddressBook(pbFlag: WordBool); safecall;
    function Get_UpdateAddressBook: WordBool; safecall;
    procedure Set_UpdateAddressBook(pbFlag: WordBool); safecall;
    procedure AddCertifierToAddressBook(const pIdfile: WideString; const pPassword: WideString; 
                                        const pLocation: WideString; const pComment: WideString); safecall;
    procedure AddServerToAddressBook(const pIdfile: WideString; const pServer: WideString; 
                                     const pDomain: WideString; const pUserpw: WideString; 
                                     const pNetwork: WideString; const pAdminname: WideString; 
                                     const pTitle: WideString; const pLocation: WideString; 
                                     const pComment: WideString); safecall;
    procedure AddUserProfile(const pUsername: WideString; const pProfile: WideString); safecall;
    procedure AddUserToAddressBook(const pIdfile: WideString; const pFullname: WideString; 
                                   const pLastn: WideString; const pUserpw: WideString; 
                                   const pFirstn: WideString; const pMiddle: WideString; 
                                   const pMailserv: WideString; const pMailfilepath: WideString; 
                                   const pFwdaddr: WideString; const pLocation: WideString; 
                                   const pComment: WideString); safecall;
    procedure CrossCertify(const pIdfile: WideString; const pCertpw: WideString; 
                           const pComment: WideString); safecall;
    procedure DeleteIDOnServer(const pUsername: WideString; bIsserverid: WordBool); safecall;
    procedure GetIDFromServer(const pUsername: WideString; const pFilepath: WideString; 
                              bIsserverid: WordBool); safecall;
    procedure GetUserInfo(const pUsername: WideString; out ppMailserver: WideString; 
                          out ppMailfile: WideString; out ppMaildomain: WideString; 
                          out pMailsystem: Integer; out pProfile: OleVariant); safecall;
    procedure Recertify(const pIdfile: WideString; const pCertpw: WideString; 
                        const pComment: WideString); safecall;
    procedure RegisterNewCertifier(const pOrg: WideString; const pIdfile: WideString; 
                                   const pCertpw: WideString; const pCountry: WideString); safecall;
    procedure RegisterNewServer(const pServer: WideString; const pIdfile: WideString; 
                                const pDomain: WideString; const pServerpw: WideString; 
                                const pCertpw: WideString; const pLocation: WideString; 
                                const pComment: WideString; const pNetwork: WideString; 
                                const pAdminname: WideString; const pTitle: WideString); safecall;
    procedure RegisterNewUser(const pLastn: WideString; const pIdfile: WideString; 
                              const pServer: WideString; const pFirstn: WideString; 
                              const pMiddle: WideString; const pCertpw: WideString; 
                              const pLocation: WideString; const pComment: WideString; 
                              const pMaildbpath: WideString; const pForward: WideString; 
                              const pUserpw: WideString; const pAltName: WideString; 
                              const pAltLang: WideString; type_: USER_TYPE); safecall;
    function SwitchToID(const pIdfile: WideString; const pUserpw: WideString): WideString; safecall;
    function Get_CertifierName: WideString; safecall;
    procedure Set_CertifierName(const ppCertName: WideString); safecall;
    function Get_MailACLManager: WideString; safecall;
    procedure Set_MailACLManager(const ppMailACLManager: WideString); safecall;
    function Get_MailInternetAddress: WideString; safecall;
    procedure Set_MailInternetAddress(const ppMailInternetAddress: WideString); safecall;
    function Get_MailTemplateName: WideString; safecall;
    procedure Set_MailTemplateName(const ppMailTemplateName: WideString); safecall;
    function Get_PolicyName: WideString; safecall;
    procedure Set_PolicyName(const ppPolicyName: WideString); safecall;
    function Get_RoamingServer: WideString; safecall;
    procedure Set_RoamingServer(const ppRoamingServer: WideString); safecall;
    function Get_RoamingSubdir: WideString; safecall;
    procedure Set_RoamingSubdir(const ppRoamingSubdir: WideString); safecall;
    function Get_ShortName: WideString; safecall;
    procedure Set_ShortName(const ppShortName: WideString); safecall;
    function Get_EnforceUniqueShortName: WordBool; safecall;
    procedure Set_EnforceUniqueShortName(pbEnforceUniqueShortName: WordBool); safecall;
    function Get_IsRoamingUser: WordBool; safecall;
    procedure Set_IsRoamingUser(pbIsRoamingUser: WordBool); safecall;
    function Get_MailCreateFTIndex: WordBool; safecall;
    procedure Set_MailCreateFTIndex(pbMailCreateFTIndex: WordBool); safecall;
    function Get_NoIDFile: WordBool; safecall;
    procedure Set_NoIDFile(pbNoIDFile: WordBool); safecall;
    function Get_StoreIDInMailfile: WordBool; safecall;
    procedure Set_StoreIDInMailfile(pbStoreIDInMailfile: WordBool); safecall;
    function Get_SynchInternetPassword: WordBool; safecall;
    procedure Set_SynchInternetPassword(pbSynchInternetPassword: WordBool); safecall;
    function Get_UseCertificateAuthority: WordBool; safecall;
    procedure Set_UseCertificateAuthority(pbUseCertificateAuthority: WordBool); safecall;
    function Get_MailOwnerAccess: REG_MAILOWNACL; safecall;
    procedure Set_MailOwnerAccess(plMailOwnerAccess: REG_MAILOWNACL); safecall;
    function Get_MailSystem: REG_MAILTYPE; safecall;
    procedure Set_MailSystem(plMailSystem: REG_MAILTYPE); safecall;
    function Get_RoamingCleanupSetting: REG_ROAMCLEANUP; safecall;
    procedure Set_RoamingCleanupSetting(plRoamingCleanupSetting: REG_ROAMCLEANUP); safecall;
    function Get_MailQuotaSizeLimit: Integer; safecall;
    procedure Set_MailQuotaSizeLimit(plMailQuotaSizeLimit: Integer); safecall;
    function Get_MailQuotaWarningThreshold: Integer; safecall;
    procedure Set_MailQuotaWarningThreshold(plMailQuotaWarningThreshold: Integer); safecall;
    function Get_RoamingCleanupPeriod: Integer; safecall;
    procedure Set_RoamingCleanupPeriod(plRoamingCleanupPeriod: Integer); safecall;
    function Get_GroupList: OleVariant; safecall;
    procedure Set_GroupList(pGroupList: OleVariant); safecall;
    function Get_MailReplicaServers: OleVariant; safecall;
    procedure Set_MailReplicaServers(pMailReplicaServers: OleVariant); safecall;
    function Get_AltOrgUnit: OleVariant; safecall;
    procedure Set_AltOrgUnit(pAltOrgUnit: OleVariant); safecall;
    function Get_AltOrgUnitLang: OleVariant; safecall;
    procedure Set_AltOrgUnitLang(pAltOrgUnitLang: OleVariant); safecall;
    property CertifierIDFile: WideString read Get_CertifierIDFile write Set_CertifierIDFile;
    property CreateMailDb: WordBool read Get_CreateMailDb write Set_CreateMailDb;
    property Expiration: OleVariant read Get_Expiration write Set_Expiration;
    property IDType: REG_TYPE read Get_IDType write Set_IDType;
    property IsNorthAmerican: WordBool read Get_IsNorthAmerican write Set_IsNorthAmerican;
    property MinPasswordLength: Integer read Get_MinPasswordLength write Set_MinPasswordLength;
    property OrgUnit: WideString read Get_OrgUnit write Set_OrgUnit;
    property RegistrationLog: WideString read Get_RegistrationLog write Set_RegistrationLog;
    property RegistrationServer: WideString read Get_RegistrationServer write Set_RegistrationServer;
    property StoreIDInAddressBook: WordBool read Get_StoreIDInAddressBook write Set_StoreIDInAddressBook;
    property UpdateAddressBook: WordBool read Get_UpdateAddressBook write Set_UpdateAddressBook;
    property CertifierName: WideString read Get_CertifierName write Set_CertifierName;
    property MailACLManager: WideString read Get_MailACLManager write Set_MailACLManager;
    property MailInternetAddress: WideString read Get_MailInternetAddress write Set_MailInternetAddress;
    property MailTemplateName: WideString read Get_MailTemplateName write Set_MailTemplateName;
    property PolicyName: WideString read Get_PolicyName write Set_PolicyName;
    property RoamingServer: WideString read Get_RoamingServer write Set_RoamingServer;
    property RoamingSubdir: WideString read Get_RoamingSubdir write Set_RoamingSubdir;
    property ShortName: WideString read Get_ShortName write Set_ShortName;
    property EnforceUniqueShortName: WordBool read Get_EnforceUniqueShortName write Set_EnforceUniqueShortName;
    property IsRoamingUser: WordBool read Get_IsRoamingUser write Set_IsRoamingUser;
    property MailCreateFTIndex: WordBool read Get_MailCreateFTIndex write Set_MailCreateFTIndex;
    property NoIDFile: WordBool read Get_NoIDFile write Set_NoIDFile;
    property StoreIDInMailfile: WordBool read Get_StoreIDInMailfile write Set_StoreIDInMailfile;
    property SynchInternetPassword: WordBool read Get_SynchInternetPassword write Set_SynchInternetPassword;
    property UseCertificateAuthority: WordBool read Get_UseCertificateAuthority write Set_UseCertificateAuthority;
    property MailOwnerAccess: REG_MAILOWNACL read Get_MailOwnerAccess write Set_MailOwnerAccess;
    property MailSystem: REG_MAILTYPE read Get_MailSystem write Set_MailSystem;
    property RoamingCleanupSetting: REG_ROAMCLEANUP read Get_RoamingCleanupSetting write Set_RoamingCleanupSetting;
    property MailQuotaSizeLimit: Integer read Get_MailQuotaSizeLimit write Set_MailQuotaSizeLimit;
    property MailQuotaWarningThreshold: Integer read Get_MailQuotaWarningThreshold write Set_MailQuotaWarningThreshold;
    property RoamingCleanupPeriod: Integer read Get_RoamingCleanupPeriod write Set_RoamingCleanupPeriod;
    property GroupList: OleVariant read Get_GroupList write Set_GroupList;
    property MailReplicaServers: OleVariant read Get_MailReplicaServers write Set_MailReplicaServers;
    property AltOrgUnit: OleVariant read Get_AltOrgUnit write Set_AltOrgUnit;
    property AltOrgUnitLang: OleVariant read Get_AltOrgUnitLang write Set_AltOrgUnitLang;
  end;

// *********************************************************************//
// DispIntf:  IRegistrationDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {29131572-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  IRegistrationDisp = dispinterface
    ['{29131572-2EED-1069-BF5D-00DD011186B7}']
    property CertifierIDFile: WideString dispid 1610743808;
    property CreateMailDb: WordBool dispid 1610743810;
    property Expiration: OleVariant dispid 1610743812;
    property IDType: REG_TYPE dispid 1610743814;
    property IsNorthAmerican: WordBool dispid 1610743816;
    property MinPasswordLength: Integer dispid 1610743818;
    property OrgUnit: WideString dispid 1610743820;
    property RegistrationLog: WideString dispid 1610743822;
    property RegistrationServer: WideString dispid 1610743824;
    property StoreIDInAddressBook: WordBool dispid 1610743826;
    property UpdateAddressBook: WordBool dispid 1610743828;
    procedure AddCertifierToAddressBook(const pIdfile: WideString; const pPassword: WideString; 
                                        const pLocation: WideString; const pComment: WideString); dispid 1610743830;
    procedure AddServerToAddressBook(const pIdfile: WideString; const pServer: WideString; 
                                     const pDomain: WideString; const pUserpw: WideString; 
                                     const pNetwork: WideString; const pAdminname: WideString; 
                                     const pTitle: WideString; const pLocation: WideString; 
                                     const pComment: WideString); dispid 1610743831;
    procedure AddUserProfile(const pUsername: WideString; const pProfile: WideString); dispid 1610743832;
    procedure AddUserToAddressBook(const pIdfile: WideString; const pFullname: WideString; 
                                   const pLastn: WideString; const pUserpw: WideString; 
                                   const pFirstn: WideString; const pMiddle: WideString; 
                                   const pMailserv: WideString; const pMailfilepath: WideString; 
                                   const pFwdaddr: WideString; const pLocation: WideString; 
                                   const pComment: WideString); dispid 1610743833;
    procedure CrossCertify(const pIdfile: WideString; const pCertpw: WideString; 
                           const pComment: WideString); dispid 1610743834;
    procedure DeleteIDOnServer(const pUsername: WideString; bIsserverid: WordBool); dispid 1610743835;
    procedure GetIDFromServer(const pUsername: WideString; const pFilepath: WideString; 
                              bIsserverid: WordBool); dispid 1610743836;
    procedure GetUserInfo(const pUsername: WideString; out ppMailserver: WideString; 
                          out ppMailfile: WideString; out ppMaildomain: WideString; 
                          out pMailsystem: Integer; out pProfile: OleVariant); dispid 1610743837;
    procedure Recertify(const pIdfile: WideString; const pCertpw: WideString; 
                        const pComment: WideString); dispid 1610743838;
    procedure RegisterNewCertifier(const pOrg: WideString; const pIdfile: WideString; 
                                   const pCertpw: WideString; const pCountry: WideString); dispid 1610743839;
    procedure RegisterNewServer(const pServer: WideString; const pIdfile: WideString; 
                                const pDomain: WideString; const pServerpw: WideString; 
                                const pCertpw: WideString; const pLocation: WideString; 
                                const pComment: WideString; const pNetwork: WideString; 
                                const pAdminname: WideString; const pTitle: WideString); dispid 1610743840;
    procedure RegisterNewUser(const pLastn: WideString; const pIdfile: WideString; 
                              const pServer: WideString; const pFirstn: WideString; 
                              const pMiddle: WideString; const pCertpw: WideString; 
                              const pLocation: WideString; const pComment: WideString; 
                              const pMaildbpath: WideString; const pForward: WideString; 
                              const pUserpw: WideString; const pAltName: WideString; 
                              const pAltLang: WideString; type_: USER_TYPE); dispid 1610743841;
    function SwitchToID(const pIdfile: WideString; const pUserpw: WideString): WideString; dispid 1610743842;
    property CertifierName: WideString dispid 1610743843;
    property MailACLManager: WideString dispid 1610743845;
    property MailInternetAddress: WideString dispid 1610743847;
    property MailTemplateName: WideString dispid 1610743849;
    property PolicyName: WideString dispid 1610743851;
    property RoamingServer: WideString dispid 1610743853;
    property RoamingSubdir: WideString dispid 1610743855;
    property ShortName: WideString dispid 1610743857;
    property EnforceUniqueShortName: WordBool dispid 1610743859;
    property IsRoamingUser: WordBool dispid 1610743861;
    property MailCreateFTIndex: WordBool dispid 1610743863;
    property NoIDFile: WordBool dispid 1610743865;
    property StoreIDInMailfile: WordBool dispid 1610743867;
    property SynchInternetPassword: WordBool dispid 1610743869;
    property UseCertificateAuthority: WordBool dispid 1610743871;
    property MailOwnerAccess: REG_MAILOWNACL dispid 1610743873;
    property MailSystem: REG_MAILTYPE dispid 1610743875;
    property RoamingCleanupSetting: REG_ROAMCLEANUP dispid 1610743877;
    property MailQuotaSizeLimit: Integer dispid 1610743879;
    property MailQuotaWarningThreshold: Integer dispid 1610743881;
    property RoamingCleanupPeriod: Integer dispid 1610743883;
    property GroupList: OleVariant dispid 1610743885;
    property MailReplicaServers: OleVariant dispid 1610743887;
    property AltOrgUnit: OleVariant dispid 1610743889;
    property AltOrgUnitLang: OleVariant dispid 1610743891;
  end;

// *********************************************************************//
// Interface: IRichTextParagraphStyle
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {29131576-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  IRichTextParagraphStyle = interface(IDispatch)
    ['{29131576-2EED-1069-BF5D-00DD011186B7}']
    function Get_Alignment: RT_ALIGN; safecall;
    procedure Set_Alignment(plValue: RT_ALIGN); safecall;
    function Get_FirstLineLeftMargin: Integer; safecall;
    procedure Set_FirstLineLeftMargin(plValue: Integer); safecall;
    function Get_InterLineSpacing: SPACING; safecall;
    procedure Set_InterLineSpacing(plValue: SPACING); safecall;
    function Get_LeftMargin: Integer; safecall;
    procedure Set_LeftMargin(plValue: Integer); safecall;
    function Get_Pagination: RT_PAGINATE; safecall;
    procedure Set_Pagination(plValue: RT_PAGINATE); safecall;
    function Get_RightMargin: Integer; safecall;
    procedure Set_RightMargin(plValue: Integer); safecall;
    function Get_SpacingAbove: SPACING; safecall;
    procedure Set_SpacingAbove(plValue: SPACING); safecall;
    function Get_SpacingBelow: SPACING; safecall;
    procedure Set_SpacingBelow(plValue: SPACING); safecall;
    function Get_Tabs: OleVariant; safecall;
    procedure ClearAllTabs; safecall;
    procedure SetTab(lPosition: Integer; lType: RT_TAB); safecall;
    procedure SetTabs(lCount: Integer; lPosition: Integer; lInterval: Integer; lType: RT_TAB); safecall;
    property Alignment: RT_ALIGN read Get_Alignment write Set_Alignment;
    property FirstLineLeftMargin: Integer read Get_FirstLineLeftMargin write Set_FirstLineLeftMargin;
    property InterLineSpacing: SPACING read Get_InterLineSpacing write Set_InterLineSpacing;
    property LeftMargin: Integer read Get_LeftMargin write Set_LeftMargin;
    property Pagination: RT_PAGINATE read Get_Pagination write Set_Pagination;
    property RightMargin: Integer read Get_RightMargin write Set_RightMargin;
    property SpacingAbove: SPACING read Get_SpacingAbove write Set_SpacingAbove;
    property SpacingBelow: SPACING read Get_SpacingBelow write Set_SpacingBelow;
    property Tabs: OleVariant read Get_Tabs;
  end;

// *********************************************************************//
// DispIntf:  IRichTextParagraphStyleDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {29131576-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  IRichTextParagraphStyleDisp = dispinterface
    ['{29131576-2EED-1069-BF5D-00DD011186B7}']
    property Alignment: RT_ALIGN dispid 1610743808;
    property FirstLineLeftMargin: Integer dispid 1610743810;
    property InterLineSpacing: SPACING dispid 1610743812;
    property LeftMargin: Integer dispid 1610743814;
    property Pagination: RT_PAGINATE dispid 1610743816;
    property RightMargin: Integer dispid 1610743818;
    property SpacingAbove: SPACING dispid 1610743820;
    property SpacingBelow: SPACING dispid 1610743822;
    property Tabs: OleVariant readonly dispid 1610743824;
    procedure ClearAllTabs; dispid 1610743825;
    procedure SetTab(lPosition: Integer; lType: RT_TAB); dispid 1610743826;
    procedure SetTabs(lCount: Integer; lPosition: Integer; lInterval: Integer; lType: RT_TAB); dispid 1610743827;
  end;

// *********************************************************************//
// Interface: IRichTextStyle
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {29131575-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  IRichTextStyle = interface(IDispatch)
    ['{29131575-2EED-1069-BF5D-00DD011186B7}']
    function Get_Bold: Integer; safecall;
    procedure Set_Bold(plValue: Integer); safecall;
    function Get_Effects: RT_EFFECTS; safecall;
    procedure Set_Effects(plValue: RT_EFFECTS); safecall;
    function Get_FontSize: Integer; safecall;
    procedure Set_FontSize(plValue: Integer); safecall;
    function Get_Italic: Integer; safecall;
    procedure Set_Italic(plValue: Integer); safecall;
    function Get_NotesColor: COLORS; safecall;
    procedure Set_NotesColor(plValue: COLORS); safecall;
    function Get_NotesFont: RT_FONTS; safecall;
    procedure Set_NotesFont(plValue: RT_FONTS); safecall;
    function Get_PassThruHTML: Integer; safecall;
    procedure Set_PassThruHTML(plValue: Integer); safecall;
    function Get_StrikeThrough: Integer; safecall;
    procedure Set_StrikeThrough(plValue: Integer); safecall;
    function Get_Underline: Integer; safecall;
    procedure Set_Underline(plValue: Integer); safecall;
    function Get_Parent: ISession; safecall;
    function Get_IsDefault: WordBool; safecall;
    property Bold: Integer read Get_Bold write Set_Bold;
    property Effects: RT_EFFECTS read Get_Effects write Set_Effects;
    property FontSize: Integer read Get_FontSize write Set_FontSize;
    property Italic: Integer read Get_Italic write Set_Italic;
    property NotesColor: COLORS read Get_NotesColor write Set_NotesColor;
    property NotesFont: RT_FONTS read Get_NotesFont write Set_NotesFont;
    property PassThruHTML: Integer read Get_PassThruHTML write Set_PassThruHTML;
    property StrikeThrough: Integer read Get_StrikeThrough write Set_StrikeThrough;
    property Underline: Integer read Get_Underline write Set_Underline;
    property Parent: ISession read Get_Parent;
    property IsDefault: WordBool read Get_IsDefault;
  end;

// *********************************************************************//
// DispIntf:  IRichTextStyleDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {29131575-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  IRichTextStyleDisp = dispinterface
    ['{29131575-2EED-1069-BF5D-00DD011186B7}']
    property Bold: Integer dispid 1610743808;
    property Effects: RT_EFFECTS dispid 1610743810;
    property FontSize: Integer dispid 1610743812;
    property Italic: Integer dispid 1610743814;
    property NotesColor: COLORS dispid 1610743816;
    property NotesFont: RT_FONTS dispid 1610743818;
    property PassThruHTML: Integer dispid 1610743820;
    property StrikeThrough: Integer dispid 1610743822;
    property Underline: Integer dispid 1610743824;
    property Parent: ISession readonly dispid 1610743826;
    property IsDefault: WordBool readonly dispid 1610743827;
  end;

// *********************************************************************//
// Interface: IDbDirectory
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {29131566-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  IDbDirectory = interface(IDispatch)
    ['{29131566-2EED-1069-BF5D-00DD011186B7}']
    function Get_Name: WideString; safecall;
    function Get_Parent: ISession; safecall;
    function CreateDatabase(const pDbfile: WideString; bOpen: WordBool): IDatabase; safecall;
    function GetFirstDatabase(lFiletype: DB_TYPES): IDatabase; safecall;
    function GetNextDatabase: IDatabase; safecall;
    function OpenDatabase(const pDbfile: WideString; bFailover: WordBool): IDatabase; safecall;
    function OpenDatabaseIfModified(const pDbfile: WideString; const pITime: IDateTime): IDatabase; safecall;
    function OpenMailDatabase: IDatabase; safecall;
    function OpenDatabaseByReplicaID(const pRid: WideString): IDatabase; safecall;
    property Name: WideString read Get_Name;
    property Parent: ISession read Get_Parent;
  end;

// *********************************************************************//
// DispIntf:  IDbDirectoryDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {29131566-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  IDbDirectoryDisp = dispinterface
    ['{29131566-2EED-1069-BF5D-00DD011186B7}']
    property Name: WideString readonly dispid 0;
    property Parent: ISession readonly dispid 1610743809;
    function CreateDatabase(const pDbfile: WideString; bOpen: WordBool): IDatabase; dispid 1610743810;
    function GetFirstDatabase(lFiletype: DB_TYPES): IDatabase; dispid 1610743811;
    function GetNextDatabase: IDatabase; dispid 1610743812;
    function OpenDatabase(const pDbfile: WideString; bFailover: WordBool): IDatabase; dispid 1610743813;
    function OpenDatabaseIfModified(const pDbfile: WideString; const pITime: IDateTime): IDatabase; dispid 1610743814;
    function OpenMailDatabase: IDatabase; dispid 1610743815;
    function OpenDatabaseByReplicaID(const pRid: WideString): IDatabase; dispid 1610743816;
  end;

// *********************************************************************//
// Interface: IAdministrationProcess
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {29131581-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  IAdministrationProcess = interface(IDispatch)
    ['{29131581-2EED-1069-BF5D-00DD011186B7}']
    function Get_CertificateAuthorityOrg: WideString; safecall;
    procedure Set_CertificateAuthorityOrg(const ppCertificateAuthorityOrg: WideString); safecall;
    function Get_CertifierFile: WideString; safecall;
    procedure Set_CertifierFile(const ppCertifierFile: WideString); safecall;
    function Get_CertifierPassword: WideString; safecall;
    procedure Set_CertifierPassword(const ppCertifierPassword: WideString); safecall;
    function Get_IsCertificateAuthorityAvailable: WordBool; safecall;
    procedure Set_UseCertificateAuthority(pbUseCertificateAuthority: WordBool); safecall;
    function Get_UseCertificateAuthority: WordBool; safecall;
    function Get_CertificateExpiration: IDateTime; safecall;
    procedure Set_CertificateExpiration(const ppCertificateExpiration: IDateTime); safecall;
    function AddGroupMembers(const pGroup: WideString; Members: OleVariant): WideString; safecall;
    function AddInternetCertificateToUser(const pUser: WideString; const pKeyRingFile: WideString; 
                                          const pKeyRingPassword: WideString; 
                                          const Expiration: IDateTime): WideString; safecall;
    function AddServerToCluster(const pServer: WideString; const pCluster: WideString): WideString; safecall;
    function ApproveDeletePersonInDirectory(const pNoteid: WideString): WideString; safecall;
    function ApproveDeleteServerInDirectory(const pNoteid: WideString): WideString; safecall;
    function ApproveDesignElementDeletion(const pNoteid: WideString): WideString; safecall;
    function ApproveMailFileDeletion(const pNoteid: WideString): WideString; safecall;
    function ApproveMovedReplicaDeletion(const pNoteid: WideString): WideString; safecall;
    function ApproveNameChangeRetraction(const pNoteid: WideString): WideString; safecall;
    function ApproveRenamePersonInDirectory(const pNoteid: WideString): WideString; safecall;
    function ApproveRenameServerInDirectory(const pNoteid: WideString): WideString; safecall;
    function ApproveReplicaDeletion(const pNoteid: WideString): WideString; safecall;
    function ApproveResourceDeletion(const pNoteid: WideString): WideString; safecall;
    function ChangeHTTPPassword(const pUsername: WideString; const pOldPassword: WideString; 
                                const pNewPassword: WideString): WideString; safecall;
    function ConfigureMailAgent(const pUsername: WideString; const pAgentName: WideString; 
                                bActivatable: WordBool; bEnable: WordBool): WideString; safecall;
    function CreateReplica(const pSourceServer: WideString; const pSourceDBFile: WideString; 
                           const pDestServer: WideString; const pDestDBFile: WideString; 
                           bCopyACL: WordBool; bCreateFTIndex: WordBool): WideString; safecall;
    function MoveReplica(const pSourceServer: WideString; const pSourceDBFile: WideString; 
                         const pDestServer: WideString; const pDestDBFile: WideString; 
                         bCopyACL: WordBool; bCreateFTIndex: WordBool): WideString; safecall;
    function DeleteReplicas(const pServer: WideString; const pDbfile: WideString): WideString; safecall;
    function DeleteGroup(const pGroupName: WideString; bImmediate: WordBool; 
                         bDeleteWindowsGroup: WordBool): WideString; safecall;
    function DeleteServer(const pServerName: WideString; bImmediate: WordBool): WideString; safecall;
    function DeleteUser(const pUsername: WideString; bImmediate: WordBool; 
                        lMailFileAction: ADMP_MAILDEL; const pDenyGroup: WideString; 
                        bDeleteWindowsGroup: WordBool): WideString; safecall;
    function FindGroupInDomain(const pGroup: WideString): WideString; safecall;
    function FindServerInDomain(const pServer: WideString): WideString; safecall;
    function FindUserInDomain(const pUser: WideString): WideString; safecall;
    function MoveMailUser(const pUsername: WideString; const pNewHomeServer: WideString; 
                          const pNewHomeServerMailPath: WideString; bUseSCOS: WordBool; 
                          NewClusterReplicaArray: OleVariant; bDeleteOldClusterReplicas: WordBool): WideString; safecall;
    function MoveRoamingUser(const pUsername: WideString; const pDestServer: WideString; 
                             const pDestServerPath: WideString): WideString; safecall;
    function MoveUserInHierarchyRequest(const pUsername: WideString; 
                                        const pTargetCertifier: WideString; 
                                        bAllowPrimaryNameChange: WordBool): WideString; safecall;
    function MoveUserInHierarchyComplete(const pRequestNoteID: WideString; 
                                         const pLastName: WideString; const pFirstName: WideString; 
                                         const pMiddleInitial: WideString; 
                                         const pOrgUnit: WideString; 
                                         const pAltCommonName: WideString; 
                                         const pAltOrgUnit: WideString; 
                                         const pAltLanguage: WideString; 
                                         bRenameWindowsUser: WordBool): WideString; safecall;
    function RecertifyServer(const pServer: WideString): WideString; safecall;
    function RecertifyUser(const pUsername: WideString): WideString; safecall;
    function RemoveServerFromCluster(const pServer: WideString): WideString; safecall;
    function RenameGroup(const pGroup: WideString; const pNewGroup: WideString): WideString; safecall;
    function RenameNotesUser(const pUsername: WideString; const pLastName: WideString; 
                             const pFirstName: WideString; const pMiddleInitial: WideString; 
                             const pOrgUnit: WideString; const pAltCommonName: WideString; 
                             const pAltOrgUnit: WideString; const pAltLanguage: WideString; 
                             bRenameWindowsUser: WordBool): WideString; safecall;
    function RenameWebUser(const pUsername: WideString; const pNewUserName: WideString; 
                           const pNewLastName: WideString; const pNewFirstName: WideString; 
                           const pNewMiddleInitial: WideString; const pNewShortname: WideString; 
                           const pNewInternetAddress: WideString): WideString; safecall;
    function SetServerDirectoryAssistanceSettings(const pServer: WideString; 
                                                  const pDbfile: WideString): WideString; safecall;
    function SignDatabaseWithServerID(const pServer: WideString; const pDbfile: WideString; 
                                      bUpdateOnly: WordBool): WideString; safecall;
    function UpgradeUserToHierarchical(const pUsername: WideString; const pOrgUnit: WideString; 
                                       const pAltCommonName: WideString; 
                                       const pAltOrgUnit: WideString; const pAltLanguage: WideString): WideString; safecall;
    function SetUserPasswordSettings(const pUsername: WideString; 
                                     NotesPasswordCheckSetting: OleVariant; 
                                     NotesPasswordChangeInterval: OleVariant; 
                                     NotesPasswordGracePeriod: OleVariant; 
                                     InternetPasswordForceChange: OleVariant; NotUsed: ADMP_PWDCHK): WideString; safecall;
    function ApproveHostedOrgStorageDeletion(const pNoteid: WideString): WideString; safecall;
    property CertificateAuthorityOrg: WideString read Get_CertificateAuthorityOrg write Set_CertificateAuthorityOrg;
    property CertifierFile: WideString read Get_CertifierFile write Set_CertifierFile;
    property CertifierPassword: WideString read Get_CertifierPassword write Set_CertifierPassword;
    property IsCertificateAuthorityAvailable: WordBool read Get_IsCertificateAuthorityAvailable;
    property UseCertificateAuthority: WordBool read Get_UseCertificateAuthority write Set_UseCertificateAuthority;
    property CertificateExpiration: IDateTime read Get_CertificateExpiration write Set_CertificateExpiration;
  end;

// *********************************************************************//
// DispIntf:  IAdministrationProcessDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {29131581-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  IAdministrationProcessDisp = dispinterface
    ['{29131581-2EED-1069-BF5D-00DD011186B7}']
    property CertificateAuthorityOrg: WideString dispid 1610743808;
    property CertifierFile: WideString dispid 1610743810;
    property CertifierPassword: WideString dispid 1610743812;
    property IsCertificateAuthorityAvailable: WordBool readonly dispid 1610743814;
    property UseCertificateAuthority: WordBool dispid 1610743815;
    property CertificateExpiration: IDateTime dispid 1610743817;
    function AddGroupMembers(const pGroup: WideString; Members: OleVariant): WideString; dispid 1610743819;
    function AddInternetCertificateToUser(const pUser: WideString; const pKeyRingFile: WideString; 
                                          const pKeyRingPassword: WideString; 
                                          const Expiration: IDateTime): WideString; dispid 1610743820;
    function AddServerToCluster(const pServer: WideString; const pCluster: WideString): WideString; dispid 1610743821;
    function ApproveDeletePersonInDirectory(const pNoteid: WideString): WideString; dispid 1610743822;
    function ApproveDeleteServerInDirectory(const pNoteid: WideString): WideString; dispid 1610743823;
    function ApproveDesignElementDeletion(const pNoteid: WideString): WideString; dispid 1610743824;
    function ApproveMailFileDeletion(const pNoteid: WideString): WideString; dispid 1610743825;
    function ApproveMovedReplicaDeletion(const pNoteid: WideString): WideString; dispid 1610743826;
    function ApproveNameChangeRetraction(const pNoteid: WideString): WideString; dispid 1610743827;
    function ApproveRenamePersonInDirectory(const pNoteid: WideString): WideString; dispid 1610743828;
    function ApproveRenameServerInDirectory(const pNoteid: WideString): WideString; dispid 1610743829;
    function ApproveReplicaDeletion(const pNoteid: WideString): WideString; dispid 1610743830;
    function ApproveResourceDeletion(const pNoteid: WideString): WideString; dispid 1610743831;
    function ChangeHTTPPassword(const pUsername: WideString; const pOldPassword: WideString; 
                                const pNewPassword: WideString): WideString; dispid 1610743832;
    function ConfigureMailAgent(const pUsername: WideString; const pAgentName: WideString; 
                                bActivatable: WordBool; bEnable: WordBool): WideString; dispid 1610743833;
    function CreateReplica(const pSourceServer: WideString; const pSourceDBFile: WideString; 
                           const pDestServer: WideString; const pDestDBFile: WideString; 
                           bCopyACL: WordBool; bCreateFTIndex: WordBool): WideString; dispid 1610743834;
    function MoveReplica(const pSourceServer: WideString; const pSourceDBFile: WideString; 
                         const pDestServer: WideString; const pDestDBFile: WideString; 
                         bCopyACL: WordBool; bCreateFTIndex: WordBool): WideString; dispid 1610743835;
    function DeleteReplicas(const pServer: WideString; const pDbfile: WideString): WideString; dispid 1610743836;
    function DeleteGroup(const pGroupName: WideString; bImmediate: WordBool; 
                         bDeleteWindowsGroup: WordBool): WideString; dispid 1610743837;
    function DeleteServer(const pServerName: WideString; bImmediate: WordBool): WideString; dispid 1610743838;
    function DeleteUser(const pUsername: WideString; bImmediate: WordBool; 
                        lMailFileAction: ADMP_MAILDEL; const pDenyGroup: WideString; 
                        bDeleteWindowsGroup: WordBool): WideString; dispid 1610743839;
    function FindGroupInDomain(const pGroup: WideString): WideString; dispid 1610743840;
    function FindServerInDomain(const pServer: WideString): WideString; dispid 1610743841;
    function FindUserInDomain(const pUser: WideString): WideString; dispid 1610743842;
    function MoveMailUser(const pUsername: WideString; const pNewHomeServer: WideString; 
                          const pNewHomeServerMailPath: WideString; bUseSCOS: WordBool; 
                          NewClusterReplicaArray: OleVariant; bDeleteOldClusterReplicas: WordBool): WideString; dispid 1610743843;
    function MoveRoamingUser(const pUsername: WideString; const pDestServer: WideString; 
                             const pDestServerPath: WideString): WideString; dispid 1610743844;
    function MoveUserInHierarchyRequest(const pUsername: WideString; 
                                        const pTargetCertifier: WideString; 
                                        bAllowPrimaryNameChange: WordBool): WideString; dispid 1610743845;
    function MoveUserInHierarchyComplete(const pRequestNoteID: WideString; 
                                         const pLastName: WideString; const pFirstName: WideString; 
                                         const pMiddleInitial: WideString; 
                                         const pOrgUnit: WideString; 
                                         const pAltCommonName: WideString; 
                                         const pAltOrgUnit: WideString; 
                                         const pAltLanguage: WideString; 
                                         bRenameWindowsUser: WordBool): WideString; dispid 1610743846;
    function RecertifyServer(const pServer: WideString): WideString; dispid 1610743847;
    function RecertifyUser(const pUsername: WideString): WideString; dispid 1610743848;
    function RemoveServerFromCluster(const pServer: WideString): WideString; dispid 1610743849;
    function RenameGroup(const pGroup: WideString; const pNewGroup: WideString): WideString; dispid 1610743850;
    function RenameNotesUser(const pUsername: WideString; const pLastName: WideString; 
                             const pFirstName: WideString; const pMiddleInitial: WideString; 
                             const pOrgUnit: WideString; const pAltCommonName: WideString; 
                             const pAltOrgUnit: WideString; const pAltLanguage: WideString; 
                             bRenameWindowsUser: WordBool): WideString; dispid 1610743851;
    function RenameWebUser(const pUsername: WideString; const pNewUserName: WideString; 
                           const pNewLastName: WideString; const pNewFirstName: WideString; 
                           const pNewMiddleInitial: WideString; const pNewShortname: WideString; 
                           const pNewInternetAddress: WideString): WideString; dispid 1610743852;
    function SetServerDirectoryAssistanceSettings(const pServer: WideString; 
                                                  const pDbfile: WideString): WideString; dispid 1610743853;
    function SignDatabaseWithServerID(const pServer: WideString; const pDbfile: WideString; 
                                      bUpdateOnly: WordBool): WideString; dispid 1610743854;
    function UpgradeUserToHierarchical(const pUsername: WideString; const pOrgUnit: WideString; 
                                       const pAltCommonName: WideString; 
                                       const pAltOrgUnit: WideString; const pAltLanguage: WideString): WideString; dispid 1610743855;
    function SetUserPasswordSettings(const pUsername: WideString; 
                                     NotesPasswordCheckSetting: OleVariant; 
                                     NotesPasswordChangeInterval: OleVariant; 
                                     NotesPasswordGracePeriod: OleVariant; 
                                     InternetPasswordForceChange: OleVariant; NotUsed: ADMP_PWDCHK): WideString; dispid 1610743856;
    function ApproveHostedOrgStorageDeletion(const pNoteid: WideString): WideString; dispid 1610743857;
  end;

// *********************************************************************//
// Interface: INotesStream
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {29131580-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  INotesStream = interface(IDispatch)
    ['{29131580-2EED-1069-BF5D-00DD011186B7}']
    function Get_Charset: WideString; safecall;
    function Get_IsEOS: WordBool; safecall;
    function Get_Position: Integer; safecall;
    procedure Set_Position(plPosition: Integer); safecall;
    function Get_Bytes: Integer; safecall;
    function Get_IsReadOnly: WordBool; safecall;
    function Get_Parent: ISession; safecall;
    procedure Close; safecall;
    function Open(const pName: WideString; const pCharset: WideString): WordBool; safecall;
    function Read(lLength: Integer): OleVariant; safecall;
    function ReadText(lLength: STMREAD_LEN; lEOL: EOL_TYPE): WideString; safecall;
    procedure Truncate; safecall;
    function Write(vByteArray: OleVariant): Integer; safecall;
    function WriteText(const pText: WideString; lEOL: EOL_TYPE): Integer; safecall;
    property Charset: WideString read Get_Charset;
    property IsEOS: WordBool read Get_IsEOS;
    property Position: Integer read Get_Position write Set_Position;
    property Bytes: Integer read Get_Bytes;
    property IsReadOnly: WordBool read Get_IsReadOnly;
    property Parent: ISession read Get_Parent;
  end;

// *********************************************************************//
// DispIntf:  INotesStreamDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {29131580-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  INotesStreamDisp = dispinterface
    ['{29131580-2EED-1069-BF5D-00DD011186B7}']
    property Charset: WideString readonly dispid 1610743808;
    property IsEOS: WordBool readonly dispid 1610743809;
    property Position: Integer dispid 1610743810;
    property Bytes: Integer readonly dispid 1610743812;
    property IsReadOnly: WordBool readonly dispid 1610743813;
    property Parent: ISession readonly dispid 1610743814;
    procedure Close; dispid 1610743815;
    function Open(const pName: WideString; const pCharset: WideString): WordBool; dispid 1610743816;
    function Read(lLength: Integer): OleVariant; dispid 1610743817;
    function ReadText(lLength: STMREAD_LEN; lEOL: EOL_TYPE): WideString; dispid 1610743818;
    procedure Truncate; dispid 1610743819;
    function Write(vByteArray: OleVariant): Integer; dispid 1610743820;
    function WriteText(const pText: WideString; lEOL: EOL_TYPE): Integer; dispid 1610743821;
  end;

// *********************************************************************//
// Interface: IColorObject
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {29131583-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  IColorObject = interface(IDispatch)
    ['{29131583-2EED-1069-BF5D-00DD011186B7}']
    function Get_Red: Integer; safecall;
    function Get_Green: Integer; safecall;
    function Get_Blue: Integer; safecall;
    function Get_Hue: Integer; safecall;
    function Get_Saturation: Integer; safecall;
    function Get_Luminance: Integer; safecall;
    function Get_NotesColor: Integer; safecall;
    function SetRGB(Red: Integer; Green: Integer; Blue: Integer): Integer; safecall;
    function SetHSL(Hue: Integer; Saturation: Integer; Luminance: Integer): Integer; safecall;
    procedure Set_NotesColor(pNotesColor: Integer); safecall;
    property Red: Integer read Get_Red;
    property Green: Integer read Get_Green;
    property Blue: Integer read Get_Blue;
    property Hue: Integer read Get_Hue;
    property Saturation: Integer read Get_Saturation;
    property Luminance: Integer read Get_Luminance;
    property NotesColor: Integer read Get_NotesColor write Set_NotesColor;
  end;

// *********************************************************************//
// DispIntf:  IColorObjectDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {29131583-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  IColorObjectDisp = dispinterface
    ['{29131583-2EED-1069-BF5D-00DD011186B7}']
    property Red: Integer readonly dispid 1610743808;
    property Green: Integer readonly dispid 1610743809;
    property Blue: Integer readonly dispid 1610743810;
    property Hue: Integer readonly dispid 1610743811;
    property Saturation: Integer readonly dispid 1610743812;
    property Luminance: Integer readonly dispid 1610743813;
    property NotesColor: Integer dispid 1610743814;
    function SetRGB(Red: Integer; Green: Integer; Blue: Integer): Integer; dispid 1610743815;
    function SetHSL(Hue: Integer; Saturation: Integer; Luminance: Integer): Integer; dispid 1610743816;
  end;

// *********************************************************************//
// Interface: IDXLExporter
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {29131590-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  IDXLExporter = interface(IDispatch)
    ['{29131590-2EED-1069-BF5D-00DD011186B7}']
    function Get_Log: WideString; safecall;
    function Get_LogComment: WideString; safecall;
    procedure Set_LogComment(const ppLogComment: WideString); safecall;
    function Get_ExitOnFirstFatalError: WordBool; safecall;
    procedure Set_ExitOnFirstFatalError(pbFlag: WordBool); safecall;
    function Get_ForceNoteFormat: WordBool; safecall;
    procedure Set_ForceNoteFormat(pbFlag: WordBool); safecall;
    function Get_OutputDOCTYPE: WordBool; safecall;
    procedure Set_OutputDOCTYPE(pbFlag: WordBool); safecall;
    function Get_DoctypeSYSTEM: WideString; safecall;
    procedure Set_DoctypeSYSTEM(const ppTitle: WideString); safecall;
    function Get_ConvertNotesbitmapsToGIF: WordBool; safecall;
    procedure Set_ConvertNotesbitmapsToGIF(pbFlag: WordBool); safecall;
    function Export(Input: OleVariant): WideString; safecall;
    property Log: WideString read Get_Log;
    property LogComment: WideString read Get_LogComment write Set_LogComment;
    property ExitOnFirstFatalError: WordBool read Get_ExitOnFirstFatalError write Set_ExitOnFirstFatalError;
    property ForceNoteFormat: WordBool read Get_ForceNoteFormat write Set_ForceNoteFormat;
    property OutputDOCTYPE: WordBool read Get_OutputDOCTYPE write Set_OutputDOCTYPE;
    property DoctypeSYSTEM: WideString read Get_DoctypeSYSTEM write Set_DoctypeSYSTEM;
    property ConvertNotesbitmapsToGIF: WordBool read Get_ConvertNotesbitmapsToGIF write Set_ConvertNotesbitmapsToGIF;
  end;

// *********************************************************************//
// DispIntf:  IDXLExporterDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {29131590-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  IDXLExporterDisp = dispinterface
    ['{29131590-2EED-1069-BF5D-00DD011186B7}']
    property Log: WideString readonly dispid 1610743808;
    property LogComment: WideString dispid 1610743809;
    property ExitOnFirstFatalError: WordBool dispid 1610743811;
    property ForceNoteFormat: WordBool dispid 1610743813;
    property OutputDOCTYPE: WordBool dispid 1610743815;
    property DoctypeSYSTEM: WideString dispid 1610743817;
    property ConvertNotesbitmapsToGIF: WordBool dispid 1610743819;
    function Export(Input: OleVariant): WideString; dispid 1610743821;
  end;

// *********************************************************************//
// Interface: IDXLImporter
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {29131591-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  IDXLImporter = interface(IDispatch)
    ['{29131591-2EED-1069-BF5D-00DD011186B7}']
    function Get_Log: WideString; safecall;
    function Get_LogComment: WideString; safecall;
    procedure Set_LogComment(const ppLogComment: WideString); safecall;
    function Get_ExitOnFirstFatalError: WordBool; safecall;
    procedure Set_ExitOnFirstFatalError(pbFlag: WordBool); safecall;
    function Get_ACLImportOption: DXLIMPORTOPTION; safecall;
    procedure Set_ACLImportOption(pOption: DXLIMPORTOPTION); safecall;
    function Get_DesignImportOption: DXLIMPORTOPTION; safecall;
    procedure Set_DesignImportOption(pOption: DXLIMPORTOPTION); safecall;
    function Get_DocumentImportOption: DXLIMPORTOPTION; safecall;
    procedure Set_DocumentImportOption(pOption: DXLIMPORTOPTION); safecall;
    function Get_ReplaceDBProperties: WordBool; safecall;
    procedure Set_ReplaceDBProperties(pbFlag: WordBool); safecall;
    function Get_InputValidationOption: VALIDATIONOPTION; safecall;
    procedure Set_InputValidationOption(pOption: VALIDATIONOPTION); safecall;
    function Get_CreateFTIndex: WordBool; safecall;
    procedure Set_CreateFTIndex(pbFlag: WordBool); safecall;
    function Get_ImportedNoteCount: Integer; safecall;
    function Get_ReplicaRequiredForReplaceOrUpdate: WordBool; safecall;
    procedure Set_ReplicaRequiredForReplaceOrUpdate(pbFlag: WordBool); safecall;
    function Get_UnknownTokenLogOption: DXLLOGOPTION; safecall;
    procedure Set_UnknownTokenLogOption(pOption: DXLLOGOPTION); safecall;
    function GetFirstImportedNoteId: WideString; safecall;
    function GetNextImportedNoteId(const pNoteid: WideString): WideString; safecall;
    procedure Import(Input: OleVariant; importDB: OleVariant); safecall;
    property Log: WideString read Get_Log;
    property LogComment: WideString read Get_LogComment write Set_LogComment;
    property ExitOnFirstFatalError: WordBool read Get_ExitOnFirstFatalError write Set_ExitOnFirstFatalError;
    property ACLImportOption: DXLIMPORTOPTION read Get_ACLImportOption write Set_ACLImportOption;
    property DesignImportOption: DXLIMPORTOPTION read Get_DesignImportOption write Set_DesignImportOption;
    property DocumentImportOption: DXLIMPORTOPTION read Get_DocumentImportOption write Set_DocumentImportOption;
    property ReplaceDBProperties: WordBool read Get_ReplaceDBProperties write Set_ReplaceDBProperties;
    property InputValidationOption: VALIDATIONOPTION read Get_InputValidationOption write Set_InputValidationOption;
    property CreateFTIndex: WordBool read Get_CreateFTIndex write Set_CreateFTIndex;
    property ImportedNoteCount: Integer read Get_ImportedNoteCount;
    property ReplicaRequiredForReplaceOrUpdate: WordBool read Get_ReplicaRequiredForReplaceOrUpdate write Set_ReplicaRequiredForReplaceOrUpdate;
    property UnknownTokenLogOption: DXLLOGOPTION read Get_UnknownTokenLogOption write Set_UnknownTokenLogOption;
  end;

// *********************************************************************//
// DispIntf:  IDXLImporterDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {29131591-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  IDXLImporterDisp = dispinterface
    ['{29131591-2EED-1069-BF5D-00DD011186B7}']
    property Log: WideString readonly dispid 1610743808;
    property LogComment: WideString dispid 1610743809;
    property ExitOnFirstFatalError: WordBool dispid 1610743811;
    property ACLImportOption: DXLIMPORTOPTION dispid 1610743813;
    property DesignImportOption: DXLIMPORTOPTION dispid 1610743815;
    property DocumentImportOption: DXLIMPORTOPTION dispid 1610743817;
    property ReplaceDBProperties: WordBool dispid 1610743819;
    property InputValidationOption: VALIDATIONOPTION dispid 1610743821;
    property CreateFTIndex: WordBool dispid 1610743823;
    property ImportedNoteCount: Integer readonly dispid 1610743825;
    property ReplicaRequiredForReplaceOrUpdate: WordBool dispid 1610743826;
    property UnknownTokenLogOption: DXLLOGOPTION dispid 1610743828;
    function GetFirstImportedNoteId: WideString; dispid 1610743830;
    function GetNextImportedNoteId(const pNoteid: WideString): WideString; dispid 1610743831;
    procedure Import(Input: OleVariant; importDB: OleVariant); dispid 1610743832;
  end;

// *********************************************************************//
// Interface: IMIMEEntity
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {2913157E-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  IMIMEEntity = interface(IDispatch)
    ['{2913157E-2EED-1069-BF5D-00DD011186B7}']
    function Get_ContentSubType: WideString; safecall;
    function Get_ContentType: WideString; safecall;
    function Get_ContentAsText: WideString; safecall;
    function Get_Headers: WideString; safecall;
    function Get_ParentDoc: IDocument; safecall;
    function GetFirstChildEntity: IMIMEEntity; safecall;
    function GetNextSibling: IMIMEEntity; safecall;
    function GetParentEntity: IMIMEEntity; safecall;
    function Get_BoundaryStart: WideString; safecall;
    function Get_BoundaryEnd: WideString; safecall;
    function Get_Charset: WideString; safecall;
    function Get_Encoding: MIME_ENCODING; safecall;
    function Get_HeaderObjects: OleVariant; safecall;
    function Get_Preamble: WideString; safecall;
    procedure Set_Preamble(const ppPreamble: WideString); safecall;
    function CreateChildEntity(const pNextSiblingIMIMEEntity: IMIMEEntity): IMIMEEntity; safecall;
    function CreateHeader(const pHeaderName: WideString): IMIMEHeader; safecall;
    function CreateParentEntity: IMIMEEntity; safecall;
    procedure DecodeContent; safecall;
    procedure EncodeContent(lEnc: MIME_ENCODING); safecall;
    procedure GetContentAsBytes(const pINotesStream: INotesStream; bDecoded: WordBool); safecall;
    procedure GetContentAsText(const pINotesStream: INotesStream; bDecoded: WordBool); safecall;
    procedure GetEntityAsText(const pINotesStream: INotesStream; var pHeaderFilters: OleVariant; 
                              bInclusive: WordBool); safecall;
    function GetNextEntity(lSearchPath: SEARCH_PATH): IMIMEEntity; safecall;
    function GetNthHeader(const pHeaderName: WideString; lNth: Integer): IMIMEHeader; safecall;
    function GetPrevEntity(lSearchPath: SEARCH_PATH): IMIMEEntity; safecall;
    function GetPrevSibling: IMIMEEntity; safecall;
    function GetSomeHeaders(var pHeaderFilters: OleVariant; bInclusive: WordBool): WideString; safecall;
    procedure Remove; safecall;
    procedure SetContentFromBytes(const pINotesStream: INotesStream; 
                                  const pContentType: WideString; lEnc: MIME_ENCODING); safecall;
    procedure SetContentFromText(const pINotesStream: INotesStream; const pContentType: WideString; 
                                 lEnc: MIME_ENCODING); safecall;
    property ContentSubType: WideString read Get_ContentSubType;
    property ContentType: WideString read Get_ContentType;
    property ContentAsText: WideString read Get_ContentAsText;
    property Headers: WideString read Get_Headers;
    property ParentDoc: IDocument read Get_ParentDoc;
    property BoundaryStart: WideString read Get_BoundaryStart;
    property BoundaryEnd: WideString read Get_BoundaryEnd;
    property Charset: WideString read Get_Charset;
    property Encoding: MIME_ENCODING read Get_Encoding;
    property HeaderObjects: OleVariant read Get_HeaderObjects;
    property Preamble: WideString read Get_Preamble write Set_Preamble;
  end;

// *********************************************************************//
// DispIntf:  IMIMEEntityDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {2913157E-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  IMIMEEntityDisp = dispinterface
    ['{2913157E-2EED-1069-BF5D-00DD011186B7}']
    property ContentSubType: WideString readonly dispid 1610743808;
    property ContentType: WideString readonly dispid 1610743809;
    property ContentAsText: WideString readonly dispid 1610743810;
    property Headers: WideString readonly dispid 1610743811;
    property ParentDoc: IDocument readonly dispid 1610743812;
    function GetFirstChildEntity: IMIMEEntity; dispid 1610743813;
    function GetNextSibling: IMIMEEntity; dispid 1610743814;
    function GetParentEntity: IMIMEEntity; dispid 1610743815;
    property BoundaryStart: WideString readonly dispid 1610743816;
    property BoundaryEnd: WideString readonly dispid 1610743817;
    property Charset: WideString readonly dispid 1610743818;
    property Encoding: MIME_ENCODING readonly dispid 1610743819;
    property HeaderObjects: OleVariant readonly dispid 1610743820;
    property Preamble: WideString dispid 1610743821;
    function CreateChildEntity(const pNextSiblingIMIMEEntity: IMIMEEntity): IMIMEEntity; dispid 1610743823;
    function CreateHeader(const pHeaderName: WideString): IMIMEHeader; dispid 1610743824;
    function CreateParentEntity: IMIMEEntity; dispid 1610743825;
    procedure DecodeContent; dispid 1610743826;
    procedure EncodeContent(lEnc: MIME_ENCODING); dispid 1610743827;
    procedure GetContentAsBytes(const pINotesStream: INotesStream; bDecoded: WordBool); dispid 1610743828;
    procedure GetContentAsText(const pINotesStream: INotesStream; bDecoded: WordBool); dispid 1610743829;
    procedure GetEntityAsText(const pINotesStream: INotesStream; var pHeaderFilters: OleVariant; 
                              bInclusive: WordBool); dispid 1610743830;
    function GetNextEntity(lSearchPath: SEARCH_PATH): IMIMEEntity; dispid 1610743831;
    function GetNthHeader(const pHeaderName: WideString; lNth: Integer): IMIMEHeader; dispid 1610743832;
    function GetPrevEntity(lSearchPath: SEARCH_PATH): IMIMEEntity; dispid 1610743833;
    function GetPrevSibling: IMIMEEntity; dispid 1610743834;
    function GetSomeHeaders(var pHeaderFilters: OleVariant; bInclusive: WordBool): WideString; dispid 1610743835;
    procedure Remove; dispid 1610743836;
    procedure SetContentFromBytes(const pINotesStream: INotesStream; 
                                  const pContentType: WideString; lEnc: MIME_ENCODING); dispid 1610743837;
    procedure SetContentFromText(const pINotesStream: INotesStream; const pContentType: WideString; 
                                 lEnc: MIME_ENCODING); dispid 1610743838;
  end;

// *********************************************************************//
// Interface: IMIMEHeader
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {2913157F-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  IMIMEHeader = interface(IDispatch)
    ['{2913157F-2EED-1069-BF5D-00DD011186B7}']
    function Get_HeaderName: WideString; safecall;
    function Get_Parent: IMIMEEntity; safecall;
    function AddValText(const pValueText: WideString; const pRfc2047Charset: WideString): WordBool; safecall;
    function GetHeaderVal(bFolded: WordBool; bDecoded: WordBool): WideString; safecall;
    function GetHeaderValAndParams(bFolded: WordBool; bDecoded: WordBool): WideString; safecall;
    function GetParamVal(const pParamName: WideString; bFolded: WordBool): WideString; safecall;
    procedure Remove; safecall;
    function SetHeaderVal(const pHeaderVal: WideString): WordBool; safecall;
    function SetHeaderValAndParams(const pHeaderValParams: WideString): WordBool; safecall;
    function SetParamVal(const pParamName: WideString; const pParamVal: WideString): WordBool; safecall;
    property HeaderName: WideString read Get_HeaderName;
    property Parent: IMIMEEntity read Get_Parent;
  end;

// *********************************************************************//
// DispIntf:  IMIMEHeaderDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {2913157F-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  IMIMEHeaderDisp = dispinterface
    ['{2913157F-2EED-1069-BF5D-00DD011186B7}']
    property HeaderName: WideString readonly dispid 1610743808;
    property Parent: IMIMEEntity readonly dispid 1610743809;
    function AddValText(const pValueText: WideString; const pRfc2047Charset: WideString): WordBool; dispid 1610743810;
    function GetHeaderVal(bFolded: WordBool; bDecoded: WordBool): WideString; dispid 1610743811;
    function GetHeaderValAndParams(bFolded: WordBool; bDecoded: WordBool): WideString; dispid 1610743812;
    function GetParamVal(const pParamName: WideString; bFolded: WordBool): WideString; dispid 1610743813;
    procedure Remove; dispid 1610743814;
    function SetHeaderVal(const pHeaderVal: WideString): WordBool; dispid 1610743815;
    function SetHeaderValAndParams(const pHeaderValParams: WideString): WordBool; dispid 1610743816;
    function SetParamVal(const pParamName: WideString; const pParamVal: WideString): WordBool; dispid 1610743817;
  end;

// *********************************************************************//
// Interface: IRichTextItem
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {29131574-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  IRichTextItem = interface(IItem)
    ['{29131574-2EED-1069-BF5D-00DD011186B7}']
    function Get_EmbeddedObjects: OleVariant; safecall;
    procedure AddNewLine(lCount: Integer; bNewparagraph: WordBool); safecall;
    procedure AddPageBreak(const pIStyle: IRichTextParagraphStyle); safecall;
    procedure AddTab(lCount: Integer); safecall;
    procedure AppendDocLink(const pIObj: IUnknown; const pComment: WideString; 
                            const pHotspottext: WideString); safecall;
    procedure AppendParagraphStyle(const pIStyle: IRichTextParagraphStyle); safecall;
    procedure AppendRTItem(const pIRTItem: IRichTextItem); safecall;
    procedure AppendStyle(const pIStyle: IRichTextStyle); safecall;
    procedure AppendText(const pText: WideString); safecall;
    function EmbedObject(lType: EMBED_TYPE; const pClass: WideString; const pSource: WideString; 
                         const pName: WideString): IEmbeddedObject; safecall;
    function GetEmbeddedObject(const pName: WideString): IEmbeddedObject; safecall;
    function GetFormattedText(bTabstrip: WordBool; lLinelen: Integer): WideString; safecall;
    function CreateNavigator: IRichTextNavigator; safecall;
    function CreateRange: IRichTextRange; safecall;
    procedure AppendTable(lRowCount: Integer; lColumnCount: Integer; var pRowLabels: OleVariant; 
                          lLeftMargin: Integer; var pRTPStyleArray: OleVariant); safecall;
    procedure BeginInsert(var pElement: OleVariant; bAfter: WordBool); safecall;
    procedure EndInsert; safecall;
    procedure BeginSection(const pTitle: WideString; const pTitleStyle: IRichTextStyle; 
                           const pBarColor: IColorObject; bExpand: WordBool); safecall;
    procedure EndSection; safecall;
    function GetNotesFont(const pFaceName: WideString; bAddOnFail: WordBool): Integer; safecall;
    procedure Update; safecall;
    procedure Compact; safecall;
    function GetUnformattedText: WideString; safecall;
    property EmbeddedObjects: OleVariant read Get_EmbeddedObjects;
  end;

// *********************************************************************//
// DispIntf:  IRichTextItemDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {29131574-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  IRichTextItemDisp = dispinterface
    ['{29131574-2EED-1069-BF5D-00DD011186B7}']
    property EmbeddedObjects: OleVariant readonly dispid 1610809344;
    procedure AddNewLine(lCount: Integer; bNewparagraph: WordBool); dispid 1610809345;
    procedure AddPageBreak(const pIStyle: IRichTextParagraphStyle); dispid 1610809346;
    procedure AddTab(lCount: Integer); dispid 1610809347;
    procedure AppendDocLink(const pIObj: IUnknown; const pComment: WideString; 
                            const pHotspottext: WideString); dispid 1610809348;
    procedure AppendParagraphStyle(const pIStyle: IRichTextParagraphStyle); dispid 1610809349;
    procedure AppendRTItem(const pIRTItem: IRichTextItem); dispid 1610809350;
    procedure AppendStyle(const pIStyle: IRichTextStyle); dispid 1610809351;
    procedure AppendText(const pText: WideString); dispid 1610809352;
    function EmbedObject(lType: EMBED_TYPE; const pClass: WideString; const pSource: WideString; 
                         const pName: WideString): IEmbeddedObject; dispid 1610809353;
    function GetEmbeddedObject(const pName: WideString): IEmbeddedObject; dispid 1610809354;
    function GetFormattedText(bTabstrip: WordBool; lLinelen: Integer): WideString; dispid 1610809355;
    function CreateNavigator: IRichTextNavigator; dispid 1610809356;
    function CreateRange: IRichTextRange; dispid 1610809357;
    procedure AppendTable(lRowCount: Integer; lColumnCount: Integer; var pRowLabels: OleVariant; 
                          lLeftMargin: Integer; var pRTPStyleArray: OleVariant); dispid 1610809358;
    procedure BeginInsert(var pElement: OleVariant; bAfter: WordBool); dispid 1610809359;
    procedure EndInsert; dispid 1610809360;
    procedure BeginSection(const pTitle: WideString; const pTitleStyle: IRichTextStyle; 
                           const pBarColor: IColorObject; bExpand: WordBool); dispid 1610809361;
    procedure EndSection; dispid 1610809362;
    function GetNotesFont(const pFaceName: WideString; bAddOnFail: WordBool): Integer; dispid 1610809363;
    procedure Update; dispid 1610809364;
    procedure Compact; dispid 1610809365;
    function GetUnformattedText: WideString; dispid 1610809366;
    property DateTimeValue: IDateTime dispid 1610743808;
    property IsAuthors: WordBool dispid 1610743810;
    property IsEncrypted: WordBool dispid 1610743812;
    property IsNames: WordBool dispid 1610743814;
    property IsProtected: WordBool dispid 1610743816;
    property IsReaders: WordBool dispid 1610743818;
    property IsSigned: WordBool dispid 1610743820;
    property IsSummary: WordBool dispid 1610743822;
    property LastModified: OleVariant readonly dispid 1610743824;
    property Name: WideString readonly dispid 0;
    property Parent: IDocument readonly dispid 1610743826;
    property SaveToDisk: WordBool dispid 1610743827;
    property Text: WideString readonly dispid 1610743829;
    property type_: IT_TYPE readonly dispid 1610743830;
    property ValueLength: Integer readonly dispid 1610743831;
    property Values: OleVariant dispid 1610743832;
    function Abstract(lMaxlen: Integer; bDropvowels: WordBool; bUsedict: WordBool): WideString; dispid 1610743834;
    procedure AppendToTextList(Values: OleVariant); dispid 1610743835;
    function Contains(Value: OleVariant): WordBool; dispid 1610743836;
    function CopyItemToDocument(const pIDoc: IDocument; const pNewname: WideString): IItem2; dispid 1610743837;
    function GetMIMEEntity: IMIMEEntity; dispid 1610743838;
    procedure Remove; dispid 1610743839;
  end;

// *********************************************************************//
// Interface: IEmbeddedObject
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {29131569-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  IEmbeddedObject = interface(IDispatch)
    ['{29131569-2EED-1069-BF5D-00DD011186B7}']
    function Get_Class_: WideString; safecall;
    function Get_FileSize: Integer; safecall;
    function Get_FitBelowFields: WordBool; safecall;
    procedure Set_FitBelowFields(pbFlag: WordBool); safecall;
    function Get_FitToWindow: WordBool; safecall;
    procedure Set_FitToWindow(pbFlag: WordBool); safecall;
    function Get_Name: WideString; safecall;
    function Get_Object_: OleVariant; safecall;
    function Get_Parent: IRichTextItem; safecall;
    function Get_RunReadOnly: WordBool; safecall;
    procedure Set_RunReadOnly(pbFlag: WordBool); safecall;
    function Get_Source: WideString; safecall;
    function Get_type_: EMBED_TYPE; safecall;
    function Get_Verbs: OleVariant; safecall;
    function Activate(bShow: WordBool): IDispatch; safecall;
    procedure DoVerb(const pVerb: WideString); safecall;
    procedure ExtractFile(const pPath: WideString); safecall;
    procedure Remove; safecall;
    property Class_: WideString read Get_Class_;
    property FileSize: Integer read Get_FileSize;
    property FitBelowFields: WordBool read Get_FitBelowFields write Set_FitBelowFields;
    property FitToWindow: WordBool read Get_FitToWindow write Set_FitToWindow;
    property Name: WideString read Get_Name;
    property Object_: OleVariant read Get_Object_;
    property Parent: IRichTextItem read Get_Parent;
    property RunReadOnly: WordBool read Get_RunReadOnly write Set_RunReadOnly;
    property Source: WideString read Get_Source;
    property type_: EMBED_TYPE read Get_type_;
    property Verbs: OleVariant read Get_Verbs;
  end;

// *********************************************************************//
// DispIntf:  IEmbeddedObjectDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {29131569-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  IEmbeddedObjectDisp = dispinterface
    ['{29131569-2EED-1069-BF5D-00DD011186B7}']
    property Class_: WideString readonly dispid 1610743808;
    property FileSize: Integer readonly dispid 1610743809;
    property FitBelowFields: WordBool dispid 1610743810;
    property FitToWindow: WordBool dispid 1610743812;
    property Name: WideString readonly dispid 0;
    property Object_: OleVariant readonly dispid 1610743815;
    property Parent: IRichTextItem readonly dispid 1610743816;
    property RunReadOnly: WordBool dispid 1610743817;
    property Source: WideString readonly dispid 1610743819;
    property type_: EMBED_TYPE readonly dispid 1610743820;
    property Verbs: OleVariant readonly dispid 1610743821;
    function Activate(bShow: WordBool): IDispatch; dispid 1610743822;
    procedure DoVerb(const pVerb: WideString); dispid 1610743823;
    procedure ExtractFile(const pPath: WideString); dispid 1610743824;
    procedure Remove; dispid 1610743825;
  end;

// *********************************************************************//
// Interface: IRichTextNavigator
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {29131584-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  IRichTextNavigator = interface(IDispatch)
    ['{29131584-2EED-1069-BF5D-00DD011186B7}']
    function FindNthElement(lType: RT_ELEM; lOccurrence: Integer): WordBool; safecall;
    function FindFirstElement(lType: RT_ELEM): WordBool; safecall;
    function FindNextElement(lType: RT_ELEM; lOccurrence: Integer): WordBool; safecall;
    function FindLastElement(lType: RT_ELEM): WordBool; safecall;
    function FindFirstString(const pTarget: WideString; lOptions: Integer): WordBool; safecall;
    function FindNextString(const pTarget: WideString; lOptions: Integer): WordBool; safecall;
    function GetElement: OleVariant; safecall;
    function GetFirstElement(lType: RT_ELEM): OleVariant; safecall;
    function GetNextElement(lType: RT_ELEM; lOccurrence: Integer): OleVariant; safecall;
    function GetNthElement(lType: RT_ELEM; lOccurrence: Integer): OleVariant; safecall;
    function GetLastElement(lType: RT_ELEM): OleVariant; safecall;
    procedure SetPosition(pIRTElement: OleVariant); safecall;
    procedure SetPositionAtEnd(pIRTElement: OleVariant); safecall;
    procedure SetCharOffset(lOffset: Integer); safecall;
    function Clone: IRichTextNavigator; safecall;
  end;

// *********************************************************************//
// DispIntf:  IRichTextNavigatorDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {29131584-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  IRichTextNavigatorDisp = dispinterface
    ['{29131584-2EED-1069-BF5D-00DD011186B7}']
    function FindNthElement(lType: RT_ELEM; lOccurrence: Integer): WordBool; dispid 1610743808;
    function FindFirstElement(lType: RT_ELEM): WordBool; dispid 1610743809;
    function FindNextElement(lType: RT_ELEM; lOccurrence: Integer): WordBool; dispid 1610743810;
    function FindLastElement(lType: RT_ELEM): WordBool; dispid 1610743811;
    function FindFirstString(const pTarget: WideString; lOptions: Integer): WordBool; dispid 1610743812;
    function FindNextString(const pTarget: WideString; lOptions: Integer): WordBool; dispid 1610743813;
    function GetElement: OleVariant; dispid 1610743814;
    function GetFirstElement(lType: RT_ELEM): OleVariant; dispid 1610743815;
    function GetNextElement(lType: RT_ELEM; lOccurrence: Integer): OleVariant; dispid 1610743816;
    function GetNthElement(lType: RT_ELEM; lOccurrence: Integer): OleVariant; dispid 1610743817;
    function GetLastElement(lType: RT_ELEM): OleVariant; dispid 1610743818;
    procedure SetPosition(pIRTElement: OleVariant); dispid 1610743819;
    procedure SetPositionAtEnd(pIRTElement: OleVariant); dispid 1610743820;
    procedure SetCharOffset(lOffset: Integer); dispid 1610743821;
    function Clone: IRichTextNavigator; dispid 1610743822;
  end;

// *********************************************************************//
// Interface: IRichTextRange
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {29131585-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  IRichTextRange = interface(IDispatch)
    ['{29131585-2EED-1069-BF5D-00DD011186B7}']
    function Get_type_: RT_ELEM; safecall;
    function Get_TextRun: WideString; safecall;
    function Get_TextParagraph: WideString; safecall;
    function Get_Style: IRichTextStyle; safecall;
    function Get_Navigator: IRichTextNavigator; safecall;
    procedure SetStyle(const pIRTStyle: IRichTextStyle); safecall;
    procedure SetBegin(ppIRTElement: OleVariant); safecall;
    procedure SetEnd(ppIRTElement: OleVariant); safecall;
    procedure Reset(bBegin: WordBool; bEnd: WordBool); safecall;
    procedure Remove; safecall;
    function Clone: IRichTextRange; safecall;
    function FindandReplace(const pFindString: WideString; const pReplString: WideString; 
                            lOptions: Integer): Integer; safecall;
    property type_: RT_ELEM read Get_type_;
    property TextRun: WideString read Get_TextRun;
    property TextParagraph: WideString read Get_TextParagraph;
    property Style: IRichTextStyle read Get_Style;
    property Navigator: IRichTextNavigator read Get_Navigator;
  end;

// *********************************************************************//
// DispIntf:  IRichTextRangeDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {29131585-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  IRichTextRangeDisp = dispinterface
    ['{29131585-2EED-1069-BF5D-00DD011186B7}']
    property type_: RT_ELEM readonly dispid 1610743808;
    property TextRun: WideString readonly dispid 1610743809;
    property TextParagraph: WideString readonly dispid 1610743810;
    property Style: IRichTextStyle readonly dispid 1610743811;
    property Navigator: IRichTextNavigator readonly dispid 1610743812;
    procedure SetStyle(const pIRTStyle: IRichTextStyle); dispid 1610743813;
    procedure SetBegin(ppIRTElement: OleVariant); dispid 1610743814;
    procedure SetEnd(ppIRTElement: OleVariant); dispid 1610743815;
    procedure Reset(bBegin: WordBool; bEnd: WordBool); dispid 1610743816;
    procedure Remove; dispid 1610743817;
    function Clone: IRichTextRange; dispid 1610743818;
    function FindandReplace(const pFindString: WideString; const pReplString: WideString; 
                            lOptions: Integer): Integer; dispid 1610743819;
  end;

// *********************************************************************//
// Interface: IReplication
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {29131573-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  IReplication = interface(IDispatch)
    ['{29131573-2EED-1069-BF5D-00DD011186B7}']
    procedure Set_Abstract(pbFlag: WordBool); safecall;
    function Get_Abstract: WordBool; safecall;
    function Get_CutoffDate: OleVariant; safecall;
    function Get_CutoffDelete: WordBool; safecall;
    procedure Set_CutoffDelete(pbFlag: WordBool); safecall;
    function Get_CutoffInterval: Integer; safecall;
    procedure Set_CutoffInterval(plInterval: Integer); safecall;
    procedure Set_Disabled(pbFlag: WordBool); safecall;
    function Get_Disabled: WordBool; safecall;
    procedure Set_IgnoreDeletes(pbFlag: WordBool); safecall;
    function Get_IgnoreDeletes: WordBool; safecall;
    procedure Set_IgnoreDestDeletes(pbFlag: WordBool); safecall;
    function Get_IgnoreDestDeletes: WordBool; safecall;
    function Get_Priority: RP_PRIORITY; safecall;
    procedure Set_Priority(plPriority: RP_PRIORITY); safecall;
    procedure ClearHistory; safecall;
    procedure Reset; safecall;
    procedure Save; safecall;
    function Get_DontSendLocalSecurityUpdates: WordBool; safecall;
    procedure Set_DontSendLocalSecurityUpdates(bValue: WordBool); safecall;
    function GetEntry(const pSourceServer: WideString; const pDestinationServer: WideString; 
                      bCreate: WordBool): IReplicationEntry; safecall;
    property Abstract: WordBool read Get_Abstract write Set_Abstract;
    property CutoffDate: OleVariant read Get_CutoffDate;
    property CutoffDelete: WordBool read Get_CutoffDelete write Set_CutoffDelete;
    property CutoffInterval: Integer read Get_CutoffInterval write Set_CutoffInterval;
    property Disabled: WordBool read Get_Disabled write Set_Disabled;
    property IgnoreDeletes: WordBool read Get_IgnoreDeletes write Set_IgnoreDeletes;
    property IgnoreDestDeletes: WordBool read Get_IgnoreDestDeletes write Set_IgnoreDestDeletes;
    property Priority: RP_PRIORITY read Get_Priority write Set_Priority;
    property DontSendLocalSecurityUpdates: WordBool read Get_DontSendLocalSecurityUpdates write Set_DontSendLocalSecurityUpdates;
  end;

// *********************************************************************//
// DispIntf:  IReplicationDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {29131573-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  IReplicationDisp = dispinterface
    ['{29131573-2EED-1069-BF5D-00DD011186B7}']
    property Abstract: WordBool dispid 1610743808;
    property CutoffDate: OleVariant readonly dispid 1610743810;
    property CutoffDelete: WordBool dispid 1610743811;
    property CutoffInterval: Integer dispid 1610743813;
    property Disabled: WordBool dispid 1610743815;
    property IgnoreDeletes: WordBool dispid 1610743817;
    property IgnoreDestDeletes: WordBool dispid 1610743819;
    property Priority: RP_PRIORITY dispid 1610743821;
    procedure ClearHistory; dispid 1610743823;
    procedure Reset; dispid 1610743824;
    procedure Save; dispid 1610743825;
    property DontSendLocalSecurityUpdates: WordBool dispid 1610743826;
    function GetEntry(const pSourceServer: WideString; const pDestinationServer: WideString; 
                      bCreate: WordBool): IReplicationEntry; dispid 1610743828;
  end;

// *********************************************************************//
// Interface: IReplicationEntry
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {29131582-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  IReplicationEntry = interface(IDispatch)
    ['{29131582-2EED-1069-BF5D-00DD011186B7}']
    function Get_Source: WideString; safecall;
    function Get_Destination: WideString; safecall;
    function Get_Formula: WideString; safecall;
    procedure Set_Formula(const ppFormula: WideString); safecall;
    function Get_Views: WideString; safecall;
    procedure Set_Views(const ppViews: WideString); safecall;
    function Get_IsIncludeForms: WordBool; safecall;
    procedure Set_IsIncludeForms(pbIsIncludeForms: WordBool); safecall;
    function Get_IsIncludeAgents: WordBool; safecall;
    procedure Set_IsIncludeAgents(pbIsIncludeAgents: WordBool); safecall;
    function Get_IsIncludeFormulas: WordBool; safecall;
    procedure Set_IsIncludeFormulas(pbIsIncludeFormulas: WordBool); safecall;
    function Get_IsIncludeDocuments: WordBool; safecall;
    procedure Set_IsIncludeDocuments(pbIsIncludeDocuments: WordBool); safecall;
    function Get_IsIncludeACL: WordBool; safecall;
    procedure Set_IsIncludeACL(pbIsIncludeACL: WordBool); safecall;
    function Remove: Integer; safecall;
    function Save: Integer; safecall;
    property Source: WideString read Get_Source;
    property Destination: WideString read Get_Destination;
    property Formula: WideString read Get_Formula write Set_Formula;
    property Views: WideString read Get_Views write Set_Views;
    property IsIncludeForms: WordBool read Get_IsIncludeForms write Set_IsIncludeForms;
    property IsIncludeAgents: WordBool read Get_IsIncludeAgents write Set_IsIncludeAgents;
    property IsIncludeFormulas: WordBool read Get_IsIncludeFormulas write Set_IsIncludeFormulas;
    property IsIncludeDocuments: WordBool read Get_IsIncludeDocuments write Set_IsIncludeDocuments;
    property IsIncludeACL: WordBool read Get_IsIncludeACL write Set_IsIncludeACL;
  end;

// *********************************************************************//
// DispIntf:  IReplicationEntryDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {29131582-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  IReplicationEntryDisp = dispinterface
    ['{29131582-2EED-1069-BF5D-00DD011186B7}']
    property Source: WideString readonly dispid 1610743808;
    property Destination: WideString readonly dispid 1610743809;
    property Formula: WideString dispid 1610743810;
    property Views: WideString dispid 1610743812;
    property IsIncludeForms: WordBool dispid 1610743814;
    property IsIncludeAgents: WordBool dispid 1610743816;
    property IsIncludeFormulas: WordBool dispid 1610743818;
    property IsIncludeDocuments: WordBool dispid 1610743820;
    property IsIncludeACL: WordBool dispid 1610743822;
    function Remove: Integer; dispid 1610743824;
    function Save: Integer; dispid 1610743825;
  end;

// *********************************************************************//
// Interface: IOutline
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {29131570-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  IOutline = interface(IDispatch)
    ['{29131570-2EED-1069-BF5D-00DD011186B7}']
    function Get_Alias: WideString; safecall;
    procedure Set_Alias(const ppAlias: WideString); safecall;
    function Get_Comment: WideString; safecall;
    procedure Set_Comment(const ppComment: WideString); safecall;
    function Get_Name: WideString; safecall;
    procedure Set_Name(const ppName: WideString); safecall;
    function Get_ParentDatabase: IDatabase; safecall;
    function CreateEntry(const pEntryName: WideString; const pRefEntry: IOutlineEntry; 
                         bAfter: WordBool; bAsChild: WordBool): IOutlineEntry; safecall;
    function CreateEntryFrom(const pFromEntry: IOutlineEntry; const pRefEntry: IOutlineEntry; 
                             bAfter: WordBool; bAsChild: WordBool): IOutlineEntry; safecall;
    function GetFirst: IOutlineEntry; safecall;
    function GetLast: IOutlineEntry; safecall;
    function GetParent(const pIEntry: IOutlineEntry): IOutlineEntry; safecall;
    function GetNext(const pIEntry: IOutlineEntry): IOutlineEntry; safecall;
    function GetNextSibling(const pIEntry: IOutlineEntry): IOutlineEntry; safecall;
    function GetPrev(const pIEntry: IOutlineEntry): IOutlineEntry; safecall;
    function GetPrevSibling(const pIEntry: IOutlineEntry): IOutlineEntry; safecall;
    procedure MoveEntry(const pIEntry: IOutlineEntry; const pIRefEntry: IOutlineEntry; 
                        bAfter: WordBool; bAsChild: WordBool); safecall;
    procedure RemoveEntry(const pIEntry: IOutlineEntry); safecall;
    procedure Save; safecall;
    property Alias: WideString read Get_Alias write Set_Alias;
    property Comment: WideString read Get_Comment write Set_Comment;
    property Name: WideString read Get_Name write Set_Name;
    property ParentDatabase: IDatabase read Get_ParentDatabase;
  end;

// *********************************************************************//
// DispIntf:  IOutlineDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {29131570-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  IOutlineDisp = dispinterface
    ['{29131570-2EED-1069-BF5D-00DD011186B7}']
    property Alias: WideString dispid 1610743808;
    property Comment: WideString dispid 1610743810;
    property Name: WideString dispid 1610743812;
    property ParentDatabase: IDatabase readonly dispid 1610743814;
    function CreateEntry(const pEntryName: WideString; const pRefEntry: IOutlineEntry; 
                         bAfter: WordBool; bAsChild: WordBool): IOutlineEntry; dispid 1610743815;
    function CreateEntryFrom(const pFromEntry: IOutlineEntry; const pRefEntry: IOutlineEntry; 
                             bAfter: WordBool; bAsChild: WordBool): IOutlineEntry; dispid 1610743816;
    function GetFirst: IOutlineEntry; dispid 1610743817;
    function GetLast: IOutlineEntry; dispid 1610743818;
    function GetParent(const pIEntry: IOutlineEntry): IOutlineEntry; dispid 1610743819;
    function GetNext(const pIEntry: IOutlineEntry): IOutlineEntry; dispid 1610743820;
    function GetNextSibling(const pIEntry: IOutlineEntry): IOutlineEntry; dispid 1610743821;
    function GetPrev(const pIEntry: IOutlineEntry): IOutlineEntry; dispid 1610743822;
    function GetPrevSibling(const pIEntry: IOutlineEntry): IOutlineEntry; dispid 1610743823;
    procedure MoveEntry(const pIEntry: IOutlineEntry; const pIRefEntry: IOutlineEntry; 
                        bAfter: WordBool; bAsChild: WordBool); dispid 1610743824;
    procedure RemoveEntry(const pIEntry: IOutlineEntry); dispid 1610743825;
    procedure Save; dispid 1610743826;
  end;

// *********************************************************************//
// Interface: IOutlineEntry
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {29131571-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  IOutlineEntry = interface(IDispatch)
    ['{29131571-2EED-1069-BF5D-00DD011186B7}']
    function Get_Alias: WideString; safecall;
    procedure Set_Alias(const ppAlias: WideString); safecall;
    function Get_DATABASE: IDatabase; safecall;
    function Get_Document: IDocument; safecall;
    function Get_EntryClass: OE_CLASS; safecall;
    function Get_FrameText: WideString; safecall;
    procedure Set_FrameText(const ppText: WideString); safecall;
    function Get_Formula: WideString; safecall;
    function Get_HasChildren: WordBool; safecall;
    function Get_HideFormula: WideString; safecall;
    procedure Set_HideFormula(const ppFormula: WideString); safecall;
    function Get_ImagesText: WideString; safecall;
    procedure Set_ImagesText(const ppText: WideString); safecall;
    function Get_IsHiddenFromNotes: WordBool; safecall;
    procedure Set_IsHiddenFromNotes(pbFlag: WordBool); safecall;
    function Get_IsHiddenFromWeb: WordBool; safecall;
    procedure Set_IsHiddenFromWeb(pbFlag: WordBool); safecall;
    function Get_IsInThisDB: WordBool; safecall;
    function Get_IsPrivate: WordBool; safecall;
    function Get_KeepSelectionFocus: WordBool; safecall;
    procedure Set_KeepSelectionFocus(pbFlag: WordBool); safecall;
    function Get_Label_: WideString; safecall;
    procedure Set_Label_(const ppLabel: WideString); safecall;
    function Get_Level: Integer; safecall;
    function Get_NamedElement: WideString; safecall;
    function Get_Parent: IOutline; safecall;
    function Get_type_: OE_TYPE; safecall;
    function Get_URL: WideString; safecall;
    function Get_UseHideFormula: WordBool; safecall;
    procedure Set_UseHideFormula(pbFlag: WordBool); safecall;
    function Get_View: IView; safecall;
    procedure SetAction(const pFormula: WideString); safecall;
    procedure SetNamedElement(const pIDb: IDatabase; const pElementName: WideString; 
                              lClass: OE_CLASS); safecall;
    procedure SetNoteLink(const pIObj: IUnknown); safecall;
    procedure SetURL(const pURL: WideString); safecall;
    property Alias: WideString read Get_Alias write Set_Alias;
    property DATABASE: IDatabase read Get_DATABASE;
    property Document: IDocument read Get_Document;
    property EntryClass: OE_CLASS read Get_EntryClass;
    property FrameText: WideString read Get_FrameText write Set_FrameText;
    property Formula: WideString read Get_Formula;
    property HasChildren: WordBool read Get_HasChildren;
    property HideFormula: WideString read Get_HideFormula write Set_HideFormula;
    property ImagesText: WideString read Get_ImagesText write Set_ImagesText;
    property IsHiddenFromNotes: WordBool read Get_IsHiddenFromNotes write Set_IsHiddenFromNotes;
    property IsHiddenFromWeb: WordBool read Get_IsHiddenFromWeb write Set_IsHiddenFromWeb;
    property IsInThisDB: WordBool read Get_IsInThisDB;
    property IsPrivate: WordBool read Get_IsPrivate;
    property KeepSelectionFocus: WordBool read Get_KeepSelectionFocus write Set_KeepSelectionFocus;
    property Label_: WideString read Get_Label_ write Set_Label_;
    property Level: Integer read Get_Level;
    property NamedElement: WideString read Get_NamedElement;
    property Parent: IOutline read Get_Parent;
    property type_: OE_TYPE read Get_type_;
    property URL: WideString read Get_URL;
    property UseHideFormula: WordBool read Get_UseHideFormula write Set_UseHideFormula;
    property View: IView read Get_View;
  end;

// *********************************************************************//
// DispIntf:  IOutlineEntryDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {29131571-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  IOutlineEntryDisp = dispinterface
    ['{29131571-2EED-1069-BF5D-00DD011186B7}']
    property Alias: WideString dispid 1610743808;
    property DATABASE: IDatabase readonly dispid 1610743810;
    property Document: IDocument readonly dispid 1610743811;
    property EntryClass: OE_CLASS readonly dispid 1610743812;
    property FrameText: WideString dispid 1610743813;
    property Formula: WideString readonly dispid 1610743815;
    property HasChildren: WordBool readonly dispid 1610743816;
    property HideFormula: WideString dispid 1610743817;
    property ImagesText: WideString dispid 1610743819;
    property IsHiddenFromNotes: WordBool dispid 1610743821;
    property IsHiddenFromWeb: WordBool dispid 1610743823;
    property IsInThisDB: WordBool readonly dispid 1610743825;
    property IsPrivate: WordBool readonly dispid 1610743826;
    property KeepSelectionFocus: WordBool dispid 1610743827;
    property Label_: WideString dispid 1610743829;
    property Level: Integer readonly dispid 1610743831;
    property NamedElement: WideString readonly dispid 1610743832;
    property Parent: IOutline readonly dispid 1610743833;
    property type_: OE_TYPE readonly dispid 1610743834;
    property URL: WideString readonly dispid 1610743835;
    property UseHideFormula: WordBool dispid 1610743836;
    property View: IView readonly dispid 1610743838;
    procedure SetAction(const pFormula: WideString); dispid 1610743839;
    procedure SetNamedElement(const pIDb: IDatabase; const pElementName: WideString; 
                              lClass: OE_CLASS); dispid 1610743840;
    procedure SetNoteLink(const pIObj: IUnknown); dispid 1610743841;
    procedure SetURL(const pURL: WideString); dispid 1610743842;
  end;

// *********************************************************************//
// Interface: IForm
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {2913156A-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  IForm = interface(IDispatch)
    ['{2913156A-2EED-1069-BF5D-00DD011186B7}']
    function Get_Aliases: OleVariant; safecall;
    function Get_Fields: OleVariant; safecall;
    function Get_FormUsers: OleVariant; safecall;
    procedure Set_FormUsers(pUsers: OleVariant); safecall;
    function Get_HttpURL: WideString; safecall;
    function Get_IsSubForm: WordBool; safecall;
    function Get_Name: WideString; safecall;
    function Get_NotesURL: WideString; safecall;
    function Get_Parent: IDatabase; safecall;
    function Get_ProtectReaders: WordBool; safecall;
    procedure Set_ProtectReaders(pbFlag: WordBool); safecall;
    function Get_ProtectUsers: WordBool; safecall;
    procedure Set_ProtectUsers(pbFlag: WordBool); safecall;
    function Get_Readers: OleVariant; safecall;
    procedure Set_Readers(pReaders: OleVariant); safecall;
    function GetFieldType(const pName: WideString): FIELD_TYPE; safecall;
    procedure Remove; safecall;
    function Lock(var pName: OleVariant; bProvisionalOK: WordBool): WordBool; safecall;
    function LockProvisional(var pName: OleVariant): WordBool; safecall;
    procedure Unlock; safecall;
    function Get_LockHolders: OleVariant; safecall;
    property Aliases: OleVariant read Get_Aliases;
    property Fields: OleVariant read Get_Fields;
    property FormUsers: OleVariant read Get_FormUsers write Set_FormUsers;
    property HttpURL: WideString read Get_HttpURL;
    property IsSubForm: WordBool read Get_IsSubForm;
    property Name: WideString read Get_Name;
    property NotesURL: WideString read Get_NotesURL;
    property Parent: IDatabase read Get_Parent;
    property ProtectReaders: WordBool read Get_ProtectReaders write Set_ProtectReaders;
    property ProtectUsers: WordBool read Get_ProtectUsers write Set_ProtectUsers;
    property Readers: OleVariant read Get_Readers write Set_Readers;
    property LockHolders: OleVariant read Get_LockHolders;
  end;

// *********************************************************************//
// DispIntf:  IFormDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {2913156A-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  IFormDisp = dispinterface
    ['{2913156A-2EED-1069-BF5D-00DD011186B7}']
    property Aliases: OleVariant readonly dispid 1610743808;
    property Fields: OleVariant readonly dispid 1610743809;
    property FormUsers: OleVariant dispid 1610743810;
    property HttpURL: WideString readonly dispid 1610743812;
    property IsSubForm: WordBool readonly dispid 1610743813;
    property Name: WideString readonly dispid 0;
    property NotesURL: WideString readonly dispid 1610743815;
    property Parent: IDatabase readonly dispid 1610743816;
    property ProtectReaders: WordBool dispid 1610743817;
    property ProtectUsers: WordBool dispid 1610743819;
    property Readers: OleVariant dispid 1610743821;
    function GetFieldType(const pName: WideString): FIELD_TYPE; dispid 1610743823;
    procedure Remove; dispid 1610743824;
    function Lock(var pName: OleVariant; bProvisionalOK: WordBool): WordBool; dispid 1610743825;
    function LockProvisional(var pName: OleVariant): WordBool; dispid 1610743826;
    procedure Unlock; dispid 1610743827;
    property LockHolders: OleVariant readonly dispid 1610743828;
  end;

// *********************************************************************//
// Interface: INoteCollection
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {29131589-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  INoteCollection = interface(IDispatch)
    ['{29131589-2EED-1069-BF5D-00DD011186B7}']
    function Get_SelectDocuments: WordBool; safecall;
    procedure Set_SelectDocuments(pbFlag: WordBool); safecall;
    function Get_SelectProfiles: WordBool; safecall;
    procedure Set_SelectProfiles(pbFlag: WordBool); safecall;
    function Get_SelectForms: WordBool; safecall;
    procedure Set_SelectForms(pbFlag: WordBool); safecall;
    function Get_SelectSubforms: WordBool; safecall;
    procedure Set_SelectSubforms(pbFlag: WordBool); safecall;
    function Get_SelectActions: WordBool; safecall;
    procedure Set_SelectActions(pbFlag: WordBool); safecall;
    function Get_SelectFramesets: WordBool; safecall;
    procedure Set_SelectFramesets(pbFlag: WordBool); safecall;
    function Get_SelectPages: WordBool; safecall;
    procedure Set_SelectPages(pbFlag: WordBool); safecall;
    function Get_SelectImageResources: WordBool; safecall;
    procedure Set_SelectImageResources(pbFlag: WordBool); safecall;
    function Get_SelectStyleSheetResources: WordBool; safecall;
    procedure Set_SelectStyleSheetResources(pbFlag: WordBool); safecall;
    function Get_SelectJavaResources: WordBool; safecall;
    procedure Set_SelectJavaResources(pbFlag: WordBool); safecall;
    function Get_SelectMiscFormatElements: WordBool; safecall;
    procedure Set_SelectMiscFormatElements(pbFlag: WordBool); safecall;
    function Get_SelectViews: WordBool; safecall;
    procedure Set_SelectViews(pbFlag: WordBool); safecall;
    function Get_SelectFolders: WordBool; safecall;
    procedure Set_SelectFolders(pbFlag: WordBool); safecall;
    function Get_SelectNavigators: WordBool; safecall;
    procedure Set_SelectNavigators(pbFlag: WordBool); safecall;
    function Get_SelectMiscIndexElements: WordBool; safecall;
    procedure Set_SelectMiscIndexElements(pbFlag: WordBool); safecall;
    function Get_SelectIcon: WordBool; safecall;
    procedure Set_SelectIcon(pbFlag: WordBool); safecall;
    function Get_SelectAgents: WordBool; safecall;
    procedure Set_SelectAgents(pbFlag: WordBool); safecall;
    function Get_SelectOutlines: WordBool; safecall;
    procedure Set_SelectOutlines(pbFlag: WordBool); safecall;
    function Get_SelectDatabaseScript: WordBool; safecall;
    procedure Set_SelectDatabaseScript(pbFlag: WordBool); safecall;
    function Get_SelectScriptLibraries: WordBool; safecall;
    procedure Set_SelectScriptLibraries(pbFlag: WordBool); safecall;
    function Get_SelectDataConnections: WordBool; safecall;
    procedure Set_SelectDataConnections(pbFlag: WordBool); safecall;
    function Get_SelectMiscCodeElements: WordBool; safecall;
    procedure Set_SelectMiscCodeElements(pbFlag: WordBool); safecall;
    function Get_SelectSharedFields: WordBool; safecall;
    procedure Set_SelectSharedFields(pbFlag: WordBool); safecall;
    function Get_SelectHelpAbout: WordBool; safecall;
    procedure Set_SelectHelpAbout(pbFlag: WordBool); safecall;
    function Get_SelectHelpUsing: WordBool; safecall;
    procedure Set_SelectHelpUsing(pbFlag: WordBool); safecall;
    function Get_SelectHelpIndex: WordBool; safecall;
    procedure Set_SelectHelpIndex(pbFlag: WordBool); safecall;
    function Get_SelectReplicationFormulas: WordBool; safecall;
    procedure Set_SelectReplicationFormulas(pbFlag: WordBool); safecall;
    function Get_SelectACL: WordBool; safecall;
    procedure Set_SelectACL(pbFlag: WordBool); safecall;
    function Get_SelectionFormula: WideString; safecall;
    procedure Set_SelectionFormula(const ppSelectionFormula: WideString); safecall;
    function Get_SinceTime: OleVariant; safecall;
    procedure Set_SinceTime(pDate: OleVariant); safecall;
    function Get_LastBuildTime: OleVariant; safecall;
    function Get_Count: Integer; safecall;
    function Get_Parent: IDatabase; safecall;
    procedure SelectAllNotes(bFlag: WordBool); safecall;
    procedure SelectAllDataNotes(bFlag: WordBool); safecall;
    procedure SelectAllAdminNotes(bFlag: WordBool); safecall;
    procedure SelectAllDesignElements(bFlag: WordBool); safecall;
    procedure SelectAllFormatElements(bFlag: WordBool); safecall;
    procedure SelectAllIndexElements(bFlag: WordBool); safecall;
    procedure SelectAllCodeElements(bFlag: WordBool); safecall;
    procedure BuildCollection; safecall;
    procedure ClearCollection; safecall;
    procedure Add(NoteIds: OleVariant); safecall;
    procedure Remove(NoteIds: OleVariant); safecall;
    procedure Intersect(NoteIds: OleVariant); safecall;
    function GetFirstNoteId: WideString; safecall;
    function GetNextNoteId(const pNoteid: WideString): WideString; safecall;
    property SelectDocuments: WordBool read Get_SelectDocuments write Set_SelectDocuments;
    property SelectProfiles: WordBool read Get_SelectProfiles write Set_SelectProfiles;
    property SelectForms: WordBool read Get_SelectForms write Set_SelectForms;
    property SelectSubforms: WordBool read Get_SelectSubforms write Set_SelectSubforms;
    property SelectActions: WordBool read Get_SelectActions write Set_SelectActions;
    property SelectFramesets: WordBool read Get_SelectFramesets write Set_SelectFramesets;
    property SelectPages: WordBool read Get_SelectPages write Set_SelectPages;
    property SelectImageResources: WordBool read Get_SelectImageResources write Set_SelectImageResources;
    property SelectStyleSheetResources: WordBool read Get_SelectStyleSheetResources write Set_SelectStyleSheetResources;
    property SelectJavaResources: WordBool read Get_SelectJavaResources write Set_SelectJavaResources;
    property SelectMiscFormatElements: WordBool read Get_SelectMiscFormatElements write Set_SelectMiscFormatElements;
    property SelectViews: WordBool read Get_SelectViews write Set_SelectViews;
    property SelectFolders: WordBool read Get_SelectFolders write Set_SelectFolders;
    property SelectNavigators: WordBool read Get_SelectNavigators write Set_SelectNavigators;
    property SelectMiscIndexElements: WordBool read Get_SelectMiscIndexElements write Set_SelectMiscIndexElements;
    property SelectIcon: WordBool read Get_SelectIcon write Set_SelectIcon;
    property SelectAgents: WordBool read Get_SelectAgents write Set_SelectAgents;
    property SelectOutlines: WordBool read Get_SelectOutlines write Set_SelectOutlines;
    property SelectDatabaseScript: WordBool read Get_SelectDatabaseScript write Set_SelectDatabaseScript;
    property SelectScriptLibraries: WordBool read Get_SelectScriptLibraries write Set_SelectScriptLibraries;
    property SelectDataConnections: WordBool read Get_SelectDataConnections write Set_SelectDataConnections;
    property SelectMiscCodeElements: WordBool read Get_SelectMiscCodeElements write Set_SelectMiscCodeElements;
    property SelectSharedFields: WordBool read Get_SelectSharedFields write Set_SelectSharedFields;
    property SelectHelpAbout: WordBool read Get_SelectHelpAbout write Set_SelectHelpAbout;
    property SelectHelpUsing: WordBool read Get_SelectHelpUsing write Set_SelectHelpUsing;
    property SelectHelpIndex: WordBool read Get_SelectHelpIndex write Set_SelectHelpIndex;
    property SelectReplicationFormulas: WordBool read Get_SelectReplicationFormulas write Set_SelectReplicationFormulas;
    property SelectACL: WordBool read Get_SelectACL write Set_SelectACL;
    property SelectionFormula: WideString read Get_SelectionFormula write Set_SelectionFormula;
    property SinceTime: OleVariant read Get_SinceTime write Set_SinceTime;
    property LastBuildTime: OleVariant read Get_LastBuildTime;
    property Count: Integer read Get_Count;
    property Parent: IDatabase read Get_Parent;
  end;

// *********************************************************************//
// DispIntf:  INoteCollectionDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {29131589-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  INoteCollectionDisp = dispinterface
    ['{29131589-2EED-1069-BF5D-00DD011186B7}']
    property SelectDocuments: WordBool dispid 1610743808;
    property SelectProfiles: WordBool dispid 1610743810;
    property SelectForms: WordBool dispid 1610743812;
    property SelectSubforms: WordBool dispid 1610743814;
    property SelectActions: WordBool dispid 1610743816;
    property SelectFramesets: WordBool dispid 1610743818;
    property SelectPages: WordBool dispid 1610743820;
    property SelectImageResources: WordBool dispid 1610743822;
    property SelectStyleSheetResources: WordBool dispid 1610743824;
    property SelectJavaResources: WordBool dispid 1610743826;
    property SelectMiscFormatElements: WordBool dispid 1610743828;
    property SelectViews: WordBool dispid 1610743830;
    property SelectFolders: WordBool dispid 1610743832;
    property SelectNavigators: WordBool dispid 1610743834;
    property SelectMiscIndexElements: WordBool dispid 1610743836;
    property SelectIcon: WordBool dispid 1610743838;
    property SelectAgents: WordBool dispid 1610743840;
    property SelectOutlines: WordBool dispid 1610743842;
    property SelectDatabaseScript: WordBool dispid 1610743844;
    property SelectScriptLibraries: WordBool dispid 1610743846;
    property SelectDataConnections: WordBool dispid 1610743848;
    property SelectMiscCodeElements: WordBool dispid 1610743850;
    property SelectSharedFields: WordBool dispid 1610743852;
    property SelectHelpAbout: WordBool dispid 1610743854;
    property SelectHelpUsing: WordBool dispid 1610743856;
    property SelectHelpIndex: WordBool dispid 1610743858;
    property SelectReplicationFormulas: WordBool dispid 1610743860;
    property SelectACL: WordBool dispid 1610743862;
    property SelectionFormula: WideString dispid 1610743864;
    property SinceTime: OleVariant dispid 1610743866;
    property LastBuildTime: OleVariant readonly dispid 1610743868;
    property Count: Integer readonly dispid 1610743869;
    property Parent: IDatabase readonly dispid 1610743870;
    procedure SelectAllNotes(bFlag: WordBool); dispid 1610743871;
    procedure SelectAllDataNotes(bFlag: WordBool); dispid 1610743872;
    procedure SelectAllAdminNotes(bFlag: WordBool); dispid 1610743873;
    procedure SelectAllDesignElements(bFlag: WordBool); dispid 1610743874;
    procedure SelectAllFormatElements(bFlag: WordBool); dispid 1610743875;
    procedure SelectAllIndexElements(bFlag: WordBool); dispid 1610743876;
    procedure SelectAllCodeElements(bFlag: WordBool); dispid 1610743877;
    procedure BuildCollection; dispid 1610743878;
    procedure ClearCollection; dispid 1610743879;
    procedure Add(NoteIds: OleVariant); dispid 1610743880;
    procedure Remove(NoteIds: OleVariant); dispid 1610743881;
    procedure Intersect(NoteIds: OleVariant); dispid 1610743882;
    function GetFirstNoteId: WideString; dispid 1610743883;
    function GetNextNoteId(const pNoteid: WideString): WideString; dispid 1610743884;
  end;

// *********************************************************************//
// Interface: IACLEntry
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {29131561-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  IACLEntry = interface(IDispatch)
    ['{29131561-2EED-1069-BF5D-00DD011186B7}']
    procedure Set_CanCreateDocuments(pbFlag: WordBool); safecall;
    function Get_CanCreateDocuments: WordBool; safecall;
    procedure Set_CanCreateLSOrJavaAgent(pbFlag: WordBool); safecall;
    function Get_CanCreateLSOrJavaAgent: WordBool; safecall;
    procedure Set_CanCreatePersonalAgent(pbFlag: WordBool); safecall;
    function Get_CanCreatePersonalAgent: WordBool; safecall;
    procedure Set_CanCreatePersonalFolder(pbFlag: WordBool); safecall;
    function Get_CanCreatePersonalFolder: WordBool; safecall;
    procedure Set_CanCreateSharedFolder(pbFlag: WordBool); safecall;
    function Get_CanCreateSharedFolder: WordBool; safecall;
    procedure Set_CanDeleteDocuments(pbFlag: WordBool); safecall;
    function Get_CanDeleteDocuments: WordBool; safecall;
    procedure Set_IsAdminReaderAuthor(pbFlag: WordBool); safecall;
    function Get_IsAdminReaderAuthor: WordBool; safecall;
    procedure Set_IsAdminServer(pbFlag: WordBool); safecall;
    function Get_IsAdminServer: WordBool; safecall;
    procedure Set_IsGroup(pbFlag: WordBool); safecall;
    function Get_IsGroup: WordBool; safecall;
    procedure Set_IsPerson(pbFlag: WordBool); safecall;
    function Get_IsPerson: WordBool; safecall;
    procedure Set_IsPublicReader(pbFlag: WordBool); safecall;
    function Get_IsPublicReader: WordBool; safecall;
    procedure Set_IsPublicWriter(pbFlag: WordBool); safecall;
    function Get_IsPublicWriter: WordBool; safecall;
    procedure Set_IsServer(pbFlag: WordBool); safecall;
    function Get_IsServer: WordBool; safecall;
    function Get_Level: ACLLEVEL; safecall;
    procedure Set_Level(plLevel: ACLLEVEL); safecall;
    function Get_Name: WideString; safecall;
    procedure Set_Name(const ppName: WideString); safecall;
    function Get_NameObject: IName; safecall;
    function Get_Parent: IACL; safecall;
    function Get_Roles: OleVariant; safecall;
    function Get_UserType: LSXBE_ACLTYPE; safecall;
    procedure Set_UserType(plType: LSXBE_ACLTYPE); safecall;
    procedure DisableRole(const pRole: WideString); safecall;
    procedure EnableRole(const pRole: WideString); safecall;
    function IsRoleEnabled(const pRole: WideString): WordBool; safecall;
    procedure Remove; safecall;
    procedure Set_CanReplicateOrCopyDocuments(pbFlag: WordBool); safecall;
    function Get_CanReplicateOrCopyDocuments: WordBool; safecall;
    property CanCreateDocuments: WordBool read Get_CanCreateDocuments write Set_CanCreateDocuments;
    property CanCreateLSOrJavaAgent: WordBool read Get_CanCreateLSOrJavaAgent write Set_CanCreateLSOrJavaAgent;
    property CanCreatePersonalAgent: WordBool read Get_CanCreatePersonalAgent write Set_CanCreatePersonalAgent;
    property CanCreatePersonalFolder: WordBool read Get_CanCreatePersonalFolder write Set_CanCreatePersonalFolder;
    property CanCreateSharedFolder: WordBool read Get_CanCreateSharedFolder write Set_CanCreateSharedFolder;
    property CanDeleteDocuments: WordBool read Get_CanDeleteDocuments write Set_CanDeleteDocuments;
    property IsAdminReaderAuthor: WordBool read Get_IsAdminReaderAuthor write Set_IsAdminReaderAuthor;
    property IsAdminServer: WordBool read Get_IsAdminServer write Set_IsAdminServer;
    property IsGroup: WordBool read Get_IsGroup write Set_IsGroup;
    property IsPerson: WordBool read Get_IsPerson write Set_IsPerson;
    property IsPublicReader: WordBool read Get_IsPublicReader write Set_IsPublicReader;
    property IsPublicWriter: WordBool read Get_IsPublicWriter write Set_IsPublicWriter;
    property IsServer: WordBool read Get_IsServer write Set_IsServer;
    property Level: ACLLEVEL read Get_Level write Set_Level;
    property Name: WideString read Get_Name write Set_Name;
    property NameObject: IName read Get_NameObject;
    property Parent: IACL read Get_Parent;
    property Roles: OleVariant read Get_Roles;
    property UserType: LSXBE_ACLTYPE read Get_UserType write Set_UserType;
    property CanReplicateOrCopyDocuments: WordBool read Get_CanReplicateOrCopyDocuments write Set_CanReplicateOrCopyDocuments;
  end;

// *********************************************************************//
// DispIntf:  IACLEntryDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {29131561-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  IACLEntryDisp = dispinterface
    ['{29131561-2EED-1069-BF5D-00DD011186B7}']
    property CanCreateDocuments: WordBool dispid 1610743808;
    property CanCreateLSOrJavaAgent: WordBool dispid 1610743810;
    property CanCreatePersonalAgent: WordBool dispid 1610743812;
    property CanCreatePersonalFolder: WordBool dispid 1610743814;
    property CanCreateSharedFolder: WordBool dispid 1610743816;
    property CanDeleteDocuments: WordBool dispid 1610743818;
    property IsAdminReaderAuthor: WordBool dispid 1610743820;
    property IsAdminServer: WordBool dispid 1610743822;
    property IsGroup: WordBool dispid 1610743824;
    property IsPerson: WordBool dispid 1610743826;
    property IsPublicReader: WordBool dispid 1610743828;
    property IsPublicWriter: WordBool dispid 1610743830;
    property IsServer: WordBool dispid 1610743832;
    property Level: ACLLEVEL dispid 1610743834;
    property Name: WideString dispid 0;
    property NameObject: IName readonly dispid 1610743838;
    property Parent: IACL readonly dispid 1610743839;
    property Roles: OleVariant readonly dispid 1610743840;
    property UserType: LSXBE_ACLTYPE dispid 1610743841;
    procedure DisableRole(const pRole: WideString); dispid 1610743843;
    procedure EnableRole(const pRole: WideString); dispid 1610743844;
    function IsRoleEnabled(const pRole: WideString): WordBool; dispid 1610743845;
    procedure Remove; dispid 1610743846;
    property CanReplicateOrCopyDocuments: WordBool dispid 1610743847;
  end;

// *********************************************************************//
// Interface: IRichTextTab
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {29131577-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  IRichTextTab = interface(IDispatch)
    ['{29131577-2EED-1069-BF5D-00DD011186B7}']
    function Get_Position: Integer; safecall;
    function Get_type_: RT_TAB; safecall;
    procedure Clear; safecall;
    property Position: Integer read Get_Position;
    property type_: RT_TAB read Get_type_;
  end;

// *********************************************************************//
// DispIntf:  IRichTextTabDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {29131577-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  IRichTextTabDisp = dispinterface
    ['{29131577-2EED-1069-BF5D-00DD011186B7}']
    property Position: Integer readonly dispid 1610743808;
    property type_: RT_TAB readonly dispid 1610743809;
    procedure Clear; dispid 1610743810;
  end;

// *********************************************************************//
// Interface: IRichTextDoclink
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {29131586-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  IRichTextDoclink = interface(IDispatch)
    ['{29131586-2EED-1069-BF5D-00DD011186B7}']
    function Get_DBReplicaID: WideString; safecall;
    procedure Set_DBReplicaID(const pDBReplicaID: WideString); safecall;
    function Get_ViewUNID: WideString; safecall;
    procedure Set_ViewUNID(const pViewUNID: WideString); safecall;
    function Get_DocUNID: WideString; safecall;
    procedure Set_DocUNID(const pDocUNID: WideString); safecall;
    function Get_DisplayComment: WideString; safecall;
    procedure Set_DisplayComment(const pDisplayComment: WideString); safecall;
    function Get_ServerHint: WideString; safecall;
    procedure Set_ServerHint(const pServerHint: WideString); safecall;
    function Get_HotSpotText: WideString; safecall;
    procedure Set_HotSpotText(const pHotspottext: WideString); safecall;
    function Get_HotSpotTextStyle: IRichTextStyle; safecall;
    procedure Remove; safecall;
    procedure SetHotSpotTextStyle(const pIRTStyle: IRichTextStyle); safecall;
    property DBReplicaID: WideString read Get_DBReplicaID write Set_DBReplicaID;
    property ViewUNID: WideString read Get_ViewUNID write Set_ViewUNID;
    property DocUNID: WideString read Get_DocUNID write Set_DocUNID;
    property DisplayComment: WideString read Get_DisplayComment write Set_DisplayComment;
    property ServerHint: WideString read Get_ServerHint write Set_ServerHint;
    property HotSpotText: WideString read Get_HotSpotText write Set_HotSpotText;
    property HotSpotTextStyle: IRichTextStyle read Get_HotSpotTextStyle;
  end;

// *********************************************************************//
// DispIntf:  IRichTextDoclinkDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {29131586-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  IRichTextDoclinkDisp = dispinterface
    ['{29131586-2EED-1069-BF5D-00DD011186B7}']
    property DBReplicaID: WideString dispid 1610743808;
    property ViewUNID: WideString dispid 1610743810;
    property DocUNID: WideString dispid 1610743812;
    property DisplayComment: WideString dispid 1610743814;
    property ServerHint: WideString dispid 1610743816;
    property HotSpotText: WideString dispid 1610743818;
    property HotSpotTextStyle: IRichTextStyle readonly dispid 1610743820;
    procedure Remove; dispid 1610743821;
    procedure SetHotSpotTextStyle(const pIRTStyle: IRichTextStyle); dispid 1610743822;
  end;

// *********************************************************************//
// Interface: IRichTextSection
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {29131587-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  IRichTextSection = interface(IDispatch)
    ['{29131587-2EED-1069-BF5D-00DD011186B7}']
    function Get_Title: WideString; safecall;
    procedure Set_Title(const pTitle: WideString); safecall;
    function Get_IsExpanded: WordBool; safecall;
    procedure Set_IsExpanded(pbExpanded: WordBool); safecall;
    function Get_TitleStyle: IRichTextStyle; safecall;
    procedure SetTitleStyle(const pIRTStyle: IRichTextStyle); safecall;
    function Get_BarColor: IColorObject; safecall;
    procedure SetBarColor(const pIColorObj: IColorObject); safecall;
    procedure Remove; safecall;
    property Title: WideString read Get_Title write Set_Title;
    property IsExpanded: WordBool read Get_IsExpanded write Set_IsExpanded;
    property TitleStyle: IRichTextStyle read Get_TitleStyle;
    property BarColor: IColorObject read Get_BarColor;
  end;

// *********************************************************************//
// DispIntf:  IRichTextSectionDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {29131587-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  IRichTextSectionDisp = dispinterface
    ['{29131587-2EED-1069-BF5D-00DD011186B7}']
    property Title: WideString dispid 1610743808;
    property IsExpanded: WordBool dispid 1610743810;
    property TitleStyle: IRichTextStyle readonly dispid 1610743812;
    procedure SetTitleStyle(const pIRTStyle: IRichTextStyle); dispid 1610743813;
    property BarColor: IColorObject readonly dispid 1610743814;
    procedure SetBarColor(const pIColorObj: IColorObject); dispid 1610743815;
    procedure Remove; dispid 1610743816;
  end;

// *********************************************************************//
// Interface: IRichTextTable
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {29131588-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  IRichTextTable = interface(IDispatch)
    ['{29131588-2EED-1069-BF5D-00DD011186B7}']
    function Get_Style: RT_TBLSTYLE; safecall;
    function Get_RowCount: Integer; safecall;
    function Get_ColumnCount: Integer; safecall;
    function Get_RightToLeft: WordBool; safecall;
    procedure Set_RightToLeft(pbRightToLeft: WordBool); safecall;
    function Get_RowLabels: OleVariant; safecall;
    procedure Set_RowLabels(pRowLabels: OleVariant); safecall;
    function Get_Color: IColorObject; safecall;
    function Get_AlternateColor: IColorObject; safecall;
    procedure AddRow(lCount: Integer; lTargetRow: Integer); safecall;
    procedure RemoveRow(lCount: Integer; lTargetRow: Integer); safecall;
    procedure Remove; safecall;
    procedure SetColor(const pIColorObj: IColorObject); safecall;
    procedure SetAlternateColor(const pIColorObj: IColorObject); safecall;
    procedure Set_Style(plStyle: RT_TBLSTYLE); safecall;
    property Style: RT_TBLSTYLE read Get_Style write Set_Style;
    property RowCount: Integer read Get_RowCount;
    property ColumnCount: Integer read Get_ColumnCount;
    property RightToLeft: WordBool read Get_RightToLeft write Set_RightToLeft;
    property RowLabels: OleVariant read Get_RowLabels write Set_RowLabels;
    property Color: IColorObject read Get_Color;
    property AlternateColor: IColorObject read Get_AlternateColor;
  end;

// *********************************************************************//
// DispIntf:  IRichTextTableDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {29131588-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  IRichTextTableDisp = dispinterface
    ['{29131588-2EED-1069-BF5D-00DD011186B7}']
    property Style: RT_TBLSTYLE dispid 1610743808;
    property RowCount: Integer readonly dispid 1610743809;
    property ColumnCount: Integer readonly dispid 1610743810;
    property RightToLeft: WordBool dispid 1610743811;
    property RowLabels: OleVariant dispid 1610743813;
    property Color: IColorObject readonly dispid 1610743815;
    property AlternateColor: IColorObject readonly dispid 1610743816;
    procedure AddRow(lCount: Integer; lTargetRow: Integer); dispid 1610743817;
    procedure RemoveRow(lCount: Integer; lTargetRow: Integer); dispid 1610743818;
    procedure Remove; dispid 1610743819;
    procedure SetColor(const pIColorObj: IColorObject); dispid 1610743820;
    procedure SetAlternateColor(const pIColorObj: IColorObject); dispid 1610743821;
  end;

// *********************************************************************//
// The Class CoNotesACL provides a Create and CreateRemote method to          
// create instances of the default interface IACL exposed by              
// the CoClass NotesACL. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoNotesACL = class
    class function Create: IACL;
    class function CreateRemote(const MachineName: string): IACL;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TNotesACL
// Help String      : 
// Default Interface: IACL
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TNotesACLProperties= class;
{$ENDIF}
  TNotesACL = class(TOleServer)
  private
    FIntf:        IACL;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TNotesACLProperties;
    function      GetServerProperties: TNotesACLProperties;
{$ENDIF}
    function      GetDefaultInterface: IACL;
  protected
    procedure InitServerData; override;
    function Get_InternetLevel: ACLLEVEL;
    procedure Set_InternetLevel(plLevel: ACLLEVEL);
    function Get_Parent: IDatabase;
    function Get_Roles: OleVariant;
    procedure Set_UniformAccess(pbFlag: WordBool);
    function Get_UniformAccess: WordBool;
    procedure Set_AdministrationServer(const ppName: WideString);
    function Get_AdministrationServer: WideString;
    procedure Set_IsAdminNames(pbFlag: WordBool);
    function Get_IsAdminNames: WordBool;
    procedure Set_IsAdminReaderAuthor(pbFlag: WordBool);
    function Get_IsAdminReaderAuthor: WordBool;
    procedure Set_IsExtendedAccess(pbFlag: WordBool);
    function Get_IsExtendedAccess: WordBool;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IACL);
    procedure Disconnect; override;
    procedure AddRole(const pRole: WideString);
    function CreateACLEntry(const pName: WideString; lLevel: ACLLEVEL): IACLEntry;
    procedure DeleteRole(const pRole: WideString);
    function GetEntry(const pEname: WideString): IACLEntry;
    function GetFirstEntry: IACLEntry;
    function GetNextEntry(const pIEntry: IACLEntry): IACLEntry;
    procedure RenameRole(const pOldname: WideString; const pNewname: WideString);
    procedure RemoveACLEntry(const pName: WideString);
    procedure Save;
    property DefaultInterface: IACL read GetDefaultInterface;
    property Parent: IDatabase read Get_Parent;
    property Roles: OleVariant read Get_Roles;
    property InternetLevel: ACLLEVEL read Get_InternetLevel write Set_InternetLevel;
    property UniformAccess: WordBool read Get_UniformAccess write Set_UniformAccess;
    property AdministrationServer: WideString read Get_AdministrationServer write Set_AdministrationServer;
    property IsAdminNames: WordBool read Get_IsAdminNames write Set_IsAdminNames;
    property IsAdminReaderAuthor: WordBool read Get_IsAdminReaderAuthor write Set_IsAdminReaderAuthor;
    property IsExtendedAccess: WordBool read Get_IsExtendedAccess write Set_IsExtendedAccess;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TNotesACLProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TNotesACL
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TNotesACLProperties = class(TPersistent)
  private
    FServer:    TNotesACL;
    function    GetDefaultInterface: IACL;
    constructor Create(AServer: TNotesACL);
  protected
    function Get_InternetLevel: ACLLEVEL;
    procedure Set_InternetLevel(plLevel: ACLLEVEL);
    function Get_Parent: IDatabase;
    function Get_Roles: OleVariant;
    procedure Set_UniformAccess(pbFlag: WordBool);
    function Get_UniformAccess: WordBool;
    procedure Set_AdministrationServer(const ppName: WideString);
    function Get_AdministrationServer: WideString;
    procedure Set_IsAdminNames(pbFlag: WordBool);
    function Get_IsAdminNames: WordBool;
    procedure Set_IsAdminReaderAuthor(pbFlag: WordBool);
    function Get_IsAdminReaderAuthor: WordBool;
    procedure Set_IsExtendedAccess(pbFlag: WordBool);
    function Get_IsExtendedAccess: WordBool;
  public
    property DefaultInterface: IACL read GetDefaultInterface;
  published
    property InternetLevel: ACLLEVEL read Get_InternetLevel write Set_InternetLevel;
    property UniformAccess: WordBool read Get_UniformAccess write Set_UniformAccess;
    property AdministrationServer: WideString read Get_AdministrationServer write Set_AdministrationServer;
    property IsAdminNames: WordBool read Get_IsAdminNames write Set_IsAdminNames;
    property IsAdminReaderAuthor: WordBool read Get_IsAdminReaderAuthor write Set_IsAdminReaderAuthor;
    property IsExtendedAccess: WordBool read Get_IsExtendedAccess write Set_IsExtendedAccess;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoNotesACLEntry provides a Create and CreateRemote method to          
// create instances of the default interface IACLEntry exposed by              
// the CoClass NotesACLEntry. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoNotesACLEntry = class
    class function Create: IACLEntry;
    class function CreateRemote(const MachineName: string): IACLEntry;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TNotesACLEntry
// Help String      : 
// Default Interface: IACLEntry
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TNotesACLEntryProperties= class;
{$ENDIF}
  TNotesACLEntry = class(TOleServer)
  private
    FIntf:        IACLEntry;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TNotesACLEntryProperties;
    function      GetServerProperties: TNotesACLEntryProperties;
{$ENDIF}
    function      GetDefaultInterface: IACLEntry;
  protected
    procedure InitServerData; override;
    procedure Set_CanCreateDocuments(pbFlag: WordBool);
    function Get_CanCreateDocuments: WordBool;
    procedure Set_CanCreateLSOrJavaAgent(pbFlag: WordBool);
    function Get_CanCreateLSOrJavaAgent: WordBool;
    procedure Set_CanCreatePersonalAgent(pbFlag: WordBool);
    function Get_CanCreatePersonalAgent: WordBool;
    procedure Set_CanCreatePersonalFolder(pbFlag: WordBool);
    function Get_CanCreatePersonalFolder: WordBool;
    procedure Set_CanCreateSharedFolder(pbFlag: WordBool);
    function Get_CanCreateSharedFolder: WordBool;
    procedure Set_CanDeleteDocuments(pbFlag: WordBool);
    function Get_CanDeleteDocuments: WordBool;
    procedure Set_IsAdminReaderAuthor(pbFlag: WordBool);
    function Get_IsAdminReaderAuthor: WordBool;
    procedure Set_IsAdminServer(pbFlag: WordBool);
    function Get_IsAdminServer: WordBool;
    procedure Set_IsGroup(pbFlag: WordBool);
    function Get_IsGroup: WordBool;
    procedure Set_IsPerson(pbFlag: WordBool);
    function Get_IsPerson: WordBool;
    procedure Set_IsPublicReader(pbFlag: WordBool);
    function Get_IsPublicReader: WordBool;
    procedure Set_IsPublicWriter(pbFlag: WordBool);
    function Get_IsPublicWriter: WordBool;
    procedure Set_IsServer(pbFlag: WordBool);
    function Get_IsServer: WordBool;
    function Get_Level: ACLLEVEL;
    procedure Set_Level(plLevel: ACLLEVEL);
    function Get_Name: WideString;
    procedure Set_Name(const ppName: WideString);
    function Get_NameObject: IName;
    function Get_Parent: IACL;
    function Get_Roles: OleVariant;
    function Get_UserType: LSXBE_ACLTYPE;
    procedure Set_UserType(plType: LSXBE_ACLTYPE);
    procedure Set_CanReplicateOrCopyDocuments(pbFlag: WordBool);
    function Get_CanReplicateOrCopyDocuments: WordBool;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IACLEntry);
    procedure Disconnect; override;
    procedure DisableRole(const pRole: WideString);
    procedure EnableRole(const pRole: WideString);
    function IsRoleEnabled(const pRole: WideString): WordBool;
    procedure Remove;
    property DefaultInterface: IACLEntry read GetDefaultInterface;
    property NameObject: IName read Get_NameObject;
    property Parent: IACL read Get_Parent;
    property Roles: OleVariant read Get_Roles;
    property CanCreateDocuments: WordBool read Get_CanCreateDocuments write Set_CanCreateDocuments;
    property CanCreateLSOrJavaAgent: WordBool read Get_CanCreateLSOrJavaAgent write Set_CanCreateLSOrJavaAgent;
    property CanCreatePersonalAgent: WordBool read Get_CanCreatePersonalAgent write Set_CanCreatePersonalAgent;
    property CanCreatePersonalFolder: WordBool read Get_CanCreatePersonalFolder write Set_CanCreatePersonalFolder;
    property CanCreateSharedFolder: WordBool read Get_CanCreateSharedFolder write Set_CanCreateSharedFolder;
    property CanDeleteDocuments: WordBool read Get_CanDeleteDocuments write Set_CanDeleteDocuments;
    property IsAdminReaderAuthor: WordBool read Get_IsAdminReaderAuthor write Set_IsAdminReaderAuthor;
    property IsAdminServer: WordBool read Get_IsAdminServer write Set_IsAdminServer;
    property IsGroup: WordBool read Get_IsGroup write Set_IsGroup;
    property IsPerson: WordBool read Get_IsPerson write Set_IsPerson;
    property IsPublicReader: WordBool read Get_IsPublicReader write Set_IsPublicReader;
    property IsPublicWriter: WordBool read Get_IsPublicWriter write Set_IsPublicWriter;
    property IsServer: WordBool read Get_IsServer write Set_IsServer;
    property Level: ACLLEVEL read Get_Level write Set_Level;
    property Name: WideString read Get_Name write Set_Name;
    property UserType: LSXBE_ACLTYPE read Get_UserType write Set_UserType;
    property CanReplicateOrCopyDocuments: WordBool read Get_CanReplicateOrCopyDocuments write Set_CanReplicateOrCopyDocuments;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TNotesACLEntryProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TNotesACLEntry
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TNotesACLEntryProperties = class(TPersistent)
  private
    FServer:    TNotesACLEntry;
    function    GetDefaultInterface: IACLEntry;
    constructor Create(AServer: TNotesACLEntry);
  protected
    procedure Set_CanCreateDocuments(pbFlag: WordBool);
    function Get_CanCreateDocuments: WordBool;
    procedure Set_CanCreateLSOrJavaAgent(pbFlag: WordBool);
    function Get_CanCreateLSOrJavaAgent: WordBool;
    procedure Set_CanCreatePersonalAgent(pbFlag: WordBool);
    function Get_CanCreatePersonalAgent: WordBool;
    procedure Set_CanCreatePersonalFolder(pbFlag: WordBool);
    function Get_CanCreatePersonalFolder: WordBool;
    procedure Set_CanCreateSharedFolder(pbFlag: WordBool);
    function Get_CanCreateSharedFolder: WordBool;
    procedure Set_CanDeleteDocuments(pbFlag: WordBool);
    function Get_CanDeleteDocuments: WordBool;
    procedure Set_IsAdminReaderAuthor(pbFlag: WordBool);
    function Get_IsAdminReaderAuthor: WordBool;
    procedure Set_IsAdminServer(pbFlag: WordBool);
    function Get_IsAdminServer: WordBool;
    procedure Set_IsGroup(pbFlag: WordBool);
    function Get_IsGroup: WordBool;
    procedure Set_IsPerson(pbFlag: WordBool);
    function Get_IsPerson: WordBool;
    procedure Set_IsPublicReader(pbFlag: WordBool);
    function Get_IsPublicReader: WordBool;
    procedure Set_IsPublicWriter(pbFlag: WordBool);
    function Get_IsPublicWriter: WordBool;
    procedure Set_IsServer(pbFlag: WordBool);
    function Get_IsServer: WordBool;
    function Get_Level: ACLLEVEL;
    procedure Set_Level(plLevel: ACLLEVEL);
    function Get_Name: WideString;
    procedure Set_Name(const ppName: WideString);
    function Get_NameObject: IName;
    function Get_Parent: IACL;
    function Get_Roles: OleVariant;
    function Get_UserType: LSXBE_ACLTYPE;
    procedure Set_UserType(plType: LSXBE_ACLTYPE);
    procedure Set_CanReplicateOrCopyDocuments(pbFlag: WordBool);
    function Get_CanReplicateOrCopyDocuments: WordBool;
  public
    property DefaultInterface: IACLEntry read GetDefaultInterface;
  published
    property CanCreateDocuments: WordBool read Get_CanCreateDocuments write Set_CanCreateDocuments;
    property CanCreateLSOrJavaAgent: WordBool read Get_CanCreateLSOrJavaAgent write Set_CanCreateLSOrJavaAgent;
    property CanCreatePersonalAgent: WordBool read Get_CanCreatePersonalAgent write Set_CanCreatePersonalAgent;
    property CanCreatePersonalFolder: WordBool read Get_CanCreatePersonalFolder write Set_CanCreatePersonalFolder;
    property CanCreateSharedFolder: WordBool read Get_CanCreateSharedFolder write Set_CanCreateSharedFolder;
    property CanDeleteDocuments: WordBool read Get_CanDeleteDocuments write Set_CanDeleteDocuments;
    property IsAdminReaderAuthor: WordBool read Get_IsAdminReaderAuthor write Set_IsAdminReaderAuthor;
    property IsAdminServer: WordBool read Get_IsAdminServer write Set_IsAdminServer;
    property IsGroup: WordBool read Get_IsGroup write Set_IsGroup;
    property IsPerson: WordBool read Get_IsPerson write Set_IsPerson;
    property IsPublicReader: WordBool read Get_IsPublicReader write Set_IsPublicReader;
    property IsPublicWriter: WordBool read Get_IsPublicWriter write Set_IsPublicWriter;
    property IsServer: WordBool read Get_IsServer write Set_IsServer;
    property Level: ACLLEVEL read Get_Level write Set_Level;
    property Name: WideString read Get_Name write Set_Name;
    property UserType: LSXBE_ACLTYPE read Get_UserType write Set_UserType;
    property CanReplicateOrCopyDocuments: WordBool read Get_CanReplicateOrCopyDocuments write Set_CanReplicateOrCopyDocuments;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoNotesAgent provides a Create and CreateRemote method to          
// create instances of the default interface IAgent exposed by              
// the CoClass NotesAgent. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoNotesAgent = class
    class function Create: IAgent;
    class function CreateRemote(const MachineName: string): IAgent;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TNotesAgent
// Help String      : 
// Default Interface: IAgent
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TNotesAgentProperties= class;
{$ENDIF}
  TNotesAgent = class(TOleServer)
  private
    FIntf:        IAgent;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TNotesAgentProperties;
    function      GetServerProperties: TNotesAgentProperties;
{$ENDIF}
    function      GetDefaultInterface: IAgent;
  protected
    procedure InitServerData; override;
    function Get_Comment: WideString;
    function Get_CommonOwner: WideString;
    function Get_HasRunSinceModified: WordBool;
    function Get_HttpURL: WideString;
    function Get_IsEnabled: WordBool;
    procedure Set_IsEnabled(pbFlag: WordBool);
    function Get_IsNotesAgent: WordBool;
    function Get_IsPublic: WordBool;
    function Get_IsWebAgent: WordBool;
    function Get_LastRun: OleVariant;
    function Get_Name: WideString;
    function Get_NotesURL: WideString;
    function Get_Owner: WideString;
    function Get_ParameterDocID: WideString;
    function Get_Parent: IDatabase;
    function Get_Query: WideString;
    function Get_ServerName: WideString;
    procedure Set_ServerName(const ppName: WideString);
    function Get_Target: AG_TARGET;
    function Get_Trigger: AG_TRIGGER;
    function Get_OnBehalfOf: WideString;
    function Get_LockHolders: OleVariant;
    function Get_IsActivatable: WordBool;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IAgent);
    procedure Disconnect; override;
    procedure Remove;
    procedure Run(const pNoteid: WideString);
    procedure RunOnServer(const pNoteid: WideString);
    procedure Save;
    function Lock(var pName: OleVariant; bProvisionalOK: WordBool): WordBool;
    function LockProvisional: WordBool; overload;
    function LockProvisional(var pName: OleVariant): WordBool; overload;
    procedure Unlock;
    property DefaultInterface: IAgent read GetDefaultInterface;
    property Comment: WideString read Get_Comment;
    property CommonOwner: WideString read Get_CommonOwner;
    property HasRunSinceModified: WordBool read Get_HasRunSinceModified;
    property HttpURL: WideString read Get_HttpURL;
    property IsNotesAgent: WordBool read Get_IsNotesAgent;
    property IsPublic: WordBool read Get_IsPublic;
    property IsWebAgent: WordBool read Get_IsWebAgent;
    property LastRun: OleVariant read Get_LastRun;
    property Name: WideString read Get_Name;
    property NotesURL: WideString read Get_NotesURL;
    property Owner: WideString read Get_Owner;
    property ParameterDocID: WideString read Get_ParameterDocID;
    property Parent: IDatabase read Get_Parent;
    property Query: WideString read Get_Query;
    property Target: AG_TARGET read Get_Target;
    property Trigger: AG_TRIGGER read Get_Trigger;
    property OnBehalfOf: WideString read Get_OnBehalfOf;
    property LockHolders: OleVariant read Get_LockHolders;
    property IsActivatable: WordBool read Get_IsActivatable;
    property IsEnabled: WordBool read Get_IsEnabled write Set_IsEnabled;
    property ServerName: WideString read Get_ServerName write Set_ServerName;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TNotesAgentProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TNotesAgent
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TNotesAgentProperties = class(TPersistent)
  private
    FServer:    TNotesAgent;
    function    GetDefaultInterface: IAgent;
    constructor Create(AServer: TNotesAgent);
  protected
    function Get_Comment: WideString;
    function Get_CommonOwner: WideString;
    function Get_HasRunSinceModified: WordBool;
    function Get_HttpURL: WideString;
    function Get_IsEnabled: WordBool;
    procedure Set_IsEnabled(pbFlag: WordBool);
    function Get_IsNotesAgent: WordBool;
    function Get_IsPublic: WordBool;
    function Get_IsWebAgent: WordBool;
    function Get_LastRun: OleVariant;
    function Get_Name: WideString;
    function Get_NotesURL: WideString;
    function Get_Owner: WideString;
    function Get_ParameterDocID: WideString;
    function Get_Parent: IDatabase;
    function Get_Query: WideString;
    function Get_ServerName: WideString;
    procedure Set_ServerName(const ppName: WideString);
    function Get_Target: AG_TARGET;
    function Get_Trigger: AG_TRIGGER;
    function Get_OnBehalfOf: WideString;
    function Get_LockHolders: OleVariant;
    function Get_IsActivatable: WordBool;
  public
    property DefaultInterface: IAgent read GetDefaultInterface;
  published
    property IsEnabled: WordBool read Get_IsEnabled write Set_IsEnabled;
    property ServerName: WideString read Get_ServerName write Set_ServerName;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoNotesDatabase provides a Create and CreateRemote method to          
// create instances of the default interface IDatabase exposed by              
// the CoClass NotesDatabase. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoNotesDatabase = class
    class function Create: IDatabase;
    class function CreateRemote(const MachineName: string): IDatabase;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TNotesDatabase
// Help String      : 
// Default Interface: IDatabase
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TNotesDatabaseProperties= class;
{$ENDIF}
  TNotesDatabase = class(TOleServer)
  private
    FIntf:        IDatabase;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TNotesDatabaseProperties;
    function      GetServerProperties: TNotesDatabaseProperties;
{$ENDIF}
    function      GetDefaultInterface: IDatabase;
  protected
    procedure InitServerData; override;
    function Get_ACL: IACL;
    function Get_AllDocuments: IDocumentCollection;
    function Get_Agents: OleVariant;
    function Get_Categories: WideString;
    procedure Set_Categories(const ppCategories: WideString);
    function Get_Created: OleVariant;
    function Get_CurrentAccessLevel: Integer;
    function Get_DelayUpdates: WordBool;
    procedure Set_DelayUpdates(pbFlag: WordBool);
    function Get_DesignTemplateName: WideString;
    function Get_FileName: WideString;
    function Get_FilePath: WideString;
    function Get_FolderReferencesEnabled: WordBool;
    procedure Set_FolderReferencesEnabled(pbEnable: WordBool);
    function Get_Forms: OleVariant;
    function Get_HttpURL: WideString;
    function Get_IsDirectoryCatalog: WordBool;
    function Get_IsFTIndexed: WordBool;
    function Get_IsMultiDbSearch: WordBool;
    function Get_IsOpen: WordBool;
    function Get_IsPublicAddressBook: WordBool;
    function Get_IsPrivateAddressBook: WordBool;
    function Get_LastFTIndexed: OleVariant;
    function Get_LastModified: OleVariant;
    function Get_Managers: OleVariant;
    function Get_MaxSize: Double;
    function Get_NotesURL: WideString;
    function Get_Parent: ISession;
    function Get_PercentUsed: Double;
    function Get_ReplicaID: WideString;
    function Get_ReplicationInfo: IReplication;
    function Get_Server: WideString;
    function Get_Size: Double;
    function Get_SizeQuota: Integer;
    procedure Set_SizeQuota(plQuota: Integer);
    function Get_TemplateName: WideString;
    function Get_Title: WideString;
    procedure Set_Title(const ppTitle: WideString);
    function Get_UnprocessedDocuments: IDocumentCollection;
    function Get_Views: OleVariant;
    function Get_ACLActivityLog: OleVariant;
    function Get_FTIndexFrequency: FTINDEX_FREQUENCY;
    procedure Set_FTIndexFrequency(pFtiFreq: FTINDEX_FREQUENCY);
    function Get_IsCurrentAccessPublicReader: WordBool;
    function Get_IsCurrentAccessPublicWriter: WordBool;
    function Get_IsInMultiDbIndexing: WordBool;
    procedure Set_IsInMultiDbIndexing(pbFlag: WordBool);
    function Get_IsLink: WordBool;
    function Get_type_: DATABASE_TYPES;
    function Get_IsDocumentLockingEnabled: WordBool;
    procedure Set_IsDocumentLockingEnabled(pbFlag: WordBool);
    function Get_IsDesignLockingEnabled: WordBool;
    procedure Set_IsDesignLockingEnabled(pbFlag: WordBool);
    function Get_IsInService: WordBool;
    function Get_IsPendingDelete: WordBool;
    function Get_IsConfigurationDirectory: WordBool;
    function Get_IsClusterReplication: WordBool;
    function Get_ListInDbCatalog: WordBool;
    function Get_LastFixup: IDateTime;
    function Get_LimitRevisions: Double;
    function Get_LimitUpdatedBy: Double;
    function Get_FileFormat: Integer;
    function Get_UndeleteExpireTime: Integer;
    function Get_SizeWarning: Integer;
    procedure Set_LimitRevisions(pD: Double);
    procedure Set_LimitUpdatedBy(pD: Double);
    procedure Set_SizeWarning(plValue: Integer);
    procedure Set_UndeleteExpireTime(plValue: Integer);
    procedure Set_InService(Param1: WordBool);
    procedure Set_ListInDbCatalog(bValue: WordBool);
    procedure Set_IsInService(bValue: WordBool);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IDatabase);
    procedure Disconnect; override;
    function Compact: Integer;
    function CreateCopy(const pServer: WideString; const pFile: WideString; lMaxsize: Integer): IDatabase;
    function CreateDocument: IDocument;
    function CreateFromTemplate(const pServer: WideString; const pFile: WideString; 
                                bInherit: WordBool; lMaxsize: Integer): IDatabase;
    function CreateOutline(const pName: WideString; bGenDefault: WordBool): IOutline;
    function CreateReplica(const pServer: WideString; const pFile: WideString): IDatabase;
    procedure EnableFolder(const pName: WideString);
    function FTDomainSearch(const pQuery: WideString; lMax: Integer; lSortopt: FT_TYPES; 
                            lOtheropt: FT_TYPES; lStart: Integer; lCount: Integer; 
                            const pEntryForm: WideString): IDocument;
    function FTSearch(const pQuery: WideString; lMax: Integer; lSortopt: FT_TYPES; 
                      lOtheropt: FT_TYPES): IDocumentCollection;
    function GetAgent(const pName: WideString): IAgent;
    function GetDocumentByID(const pNoteid: WideString): IDocument;
    function GetDocumentByUNID(const pUnid: WideString): IDocument;
    function GetDocumentByURL(const pURL: WideString; lReload: Integer; bUrllist: WordBool; 
                              const pCharset: WideString; const pWebuser: WideString; 
                              const pWebpasswd: WideString; const pProxyuser: WideString; 
                              const pProxypasswd: WideString; bNowait: WordBool): IDocument;
    function GetForm(const pName: WideString): IForm;
    function GetOutline(const pName: WideString): IOutline;
    function GetProfileDocument(const pProfile: WideString; const pProfileuser: WideString): IDocument;
    function GetProfileDocCollection(const pProfileName: WideString): IDocumentCollection;
    function GetURLHeaderInfo(const pURL: WideString; const pHeader: WideString; 
                              const pWebuser: WideString; const pWebpasswd: WideString; 
                              const pProxyuser: WideString; const pProxypasswd: WideString): WideString;
    function GetView(const pName: WideString): IView;
    procedure GrantAccess(const pName: WideString; lLevel: ACLLEVEL);
    procedure Open;
    function QueryAccess(const pName: WideString): ACLLEVEL;
    procedure Remove;
    function Replicate(const pServer: WideString): WordBool;
    procedure RevokeAccess(const pName: WideString);
    function Search(const pFormula: WideString; const pIDt: IDateTime; lMax: Integer): IDocumentCollection;
    function UnprocessedFTSearch(const pQuery: WideString; lMax: Integer; lSortopt: FT_TYPES; 
                                 lOtheropt: FT_TYPES): IDocumentCollection;
    function UnprocessedSearch(const pFormula: WideString; const pDt: IDateTime; lMax: Integer): IDocumentCollection;
    procedure UpdateFTIndex(bCreate: WordBool);
    function CompactWithOptions(cmpcFlags: OleVariant; const pSpacethreshhold: WideString; 
                                unused: COMPACT_OPTIONS): Integer;
    procedure CreateFTIndex(ftiFlags: FTINDEX_OPTIONS; bRecreate: WordBool);
    function FTSearchRange(const pQuery: WideString; lMax: Integer; lSortopt: FT_TYPES; 
                           lOtheropt: FT_TYPES; start: Integer): IDocumentCollection;
    function OpenByReplicaID(const pServer: WideString; const pReplicaID: WideString): WordBool;
    function OpenIfModified(const pServer: WideString; const pDbfile: WideString; 
                            const pITimeModifiedSince: IDateTime): WordBool;
    function OpenWithFailover(const pServer: WideString; const pDbfile: WideString): WordBool;
    function QueryAccessPrivileges(const pName: WideString): ACCESS_PRIVILEGES;
    procedure RemoveFTIndex;
    function UnprocessedFTSearchRange(const pQuery: WideString; lMax: Integer; lSortopt: FT_TYPES; 
                                      lOtheropt: FT_TYPES; start: Integer): IDocumentCollection;
    function CreateView(const Title: WideString; const Formula: WideString; 
                        const templateView: IView; noRefresh: WordBool): IView;
    procedure Fixup(opts: DBFIXUP_TYPES);
    procedure MarkForDelete;
    function GetOption(bit: DB_OPTIONS): WordBool;
    procedure SetOption(bit: DB_OPTIONS; bValue: WordBool);
    function CreateNoteCollection(bSelectAll: WordBool): INoteCollection;
    procedure Sign(lDocumentType: DBSIGN_TYPES; bExistingSigsOnly: WordBool; 
                   const pNameStr: WideString; bNameStrIsNoteID: WordBool);
    function QueryAccessRoles(const pName: WideString): OleVariant;
    function GetModifiedDocuments(const pDTSince: IDateTime; noteClass: DBMOD_TYPES): IDocumentCollection;
    property DefaultInterface: IDatabase read GetDefaultInterface;
    property ACL: IACL read Get_ACL;
    property AllDocuments: IDocumentCollection read Get_AllDocuments;
    property Agents: OleVariant read Get_Agents;
    property Created: OleVariant read Get_Created;
    property CurrentAccessLevel: Integer read Get_CurrentAccessLevel;
    property DesignTemplateName: WideString read Get_DesignTemplateName;
    property FileName: WideString read Get_FileName;
    property FilePath: WideString read Get_FilePath;
    property Forms: OleVariant read Get_Forms;
    property HttpURL: WideString read Get_HttpURL;
    property IsDirectoryCatalog: WordBool read Get_IsDirectoryCatalog;
    property IsFTIndexed: WordBool read Get_IsFTIndexed;
    property IsMultiDbSearch: WordBool read Get_IsMultiDbSearch;
    property IsOpen: WordBool read Get_IsOpen;
    property IsPublicAddressBook: WordBool read Get_IsPublicAddressBook;
    property IsPrivateAddressBook: WordBool read Get_IsPrivateAddressBook;
    property LastFTIndexed: OleVariant read Get_LastFTIndexed;
    property LastModified: OleVariant read Get_LastModified;
    property Managers: OleVariant read Get_Managers;
    property MaxSize: Double read Get_MaxSize;
    property NotesURL: WideString read Get_NotesURL;
    property Parent: ISession read Get_Parent;
    property PercentUsed: Double read Get_PercentUsed;
    property ReplicaID: WideString read Get_ReplicaID;
    property ReplicationInfo: IReplication read Get_ReplicationInfo;
    property Server: WideString read Get_Server;
    property Size: Double read Get_Size;
    property TemplateName: WideString read Get_TemplateName;
    property UnprocessedDocuments: IDocumentCollection read Get_UnprocessedDocuments;
    property Views: OleVariant read Get_Views;
    property ACLActivityLog: OleVariant read Get_ACLActivityLog;
    property IsCurrentAccessPublicReader: WordBool read Get_IsCurrentAccessPublicReader;
    property IsCurrentAccessPublicWriter: WordBool read Get_IsCurrentAccessPublicWriter;
    property IsLink: WordBool read Get_IsLink;
    property type_: DATABASE_TYPES read Get_type_;
    property IsPendingDelete: WordBool read Get_IsPendingDelete;
    property IsConfigurationDirectory: WordBool read Get_IsConfigurationDirectory;
    property IsClusterReplication: WordBool read Get_IsClusterReplication;
    property LastFixup: IDateTime read Get_LastFixup;
    property FileFormat: Integer read Get_FileFormat;
    property InService: WordBool write Set_InService;
    property Categories: WideString read Get_Categories write Set_Categories;
    property DelayUpdates: WordBool read Get_DelayUpdates write Set_DelayUpdates;
    property FolderReferencesEnabled: WordBool read Get_FolderReferencesEnabled write Set_FolderReferencesEnabled;
    property SizeQuota: Integer read Get_SizeQuota write Set_SizeQuota;
    property Title: WideString read Get_Title write Set_Title;
    property FTIndexFrequency: FTINDEX_FREQUENCY read Get_FTIndexFrequency write Set_FTIndexFrequency;
    property IsInMultiDbIndexing: WordBool read Get_IsInMultiDbIndexing write Set_IsInMultiDbIndexing;
    property IsDocumentLockingEnabled: WordBool read Get_IsDocumentLockingEnabled write Set_IsDocumentLockingEnabled;
    property IsDesignLockingEnabled: WordBool read Get_IsDesignLockingEnabled write Set_IsDesignLockingEnabled;
    property IsInService: WordBool read Get_IsInService write Set_IsInService;
    property ListInDbCatalog: WordBool read Get_ListInDbCatalog write Set_ListInDbCatalog;
    property LimitRevisions: Double read Get_LimitRevisions write Set_LimitRevisions;
    property LimitUpdatedBy: Double read Get_LimitUpdatedBy write Set_LimitUpdatedBy;
    property UndeleteExpireTime: Integer read Get_UndeleteExpireTime write Set_UndeleteExpireTime;
    property SizeWarning: Integer read Get_SizeWarning write Set_SizeWarning;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TNotesDatabaseProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TNotesDatabase
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TNotesDatabaseProperties = class(TPersistent)
  private
    FServer:    TNotesDatabase;
    function    GetDefaultInterface: IDatabase;
    constructor Create(AServer: TNotesDatabase);
  protected
    function Get_ACL: IACL;
    function Get_AllDocuments: IDocumentCollection;
    function Get_Agents: OleVariant;
    function Get_Categories: WideString;
    procedure Set_Categories(const ppCategories: WideString);
    function Get_Created: OleVariant;
    function Get_CurrentAccessLevel: Integer;
    function Get_DelayUpdates: WordBool;
    procedure Set_DelayUpdates(pbFlag: WordBool);
    function Get_DesignTemplateName: WideString;
    function Get_FileName: WideString;
    function Get_FilePath: WideString;
    function Get_FolderReferencesEnabled: WordBool;
    procedure Set_FolderReferencesEnabled(pbEnable: WordBool);
    function Get_Forms: OleVariant;
    function Get_HttpURL: WideString;
    function Get_IsDirectoryCatalog: WordBool;
    function Get_IsFTIndexed: WordBool;
    function Get_IsMultiDbSearch: WordBool;
    function Get_IsOpen: WordBool;
    function Get_IsPublicAddressBook: WordBool;
    function Get_IsPrivateAddressBook: WordBool;
    function Get_LastFTIndexed: OleVariant;
    function Get_LastModified: OleVariant;
    function Get_Managers: OleVariant;
    function Get_MaxSize: Double;
    function Get_NotesURL: WideString;
    function Get_Parent: ISession;
    function Get_PercentUsed: Double;
    function Get_ReplicaID: WideString;
    function Get_ReplicationInfo: IReplication;
    function Get_Server: WideString;
    function Get_Size: Double;
    function Get_SizeQuota: Integer;
    procedure Set_SizeQuota(plQuota: Integer);
    function Get_TemplateName: WideString;
    function Get_Title: WideString;
    procedure Set_Title(const ppTitle: WideString);
    function Get_UnprocessedDocuments: IDocumentCollection;
    function Get_Views: OleVariant;
    function Get_ACLActivityLog: OleVariant;
    function Get_FTIndexFrequency: FTINDEX_FREQUENCY;
    procedure Set_FTIndexFrequency(pFtiFreq: FTINDEX_FREQUENCY);
    function Get_IsCurrentAccessPublicReader: WordBool;
    function Get_IsCurrentAccessPublicWriter: WordBool;
    function Get_IsInMultiDbIndexing: WordBool;
    procedure Set_IsInMultiDbIndexing(pbFlag: WordBool);
    function Get_IsLink: WordBool;
    function Get_type_: DATABASE_TYPES;
    function Get_IsDocumentLockingEnabled: WordBool;
    procedure Set_IsDocumentLockingEnabled(pbFlag: WordBool);
    function Get_IsDesignLockingEnabled: WordBool;
    procedure Set_IsDesignLockingEnabled(pbFlag: WordBool);
    function Get_IsInService: WordBool;
    function Get_IsPendingDelete: WordBool;
    function Get_IsConfigurationDirectory: WordBool;
    function Get_IsClusterReplication: WordBool;
    function Get_ListInDbCatalog: WordBool;
    function Get_LastFixup: IDateTime;
    function Get_LimitRevisions: Double;
    function Get_LimitUpdatedBy: Double;
    function Get_FileFormat: Integer;
    function Get_UndeleteExpireTime: Integer;
    function Get_SizeWarning: Integer;
    procedure Set_LimitRevisions(pD: Double);
    procedure Set_LimitUpdatedBy(pD: Double);
    procedure Set_SizeWarning(plValue: Integer);
    procedure Set_UndeleteExpireTime(plValue: Integer);
    procedure Set_InService(Param1: WordBool);
    procedure Set_ListInDbCatalog(bValue: WordBool);
    procedure Set_IsInService(bValue: WordBool);
  public
    property DefaultInterface: IDatabase read GetDefaultInterface;
  published
    property Categories: WideString read Get_Categories write Set_Categories;
    property DelayUpdates: WordBool read Get_DelayUpdates write Set_DelayUpdates;
    property FolderReferencesEnabled: WordBool read Get_FolderReferencesEnabled write Set_FolderReferencesEnabled;
    property SizeQuota: Integer read Get_SizeQuota write Set_SizeQuota;
    property Title: WideString read Get_Title write Set_Title;
    property FTIndexFrequency: FTINDEX_FREQUENCY read Get_FTIndexFrequency write Set_FTIndexFrequency;
    property IsInMultiDbIndexing: WordBool read Get_IsInMultiDbIndexing write Set_IsInMultiDbIndexing;
    property IsDocumentLockingEnabled: WordBool read Get_IsDocumentLockingEnabled write Set_IsDocumentLockingEnabled;
    property IsDesignLockingEnabled: WordBool read Get_IsDesignLockingEnabled write Set_IsDesignLockingEnabled;
    property IsInService: WordBool read Get_IsInService write Set_IsInService;
    property ListInDbCatalog: WordBool read Get_ListInDbCatalog write Set_ListInDbCatalog;
    property LimitRevisions: Double read Get_LimitRevisions write Set_LimitRevisions;
    property LimitUpdatedBy: Double read Get_LimitUpdatedBy write Set_LimitUpdatedBy;
    property UndeleteExpireTime: Integer read Get_UndeleteExpireTime write Set_UndeleteExpireTime;
    property SizeWarning: Integer read Get_SizeWarning write Set_SizeWarning;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoNotesDateRange provides a Create and CreateRemote method to          
// create instances of the default interface IDateRange exposed by              
// the CoClass NotesDateRange. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoNotesDateRange = class
    class function Create: IDateRange;
    class function CreateRemote(const MachineName: string): IDateRange;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TNotesDateRange
// Help String      : 
// Default Interface: IDateRange
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TNotesDateRangeProperties= class;
{$ENDIF}
  TNotesDateRange = class(TOleServer)
  private
    FIntf:        IDateRange;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TNotesDateRangeProperties;
    function      GetServerProperties: TNotesDateRangeProperties;
{$ENDIF}
    function      GetDefaultInterface: IDateRange;
  protected
    procedure InitServerData; override;
    function Get_EndDateTime: IDateTime;
    procedure Set_EndDateTime(const ppITime: IDateTime);
    function Get_Parent: ISession;
    function Get_StartDateTime: IDateTime;
    procedure Set_StartDateTime(const ppITime: IDateTime);
    function Get_Text: WideString;
    procedure Set_Text(const ppRange: WideString);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IDateRange);
    procedure Disconnect; override;
    property DefaultInterface: IDateRange read GetDefaultInterface;
    property Parent: ISession read Get_Parent;
    property EndDateTime: IDateTime read Get_EndDateTime write Set_EndDateTime;
    property StartDateTime: IDateTime read Get_StartDateTime write Set_StartDateTime;
    property Text: WideString read Get_Text write Set_Text;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TNotesDateRangeProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TNotesDateRange
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TNotesDateRangeProperties = class(TPersistent)
  private
    FServer:    TNotesDateRange;
    function    GetDefaultInterface: IDateRange;
    constructor Create(AServer: TNotesDateRange);
  protected
    function Get_EndDateTime: IDateTime;
    procedure Set_EndDateTime(const ppITime: IDateTime);
    function Get_Parent: ISession;
    function Get_StartDateTime: IDateTime;
    procedure Set_StartDateTime(const ppITime: IDateTime);
    function Get_Text: WideString;
    procedure Set_Text(const ppRange: WideString);
  public
    property DefaultInterface: IDateRange read GetDefaultInterface;
  published
    property EndDateTime: IDateTime read Get_EndDateTime write Set_EndDateTime;
    property StartDateTime: IDateTime read Get_StartDateTime write Set_StartDateTime;
    property Text: WideString read Get_Text write Set_Text;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoNotesDateTime provides a Create and CreateRemote method to          
// create instances of the default interface IDateTime exposed by              
// the CoClass NotesDateTime. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoNotesDateTime = class
    class function Create: IDateTime;
    class function CreateRemote(const MachineName: string): IDateTime;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TNotesDateTime
// Help String      : 
// Default Interface: IDateTime
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TNotesDateTimeProperties= class;
{$ENDIF}
  TNotesDateTime = class(TOleServer)
  private
    FIntf:        IDateTime;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TNotesDateTimeProperties;
    function      GetServerProperties: TNotesDateTimeProperties;
{$ENDIF}
    function      GetDefaultInterface: IDateTime;
  protected
    procedure InitServerData; override;
    function Get_DateOnly: WideString;
    function Get_GMTTime: WideString;
    function Get_IsDST: WordBool;
    function Get_IsValidDate: WordBool;
    function Get_LocalTime: WideString;
    procedure Set_LocalTime(const ppTime: WideString);
    function Get_LSGMTTime: OleVariant;
    function Get_LSLocalTime: OleVariant;
    procedure Set_LSLocalTime(pTime: OleVariant);
    function Get_Parent: ISession;
    function Get_TimeOnly: WideString;
    function Get_TimeZone: Integer;
    function Get_ZoneTime: WideString;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IDateTime);
    procedure Disconnect; override;
    procedure AdjustDay(lAdjust: Integer; bPreserveLocalTime: WordBool);
    procedure AdjustHour(lAdjust: Integer; bPreserveLocalTime: WordBool);
    procedure AdjustMinute(lAdjust: Integer; bPreserveLocalTime: WordBool);
    procedure AdjustMonth(lAdjust: Integer; bPreserveLocalTime: WordBool);
    procedure AdjustSecond(lAdjust: Integer; bPreserveLocalTime: WordBool);
    procedure AdjustYear(lAdjust: Integer; bPreserveLocalTime: WordBool);
    procedure ConvertToZone(lNewzone: Integer; bDst: WordBool);
    procedure SetAnyDate;
    procedure SetAnyTime;
    procedure SetNow;
    function TimeDifference(const pIDt: IDateTime): Integer;
    function TimeDifferenceDouble(const pIDt: IDateTime): Double;
    property DefaultInterface: IDateTime read GetDefaultInterface;
    property DateOnly: WideString read Get_DateOnly;
    property GMTTime: WideString read Get_GMTTime;
    property IsDST: WordBool read Get_IsDST;
    property IsValidDate: WordBool read Get_IsValidDate;
    property LSGMTTime: OleVariant read Get_LSGMTTime;
    property LSLocalTime: OleVariant read Get_LSLocalTime write Set_LSLocalTime;
    property Parent: ISession read Get_Parent;
    property TimeOnly: WideString read Get_TimeOnly;
    property TimeZone: Integer read Get_TimeZone;
    property ZoneTime: WideString read Get_ZoneTime;
    property LocalTime: WideString read Get_LocalTime write Set_LocalTime;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TNotesDateTimeProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TNotesDateTime
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TNotesDateTimeProperties = class(TPersistent)
  private
    FServer:    TNotesDateTime;
    function    GetDefaultInterface: IDateTime;
    constructor Create(AServer: TNotesDateTime);
  protected
    function Get_DateOnly: WideString;
    function Get_GMTTime: WideString;
    function Get_IsDST: WordBool;
    function Get_IsValidDate: WordBool;
    function Get_LocalTime: WideString;
    procedure Set_LocalTime(const ppTime: WideString);
    function Get_LSGMTTime: OleVariant;
    function Get_LSLocalTime: OleVariant;
    procedure Set_LSLocalTime(pTime: OleVariant);
    function Get_Parent: ISession;
    function Get_TimeOnly: WideString;
    function Get_TimeZone: Integer;
    function Get_ZoneTime: WideString;
  public
    property DefaultInterface: IDateTime read GetDefaultInterface;
  published
    property LocalTime: WideString read Get_LocalTime write Set_LocalTime;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoNotesDbDirectory provides a Create and CreateRemote method to          
// create instances of the default interface IDbDirectory exposed by              
// the CoClass NotesDbDirectory. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoNotesDbDirectory = class
    class function Create: IDbDirectory;
    class function CreateRemote(const MachineName: string): IDbDirectory;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TNotesDbDirectory
// Help String      : 
// Default Interface: IDbDirectory
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TNotesDbDirectoryProperties= class;
{$ENDIF}
  TNotesDbDirectory = class(TOleServer)
  private
    FIntf:        IDbDirectory;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TNotesDbDirectoryProperties;
    function      GetServerProperties: TNotesDbDirectoryProperties;
{$ENDIF}
    function      GetDefaultInterface: IDbDirectory;
  protected
    procedure InitServerData; override;
    function Get_Name: WideString;
    function Get_Parent: ISession;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IDbDirectory);
    procedure Disconnect; override;
    function CreateDatabase(const pDbfile: WideString; bOpen: WordBool): IDatabase;
    function GetFirstDatabase(lFiletype: DB_TYPES): IDatabase;
    function GetNextDatabase: IDatabase;
    function OpenDatabase(const pDbfile: WideString; bFailover: WordBool): IDatabase;
    function OpenDatabaseIfModified(const pDbfile: WideString; const pITime: IDateTime): IDatabase;
    function OpenMailDatabase: IDatabase;
    function OpenDatabaseByReplicaID(const pRid: WideString): IDatabase;
    property DefaultInterface: IDbDirectory read GetDefaultInterface;
    property Name: WideString read Get_Name;
    property Parent: ISession read Get_Parent;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TNotesDbDirectoryProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TNotesDbDirectory
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TNotesDbDirectoryProperties = class(TPersistent)
  private
    FServer:    TNotesDbDirectory;
    function    GetDefaultInterface: IDbDirectory;
    constructor Create(AServer: TNotesDbDirectory);
  protected
    function Get_Name: WideString;
    function Get_Parent: ISession;
  public
    property DefaultInterface: IDbDirectory read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoNotesDocument provides a Create and CreateRemote method to          
// create instances of the default interface IDocument exposed by              
// the CoClass NotesDocument. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoNotesDocument = class
    class function Create: IDocument;
    class function CreateRemote(const MachineName: string): IDocument;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TNotesDocument
// Help String      : 
// Default Interface: IDocument
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TNotesDocumentProperties= class;
{$ENDIF}
  TNotesDocument = class(TOleServer)
  private
    FIntf:        IDocument;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TNotesDocumentProperties;
    function      GetServerProperties: TNotesDocumentProperties;
{$ENDIF}
    function      GetDefaultInterface: IDocument;
  protected
    procedure InitServerData; override;
    function Get_Authors: OleVariant;
    function Get_ColumnValues: OleVariant;
    function Get_Created: OleVariant;
    function Get_EmbeddedObjects: OleVariant;
    function Get_EncryptionKeys: OleVariant;
    procedure Set_EncryptionKeys(pKeys: OleVariant);
    procedure Set_EncryptOnSend(pbFlag: WordBool);
    function Get_EncryptOnSend: WordBool;
    function Get_FolderReferences: OleVariant;
    function Get_FTSearchScore: Integer;
    function Get_HasEmbedded: WordBool;
    function Get_HttpURL: WideString;
    function Get_IsDeleted: WordBool;
    function Get_IsNewNote: WordBool;
    function Get_IsProfile: WordBool;
    function Get_IsResponse: WordBool;
    function Get_IsSigned: WordBool;
    function Get_IsUIDocOpen: WordBool;
    function Get_IsValid: WordBool;
    function Get_Items: OleVariant;
    function Get_Key: WideString;
    function Get_LastAccessed: OleVariant;
    function Get_LastModified: OleVariant;
    function Get_NameOfProfile: WideString;
    function Get_NoteID: WideString;
    function Get_NotesURL: WideString;
    function Get_ParentDatabase: IDatabase;
    function Get_ParentDocumentUNID: WideString;
    function Get_ParentView: IView;
    function Get_Responses: IDocumentCollection;
    function Get_SaveMessageOnSend: WordBool;
    procedure Set_SaveMessageOnSend(pbFlag: WordBool);
    function Get_SentByAgent: WordBool;
    function Get_Signer: WideString;
    function Get_SignOnSend: WordBool;
    procedure Set_SignOnSend(pbFlag: WordBool);
    function Get_Size: Integer;
    function Get_UniversalID: WideString;
    procedure Set_UniversalID(const ppId: WideString);
    function Get_Verifier: WideString;
    function Get_LockHolders: OleVariant;
    function Get_IsEncrypted: WordBool;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IDocument);
    procedure Disconnect; override;
    function AppendItemValue(const pName: WideString; Value: OleVariant): IItem2;
    function ComputeWithForm(bDodatatypes: WordBool; bRaiseerror: WordBool): WordBool;
    procedure CopyAllItems(const pIDoc: IDocument; bReplace: WordBool);
    function CopyItem(const pIItem: IItem2; const pNewname: WideString): IItem2;
    function CopyToDatabase(const pIDb: IDatabase): IDocument;
    function CreateReplyMessage(bToall: WordBool): IDocument;
    function CreateRichTextItem(const pName: WideString): IRichTextItem;
    procedure Encrypt;
    function GetAttachment(const pFilename: WideString): IEmbeddedObject;
    function GetFirstItem(const pName: WideString): IItem2;
    function GetItemValue(const pName: WideString): OleVariant;
    function HasItem(const pName: WideString): WordBool;
    procedure MakeResponse(const pIDoc: IDocument);
    procedure PutInFolder(const pName: WideString; bCreateonfail: WordBool);
    function Remove(bForce: WordBool): WordBool;
    procedure RemoveFromFolder(const pName: WideString);
    procedure RemoveItem(const pName: WideString);
    function RenderToRTItem(const pIRTItem: IRichTextItem): WordBool;
    function ReplaceItemValue(const pName: WideString; Value: OleVariant): IItem2;
    function Save(bForce: WordBool; bMakeresponse: WordBool; bMarkread: WordBool): WordBool;
    procedure Send(bAttachform: WordBool); overload;
    procedure Send(bAttachform: WordBool; var pRecipients: OleVariant); overload;
    procedure Sign;
    function CloseMIMEEntities(bSavechanges: WordBool; const pName: WideString): WordBool;
    function CreateMIMEEntity(const pName: WideString): IMIMEEntity;
    function GetMIMEEntity(const pName: WideString): IMIMEEntity;
    function GetItemValueCustomDataBytes(const pItemName: WideString; 
                                         const pDatatypeName: WideString): OleVariant;
    function GetItemValueDateTimeArray(const pItemName: WideString): OleVariant;
    function GetReceivedItemText: OleVariant;
    function ReplaceItemValueCustomDataBytes(const pItemName: WideString; 
                                             const pDatatypeName: WideString; CustomData: OleVariant): IItem2;
    function RemovePermanently(bForce: WordBool): WordBool;
    function Lock(var pName: OleVariant; bProvisionalOK: WordBool): WordBool;
    function LockProvisional: WordBool; overload;
    function LockProvisional(var pName: OleVariant): WordBool; overload;
    procedure Unlock;
    property DefaultInterface: IDocument read GetDefaultInterface;
    property Authors: OleVariant read Get_Authors;
    property ColumnValues: OleVariant read Get_ColumnValues;
    property Created: OleVariant read Get_Created;
    property EmbeddedObjects: OleVariant read Get_EmbeddedObjects;
    property EncryptionKeys: OleVariant read Get_EncryptionKeys write Set_EncryptionKeys;
    property FolderReferences: OleVariant read Get_FolderReferences;
    property FTSearchScore: Integer read Get_FTSearchScore;
    property HasEmbedded: WordBool read Get_HasEmbedded;
    property HttpURL: WideString read Get_HttpURL;
    property IsDeleted: WordBool read Get_IsDeleted;
    property IsNewNote: WordBool read Get_IsNewNote;
    property IsProfile: WordBool read Get_IsProfile;
    property IsResponse: WordBool read Get_IsResponse;
    property IsSigned: WordBool read Get_IsSigned;
    property IsUIDocOpen: WordBool read Get_IsUIDocOpen;
    property IsValid: WordBool read Get_IsValid;
    property Items: OleVariant read Get_Items;
    property Key: WideString read Get_Key;
    property LastAccessed: OleVariant read Get_LastAccessed;
    property LastModified: OleVariant read Get_LastModified;
    property NameOfProfile: WideString read Get_NameOfProfile;
    property NoteID: WideString read Get_NoteID;
    property NotesURL: WideString read Get_NotesURL;
    property ParentDatabase: IDatabase read Get_ParentDatabase;
    property ParentDocumentUNID: WideString read Get_ParentDocumentUNID;
    property ParentView: IView read Get_ParentView;
    property Responses: IDocumentCollection read Get_Responses;
    property SentByAgent: WordBool read Get_SentByAgent;
    property Signer: WideString read Get_Signer;
    property Size: Integer read Get_Size;
    property Verifier: WideString read Get_Verifier;
    property LockHolders: OleVariant read Get_LockHolders;
    property IsEncrypted: WordBool read Get_IsEncrypted;
    property EncryptOnSend: WordBool read Get_EncryptOnSend write Set_EncryptOnSend;
    property SaveMessageOnSend: WordBool read Get_SaveMessageOnSend write Set_SaveMessageOnSend;
    property SignOnSend: WordBool read Get_SignOnSend write Set_SignOnSend;
    property UniversalID: WideString read Get_UniversalID write Set_UniversalID;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TNotesDocumentProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TNotesDocument
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TNotesDocumentProperties = class(TPersistent)
  private
    FServer:    TNotesDocument;
    function    GetDefaultInterface: IDocument;
    constructor Create(AServer: TNotesDocument);
  protected
    function Get_Authors: OleVariant;
    function Get_ColumnValues: OleVariant;
    function Get_Created: OleVariant;
    function Get_EmbeddedObjects: OleVariant;
    function Get_EncryptionKeys: OleVariant;
    procedure Set_EncryptionKeys(pKeys: OleVariant);
    procedure Set_EncryptOnSend(pbFlag: WordBool);
    function Get_EncryptOnSend: WordBool;
    function Get_FolderReferences: OleVariant;
    function Get_FTSearchScore: Integer;
    function Get_HasEmbedded: WordBool;
    function Get_HttpURL: WideString;
    function Get_IsDeleted: WordBool;
    function Get_IsNewNote: WordBool;
    function Get_IsProfile: WordBool;
    function Get_IsResponse: WordBool;
    function Get_IsSigned: WordBool;
    function Get_IsUIDocOpen: WordBool;
    function Get_IsValid: WordBool;
    function Get_Items: OleVariant;
    function Get_Key: WideString;
    function Get_LastAccessed: OleVariant;
    function Get_LastModified: OleVariant;
    function Get_NameOfProfile: WideString;
    function Get_NoteID: WideString;
    function Get_NotesURL: WideString;
    function Get_ParentDatabase: IDatabase;
    function Get_ParentDocumentUNID: WideString;
    function Get_ParentView: IView;
    function Get_Responses: IDocumentCollection;
    function Get_SaveMessageOnSend: WordBool;
    procedure Set_SaveMessageOnSend(pbFlag: WordBool);
    function Get_SentByAgent: WordBool;
    function Get_Signer: WideString;
    function Get_SignOnSend: WordBool;
    procedure Set_SignOnSend(pbFlag: WordBool);
    function Get_Size: Integer;
    function Get_UniversalID: WideString;
    procedure Set_UniversalID(const ppId: WideString);
    function Get_Verifier: WideString;
    function Get_LockHolders: OleVariant;
    function Get_IsEncrypted: WordBool;
  public
    property DefaultInterface: IDocument read GetDefaultInterface;
  published
    property EncryptOnSend: WordBool read Get_EncryptOnSend write Set_EncryptOnSend;
    property SaveMessageOnSend: WordBool read Get_SaveMessageOnSend write Set_SaveMessageOnSend;
    property SignOnSend: WordBool read Get_SignOnSend write Set_SignOnSend;
    property UniversalID: WideString read Get_UniversalID write Set_UniversalID;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoNotesDocumentCollection provides a Create and CreateRemote method to          
// create instances of the default interface IDocumentCollection exposed by              
// the CoClass NotesDocumentCollection. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoNotesDocumentCollection = class
    class function Create: IDocumentCollection;
    class function CreateRemote(const MachineName: string): IDocumentCollection;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TNotesDocumentCollection
// Help String      : 
// Default Interface: IDocumentCollection
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TNotesDocumentCollectionProperties= class;
{$ENDIF}
  TNotesDocumentCollection = class(TOleServer)
  private
    FIntf:        IDocumentCollection;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TNotesDocumentCollectionProperties;
    function      GetServerProperties: TNotesDocumentCollectionProperties;
{$ENDIF}
    function      GetDefaultInterface: IDocumentCollection;
  protected
    procedure InitServerData; override;
    function Get_Count: Integer;
    function Get_IsSorted: WordBool;
    function Get_Parent: IDatabase;
    function Get_Query: WideString;
    function Get_UntilTime: IDateTime;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IDocumentCollection);
    procedure Disconnect; override;
    procedure AddDocument(const pIDoc: IDocument; bReserved: WordBool);
    procedure DeleteDocument(const pIDoc: IDocument);
    procedure FTSearch(const pQuery: WideString; lMaxDocs: Integer);
    function GetDocument(const pIIndoc: IDocument): IDocument;
    function GetFirstDocument: IDocument;
    function GetLastDocument: IDocument;
    function GetNextDocument(const pICurrent: IDocument): IDocument;
    function GetPrevDocument(const pICurrent: IDocument): IDocument;
    function GetNthDocument(lN: Integer): IDocument;
    procedure PutAllInFolder(const pFolderName: WideString; bCreateonfail: WordBool);
    procedure RemoveAll(bForce: WordBool);
    procedure RemoveAllFromFolder(const pFolderName: WideString);
    procedure StampAll(const pItemName: WideString; Value: OleVariant);
    procedure UpdateAll;
    property DefaultInterface: IDocumentCollection read GetDefaultInterface;
    property Count: Integer read Get_Count;
    property IsSorted: WordBool read Get_IsSorted;
    property Parent: IDatabase read Get_Parent;
    property Query: WideString read Get_Query;
    property UntilTime: IDateTime read Get_UntilTime;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TNotesDocumentCollectionProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TNotesDocumentCollection
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TNotesDocumentCollectionProperties = class(TPersistent)
  private
    FServer:    TNotesDocumentCollection;
    function    GetDefaultInterface: IDocumentCollection;
    constructor Create(AServer: TNotesDocumentCollection);
  protected
    function Get_Count: Integer;
    function Get_IsSorted: WordBool;
    function Get_Parent: IDatabase;
    function Get_Query: WideString;
    function Get_UntilTime: IDateTime;
  public
    property DefaultInterface: IDocumentCollection read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoNotesEmbeddedObject provides a Create and CreateRemote method to          
// create instances of the default interface IEmbeddedObject exposed by              
// the CoClass NotesEmbeddedObject. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoNotesEmbeddedObject = class
    class function Create: IEmbeddedObject;
    class function CreateRemote(const MachineName: string): IEmbeddedObject;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TNotesEmbeddedObject
// Help String      : 
// Default Interface: IEmbeddedObject
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TNotesEmbeddedObjectProperties= class;
{$ENDIF}
  TNotesEmbeddedObject = class(TOleServer)
  private
    FIntf:        IEmbeddedObject;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TNotesEmbeddedObjectProperties;
    function      GetServerProperties: TNotesEmbeddedObjectProperties;
{$ENDIF}
    function      GetDefaultInterface: IEmbeddedObject;
  protected
    procedure InitServerData; override;
    function Get_Class_: WideString;
    function Get_FileSize: Integer;
    function Get_FitBelowFields: WordBool;
    procedure Set_FitBelowFields(pbFlag: WordBool);
    function Get_FitToWindow: WordBool;
    procedure Set_FitToWindow(pbFlag: WordBool);
    function Get_Name: WideString;
    function Get_Object_: OleVariant;
    function Get_Parent: IRichTextItem;
    function Get_RunReadOnly: WordBool;
    procedure Set_RunReadOnly(pbFlag: WordBool);
    function Get_Source: WideString;
    function Get_type_: EMBED_TYPE;
    function Get_Verbs: OleVariant;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IEmbeddedObject);
    procedure Disconnect; override;
    function Activate(bShow: WordBool): IDispatch;
    procedure DoVerb(const pVerb: WideString);
    procedure ExtractFile(const pPath: WideString);
    procedure Remove;
    property DefaultInterface: IEmbeddedObject read GetDefaultInterface;
    property Class_: WideString read Get_Class_;
    property FileSize: Integer read Get_FileSize;
    property Name: WideString read Get_Name;
    property Object_: OleVariant read Get_Object_;
    property Parent: IRichTextItem read Get_Parent;
    property Source: WideString read Get_Source;
    property type_: EMBED_TYPE read Get_type_;
    property Verbs: OleVariant read Get_Verbs;
    property FitBelowFields: WordBool read Get_FitBelowFields write Set_FitBelowFields;
    property FitToWindow: WordBool read Get_FitToWindow write Set_FitToWindow;
    property RunReadOnly: WordBool read Get_RunReadOnly write Set_RunReadOnly;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TNotesEmbeddedObjectProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TNotesEmbeddedObject
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TNotesEmbeddedObjectProperties = class(TPersistent)
  private
    FServer:    TNotesEmbeddedObject;
    function    GetDefaultInterface: IEmbeddedObject;
    constructor Create(AServer: TNotesEmbeddedObject);
  protected
    function Get_Class_: WideString;
    function Get_FileSize: Integer;
    function Get_FitBelowFields: WordBool;
    procedure Set_FitBelowFields(pbFlag: WordBool);
    function Get_FitToWindow: WordBool;
    procedure Set_FitToWindow(pbFlag: WordBool);
    function Get_Name: WideString;
    function Get_Object_: OleVariant;
    function Get_Parent: IRichTextItem;
    function Get_RunReadOnly: WordBool;
    procedure Set_RunReadOnly(pbFlag: WordBool);
    function Get_Source: WideString;
    function Get_type_: EMBED_TYPE;
    function Get_Verbs: OleVariant;
  public
    property DefaultInterface: IEmbeddedObject read GetDefaultInterface;
  published
    property FitBelowFields: WordBool read Get_FitBelowFields write Set_FitBelowFields;
    property FitToWindow: WordBool read Get_FitToWindow write Set_FitToWindow;
    property RunReadOnly: WordBool read Get_RunReadOnly write Set_RunReadOnly;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoNotesForm provides a Create and CreateRemote method to          
// create instances of the default interface IForm exposed by              
// the CoClass NotesForm. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoNotesForm = class
    class function Create: IForm;
    class function CreateRemote(const MachineName: string): IForm;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TNotesForm
// Help String      : 
// Default Interface: IForm
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TNotesFormProperties= class;
{$ENDIF}
  TNotesForm = class(TOleServer)
  private
    FIntf:        IForm;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TNotesFormProperties;
    function      GetServerProperties: TNotesFormProperties;
{$ENDIF}
    function      GetDefaultInterface: IForm;
  protected
    procedure InitServerData; override;
    function Get_Aliases: OleVariant;
    function Get_Fields: OleVariant;
    function Get_FormUsers: OleVariant;
    procedure Set_FormUsers(pUsers: OleVariant);
    function Get_HttpURL: WideString;
    function Get_IsSubForm: WordBool;
    function Get_Name: WideString;
    function Get_NotesURL: WideString;
    function Get_Parent: IDatabase;
    function Get_ProtectReaders: WordBool;
    procedure Set_ProtectReaders(pbFlag: WordBool);
    function Get_ProtectUsers: WordBool;
    procedure Set_ProtectUsers(pbFlag: WordBool);
    function Get_Readers: OleVariant;
    procedure Set_Readers(pReaders: OleVariant);
    function Get_LockHolders: OleVariant;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IForm);
    procedure Disconnect; override;
    function GetFieldType(const pName: WideString): FIELD_TYPE;
    procedure Remove;
    function Lock(var pName: OleVariant; bProvisionalOK: WordBool): WordBool;
    function LockProvisional: WordBool; overload;
    function LockProvisional(var pName: OleVariant): WordBool; overload;
    procedure Unlock;
    property DefaultInterface: IForm read GetDefaultInterface;
    property Aliases: OleVariant read Get_Aliases;
    property Fields: OleVariant read Get_Fields;
    property FormUsers: OleVariant read Get_FormUsers write Set_FormUsers;
    property HttpURL: WideString read Get_HttpURL;
    property IsSubForm: WordBool read Get_IsSubForm;
    property Name: WideString read Get_Name;
    property NotesURL: WideString read Get_NotesURL;
    property Parent: IDatabase read Get_Parent;
    property Readers: OleVariant read Get_Readers write Set_Readers;
    property LockHolders: OleVariant read Get_LockHolders;
    property ProtectReaders: WordBool read Get_ProtectReaders write Set_ProtectReaders;
    property ProtectUsers: WordBool read Get_ProtectUsers write Set_ProtectUsers;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TNotesFormProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TNotesForm
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TNotesFormProperties = class(TPersistent)
  private
    FServer:    TNotesForm;
    function    GetDefaultInterface: IForm;
    constructor Create(AServer: TNotesForm);
  protected
    function Get_Aliases: OleVariant;
    function Get_Fields: OleVariant;
    function Get_FormUsers: OleVariant;
    procedure Set_FormUsers(pUsers: OleVariant);
    function Get_HttpURL: WideString;
    function Get_IsSubForm: WordBool;
    function Get_Name: WideString;
    function Get_NotesURL: WideString;
    function Get_Parent: IDatabase;
    function Get_ProtectReaders: WordBool;
    procedure Set_ProtectReaders(pbFlag: WordBool);
    function Get_ProtectUsers: WordBool;
    procedure Set_ProtectUsers(pbFlag: WordBool);
    function Get_Readers: OleVariant;
    procedure Set_Readers(pReaders: OleVariant);
    function Get_LockHolders: OleVariant;
  public
    property DefaultInterface: IForm read GetDefaultInterface;
  published
    property ProtectReaders: WordBool read Get_ProtectReaders write Set_ProtectReaders;
    property ProtectUsers: WordBool read Get_ProtectUsers write Set_ProtectUsers;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoNotesItem provides a Create and CreateRemote method to          
// create instances of the default interface IItem2 exposed by              
// the CoClass NotesItem. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoNotesItem = class
    class function Create: IItem2;
    class function CreateRemote(const MachineName: string): IItem2;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TNotesItem
// Help String      : 
// Default Interface: IItem2
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TNotesItemProperties= class;
{$ENDIF}
  TNotesItem = class(TOleServer)
  private
    FIntf:        IItem2;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TNotesItemProperties;
    function      GetServerProperties: TNotesItemProperties;
{$ENDIF}
    function      GetDefaultInterface: IItem2;
  protected
    procedure InitServerData; override;
    function Get_DateTimeValue: IDateTime;
    procedure Set_DateTimeValue(const ppITime: IDateTime);
    function Get_IsAuthors: WordBool;
    procedure Set_IsAuthors(pbFlag: WordBool);
    function Get_IsEncrypted: WordBool;
    procedure Set_IsEncrypted(pbFlag: WordBool);
    function Get_IsNames: WordBool;
    procedure Set_IsNames(pbFlag: WordBool);
    function Get_IsProtected: WordBool;
    procedure Set_IsProtected(pbFlag: WordBool);
    function Get_IsReaders: WordBool;
    procedure Set_IsReaders(pbFlag: WordBool);
    function Get_IsSigned: WordBool;
    procedure Set_IsSigned(pbFlag: WordBool);
    function Get_IsSummary: WordBool;
    procedure Set_IsSummary(pbFlag: WordBool);
    function Get_LastModified: OleVariant;
    function Get_Name: WideString;
    function Get_Parent: IDocument;
    function Get_SaveToDisk: WordBool;
    procedure Set_SaveToDisk(pbFlag: WordBool);
    function Get_Text: WideString;
    function Get_type_: IT_TYPE;
    function Get_ValueLength: Integer;
    function Get_Values: OleVariant;
    procedure Set_Values(pValue: OleVariant);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IItem2);
    procedure Disconnect; override;
    function Abstract(lMaxlen: Integer; bDropvowels: WordBool; bUsedict: WordBool): WideString;
    procedure AppendToTextList(Values: OleVariant);
    function Contains(Value: OleVariant): WordBool;
    function CopyItemToDocument(const pIDoc: IDocument; const pNewname: WideString): IItem2;
    function GetMIMEEntity: IMIMEEntity;
    procedure Remove;
    function GetValueCustomDataBytes(const pDatatypeName: WideString): OleVariant;
    function GetValueDateTimeArray: OleVariant;
    procedure SetValueCustomDataBytes(const pDatatypeName: WideString; CustomData: OleVariant);
    property DefaultInterface: IItem2 read GetDefaultInterface;
    property LastModified: OleVariant read Get_LastModified;
    property Name: WideString read Get_Name;
    property Parent: IDocument read Get_Parent;
    property Text: WideString read Get_Text;
    property type_: IT_TYPE read Get_type_;
    property ValueLength: Integer read Get_ValueLength;
    property Values: OleVariant read Get_Values write Set_Values;
    property DateTimeValue: IDateTime read Get_DateTimeValue write Set_DateTimeValue;
    property IsAuthors: WordBool read Get_IsAuthors write Set_IsAuthors;
    property IsEncrypted: WordBool read Get_IsEncrypted write Set_IsEncrypted;
    property IsNames: WordBool read Get_IsNames write Set_IsNames;
    property IsProtected: WordBool read Get_IsProtected write Set_IsProtected;
    property IsReaders: WordBool read Get_IsReaders write Set_IsReaders;
    property IsSigned: WordBool read Get_IsSigned write Set_IsSigned;
    property IsSummary: WordBool read Get_IsSummary write Set_IsSummary;
    property SaveToDisk: WordBool read Get_SaveToDisk write Set_SaveToDisk;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TNotesItemProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TNotesItem
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TNotesItemProperties = class(TPersistent)
  private
    FServer:    TNotesItem;
    function    GetDefaultInterface: IItem2;
    constructor Create(AServer: TNotesItem);
  protected
    function Get_DateTimeValue: IDateTime;
    procedure Set_DateTimeValue(const ppITime: IDateTime);
    function Get_IsAuthors: WordBool;
    procedure Set_IsAuthors(pbFlag: WordBool);
    function Get_IsEncrypted: WordBool;
    procedure Set_IsEncrypted(pbFlag: WordBool);
    function Get_IsNames: WordBool;
    procedure Set_IsNames(pbFlag: WordBool);
    function Get_IsProtected: WordBool;
    procedure Set_IsProtected(pbFlag: WordBool);
    function Get_IsReaders: WordBool;
    procedure Set_IsReaders(pbFlag: WordBool);
    function Get_IsSigned: WordBool;
    procedure Set_IsSigned(pbFlag: WordBool);
    function Get_IsSummary: WordBool;
    procedure Set_IsSummary(pbFlag: WordBool);
    function Get_LastModified: OleVariant;
    function Get_Name: WideString;
    function Get_Parent: IDocument;
    function Get_SaveToDisk: WordBool;
    procedure Set_SaveToDisk(pbFlag: WordBool);
    function Get_Text: WideString;
    function Get_type_: IT_TYPE;
    function Get_ValueLength: Integer;
    function Get_Values: OleVariant;
    procedure Set_Values(pValue: OleVariant);
  public
    property DefaultInterface: IItem2 read GetDefaultInterface;
  published
    property DateTimeValue: IDateTime read Get_DateTimeValue write Set_DateTimeValue;
    property IsAuthors: WordBool read Get_IsAuthors write Set_IsAuthors;
    property IsEncrypted: WordBool read Get_IsEncrypted write Set_IsEncrypted;
    property IsNames: WordBool read Get_IsNames write Set_IsNames;
    property IsProtected: WordBool read Get_IsProtected write Set_IsProtected;
    property IsReaders: WordBool read Get_IsReaders write Set_IsReaders;
    property IsSigned: WordBool read Get_IsSigned write Set_IsSigned;
    property IsSummary: WordBool read Get_IsSummary write Set_IsSummary;
    property SaveToDisk: WordBool read Get_SaveToDisk write Set_SaveToDisk;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoNotesInternational provides a Create and CreateRemote method to          
// create instances of the default interface IInternational exposed by              
// the CoClass NotesInternational. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoNotesInternational = class
    class function Create: IInternational;
    class function CreateRemote(const MachineName: string): IInternational;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TNotesInternational
// Help String      : 
// Default Interface: IInternational
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TNotesInternationalProperties= class;
{$ENDIF}
  TNotesInternational = class(TOleServer)
  private
    FIntf:        IInternational;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TNotesInternationalProperties;
    function      GetServerProperties: TNotesInternationalProperties;
{$ENDIF}
    function      GetDefaultInterface: IInternational;
  protected
    procedure InitServerData; override;
    function Get_AMString: WideString;
    function Get_CurrencyDigits: Integer;
    function Get_CurrencySymbol: WideString;
    function Get_DateSep: WideString;
    function Get_DecimalSep: WideString;
    function Get_IsCurrencySpace: WordBool;
    function Get_IsCurrencySuffix: WordBool;
    function Get_IsCurrencyZero: WordBool;
    function Get_IsDateDMY: WordBool;
    function Get_IsDateMDY: WordBool;
    function Get_IsDateYMD: WordBool;
    function Get_IsDST: WordBool;
    function Get_IsTime24Hour: WordBool;
    function Get_Parent: ISession;
    function Get_PMString: WideString;
    function Get_ThousandsSep: WideString;
    function Get_TimeSep: WideString;
    function Get_TimeZone: Integer;
    function Get_Today: WideString;
    function Get_Tomorrow: WideString;
    function Get_Yesterday: WideString;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IInternational);
    procedure Disconnect; override;
    property DefaultInterface: IInternational read GetDefaultInterface;
    property AMString: WideString read Get_AMString;
    property CurrencyDigits: Integer read Get_CurrencyDigits;
    property CurrencySymbol: WideString read Get_CurrencySymbol;
    property DateSep: WideString read Get_DateSep;
    property DecimalSep: WideString read Get_DecimalSep;
    property IsCurrencySpace: WordBool read Get_IsCurrencySpace;
    property IsCurrencySuffix: WordBool read Get_IsCurrencySuffix;
    property IsCurrencyZero: WordBool read Get_IsCurrencyZero;
    property IsDateDMY: WordBool read Get_IsDateDMY;
    property IsDateMDY: WordBool read Get_IsDateMDY;
    property IsDateYMD: WordBool read Get_IsDateYMD;
    property IsDST: WordBool read Get_IsDST;
    property IsTime24Hour: WordBool read Get_IsTime24Hour;
    property Parent: ISession read Get_Parent;
    property PMString: WideString read Get_PMString;
    property ThousandsSep: WideString read Get_ThousandsSep;
    property TimeSep: WideString read Get_TimeSep;
    property TimeZone: Integer read Get_TimeZone;
    property Today: WideString read Get_Today;
    property Tomorrow: WideString read Get_Tomorrow;
    property Yesterday: WideString read Get_Yesterday;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TNotesInternationalProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TNotesInternational
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TNotesInternationalProperties = class(TPersistent)
  private
    FServer:    TNotesInternational;
    function    GetDefaultInterface: IInternational;
    constructor Create(AServer: TNotesInternational);
  protected
    function Get_AMString: WideString;
    function Get_CurrencyDigits: Integer;
    function Get_CurrencySymbol: WideString;
    function Get_DateSep: WideString;
    function Get_DecimalSep: WideString;
    function Get_IsCurrencySpace: WordBool;
    function Get_IsCurrencySuffix: WordBool;
    function Get_IsCurrencyZero: WordBool;
    function Get_IsDateDMY: WordBool;
    function Get_IsDateMDY: WordBool;
    function Get_IsDateYMD: WordBool;
    function Get_IsDST: WordBool;
    function Get_IsTime24Hour: WordBool;
    function Get_Parent: ISession;
    function Get_PMString: WideString;
    function Get_ThousandsSep: WideString;
    function Get_TimeSep: WideString;
    function Get_TimeZone: Integer;
    function Get_Today: WideString;
    function Get_Tomorrow: WideString;
    function Get_Yesterday: WideString;
  public
    property DefaultInterface: IInternational read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoNotesLog provides a Create and CreateRemote method to          
// create instances of the default interface ILog exposed by              
// the CoClass NotesLog. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoNotesLog = class
    class function Create: ILog;
    class function CreateRemote(const MachineName: string): ILog;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TNotesLog
// Help String      : 
// Default Interface: ILog
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TNotesLogProperties= class;
{$ENDIF}
  TNotesLog = class(TOleServer)
  private
    FIntf:        ILog;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TNotesLogProperties;
    function      GetServerProperties: TNotesLogProperties;
{$ENDIF}
    function      GetDefaultInterface: ILog;
  protected
    procedure InitServerData; override;
    function Get_LogActions: WordBool;
    procedure Set_LogActions(pbFlag: WordBool);
    function Get_LogErrors: WordBool;
    procedure Set_LogErrors(pbFlag: WordBool);
    function Get_NumActions: Integer;
    function Get_NumErrors: Integer;
    function Get_OverwriteFile: WordBool;
    procedure Set_OverwriteFile(pbFlag: WordBool);
    function Get_ProgramName: WideString;
    procedure Set_ProgramName(const ppName: WideString);
    function Get_Parent: ISession;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ILog);
    procedure Disconnect; override;
    procedure Close;
    procedure LogAction(const pAction: WideString);
    procedure LogError(lCode: Integer; const pText: WideString);
    procedure LogEvent(const pText: WideString; const pQueue: WideString; lEvent: LOG_EVENTS; 
                       lSeverity: LOG_SEVERITY);
    procedure OpenAgentLog;
    procedure OpenFileLog(const pFilepath: WideString);
    procedure OpenMailLog(Recipients: OleVariant; const pSubject: WideString);
    procedure OpenNotesLog(const pServer: WideString; const pDatabase: WideString);
    property DefaultInterface: ILog read GetDefaultInterface;
    property NumActions: Integer read Get_NumActions;
    property NumErrors: Integer read Get_NumErrors;
    property Parent: ISession read Get_Parent;
    property LogActions: WordBool read Get_LogActions write Set_LogActions;
    property LogErrors: WordBool read Get_LogErrors write Set_LogErrors;
    property OverwriteFile: WordBool read Get_OverwriteFile write Set_OverwriteFile;
    property ProgramName: WideString read Get_ProgramName write Set_ProgramName;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TNotesLogProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TNotesLog
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TNotesLogProperties = class(TPersistent)
  private
    FServer:    TNotesLog;
    function    GetDefaultInterface: ILog;
    constructor Create(AServer: TNotesLog);
  protected
    function Get_LogActions: WordBool;
    procedure Set_LogActions(pbFlag: WordBool);
    function Get_LogErrors: WordBool;
    procedure Set_LogErrors(pbFlag: WordBool);
    function Get_NumActions: Integer;
    function Get_NumErrors: Integer;
    function Get_OverwriteFile: WordBool;
    procedure Set_OverwriteFile(pbFlag: WordBool);
    function Get_ProgramName: WideString;
    procedure Set_ProgramName(const ppName: WideString);
    function Get_Parent: ISession;
  public
    property DefaultInterface: ILog read GetDefaultInterface;
  published
    property LogActions: WordBool read Get_LogActions write Set_LogActions;
    property LogErrors: WordBool read Get_LogErrors write Set_LogErrors;
    property OverwriteFile: WordBool read Get_OverwriteFile write Set_OverwriteFile;
    property ProgramName: WideString read Get_ProgramName write Set_ProgramName;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoNotesName provides a Create and CreateRemote method to          
// create instances of the default interface IName exposed by              
// the CoClass NotesName. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoNotesName = class
    class function Create: IName;
    class function CreateRemote(const MachineName: string): IName;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TNotesName
// Help String      : 
// Default Interface: IName
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TNotesNameProperties= class;
{$ENDIF}
  TNotesName = class(TOleServer)
  private
    FIntf:        IName;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TNotesNameProperties;
    function      GetServerProperties: TNotesNameProperties;
{$ENDIF}
    function      GetDefaultInterface: IName;
  protected
    procedure InitServerData; override;
    function Get_Abbreviated: WideString;
    function Get_Addr821: WideString;
    function Get_Addr822Comment1: WideString;
    function Get_Addr822Comment2: WideString;
    function Get_Addr822Comment3: WideString;
    function Get_Addr822LocalPart: WideString;
    function Get_Addr822Phrase: WideString;
    function Get_ADMD: WideString;
    function Get_Canonical: WideString;
    function Get_Common: WideString;
    function Get_Country: WideString;
    function Get_Generation: WideString;
    function Get_Given: WideString;
    function Get_Initials: WideString;
    function Get_IsHierarchical: WordBool;
    function Get_Keyword: WideString;
    function Get_Language: WideString;
    function Get_Organization: WideString;
    function Get_OrgUnit1: WideString;
    function Get_OrgUnit2: WideString;
    function Get_OrgUnit3: WideString;
    function Get_OrgUnit4: WideString;
    function Get_Parent: ISession;
    function Get_PRMD: WideString;
    function Get_Surname: WideString;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IName);
    procedure Disconnect; override;
    property DefaultInterface: IName read GetDefaultInterface;
    property Abbreviated: WideString read Get_Abbreviated;
    property Addr821: WideString read Get_Addr821;
    property Addr822Comment1: WideString read Get_Addr822Comment1;
    property Addr822Comment2: WideString read Get_Addr822Comment2;
    property Addr822Comment3: WideString read Get_Addr822Comment3;
    property Addr822LocalPart: WideString read Get_Addr822LocalPart;
    property Addr822Phrase: WideString read Get_Addr822Phrase;
    property ADMD: WideString read Get_ADMD;
    property Canonical: WideString read Get_Canonical;
    property Common: WideString read Get_Common;
    property Country: WideString read Get_Country;
    property Generation: WideString read Get_Generation;
    property Given: WideString read Get_Given;
    property Initials: WideString read Get_Initials;
    property IsHierarchical: WordBool read Get_IsHierarchical;
    property Keyword: WideString read Get_Keyword;
    property Language: WideString read Get_Language;
    property Organization: WideString read Get_Organization;
    property OrgUnit1: WideString read Get_OrgUnit1;
    property OrgUnit2: WideString read Get_OrgUnit2;
    property OrgUnit3: WideString read Get_OrgUnit3;
    property OrgUnit4: WideString read Get_OrgUnit4;
    property Parent: ISession read Get_Parent;
    property PRMD: WideString read Get_PRMD;
    property Surname: WideString read Get_Surname;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TNotesNameProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TNotesName
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TNotesNameProperties = class(TPersistent)
  private
    FServer:    TNotesName;
    function    GetDefaultInterface: IName;
    constructor Create(AServer: TNotesName);
  protected
    function Get_Abbreviated: WideString;
    function Get_Addr821: WideString;
    function Get_Addr822Comment1: WideString;
    function Get_Addr822Comment2: WideString;
    function Get_Addr822Comment3: WideString;
    function Get_Addr822LocalPart: WideString;
    function Get_Addr822Phrase: WideString;
    function Get_ADMD: WideString;
    function Get_Canonical: WideString;
    function Get_Common: WideString;
    function Get_Country: WideString;
    function Get_Generation: WideString;
    function Get_Given: WideString;
    function Get_Initials: WideString;
    function Get_IsHierarchical: WordBool;
    function Get_Keyword: WideString;
    function Get_Language: WideString;
    function Get_Organization: WideString;
    function Get_OrgUnit1: WideString;
    function Get_OrgUnit2: WideString;
    function Get_OrgUnit3: WideString;
    function Get_OrgUnit4: WideString;
    function Get_Parent: ISession;
    function Get_PRMD: WideString;
    function Get_Surname: WideString;
  public
    property DefaultInterface: IName read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoNotesNewsletter provides a Create and CreateRemote method to          
// create instances of the default interface INewsletter exposed by              
// the CoClass NotesNewsletter. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoNotesNewsletter = class
    class function Create: INewsletter;
    class function CreateRemote(const MachineName: string): INewsletter;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TNotesNewsletter
// Help String      : 
// Default Interface: INewsletter
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TNotesNewsletterProperties= class;
{$ENDIF}
  TNotesNewsletter = class(TOleServer)
  private
    FIntf:        INewsletter;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TNotesNewsletterProperties;
    function      GetServerProperties: TNotesNewsletterProperties;
{$ENDIF}
    function      GetDefaultInterface: INewsletter;
  protected
    procedure InitServerData; override;
    function Get_DoScore: WordBool;
    procedure Set_DoScore(pbFlag: WordBool);
    function Get_DoSubject: WordBool;
    procedure Set_DoSubject(pbFlag: WordBool);
    function Get_Parent: ISession;
    function Get_SubjectItemName: WideString;
    procedure Set_SubjectItemName(const ppName: WideString);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: INewsletter);
    procedure Disconnect; override;
    function FormatDocument(const pIDb: IDatabase; lIndex: Integer): IDocument;
    function FormatMsgWithDoclinks(const pIDb: IDatabase): IDocument;
    property DefaultInterface: INewsletter read GetDefaultInterface;
    property Parent: ISession read Get_Parent;
    property DoScore: WordBool read Get_DoScore write Set_DoScore;
    property DoSubject: WordBool read Get_DoSubject write Set_DoSubject;
    property SubjectItemName: WideString read Get_SubjectItemName write Set_SubjectItemName;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TNotesNewsletterProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TNotesNewsletter
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TNotesNewsletterProperties = class(TPersistent)
  private
    FServer:    TNotesNewsletter;
    function    GetDefaultInterface: INewsletter;
    constructor Create(AServer: TNotesNewsletter);
  protected
    function Get_DoScore: WordBool;
    procedure Set_DoScore(pbFlag: WordBool);
    function Get_DoSubject: WordBool;
    procedure Set_DoSubject(pbFlag: WordBool);
    function Get_Parent: ISession;
    function Get_SubjectItemName: WideString;
    procedure Set_SubjectItemName(const ppName: WideString);
  public
    property DefaultInterface: INewsletter read GetDefaultInterface;
  published
    property DoScore: WordBool read Get_DoScore write Set_DoScore;
    property DoSubject: WordBool read Get_DoSubject write Set_DoSubject;
    property SubjectItemName: WideString read Get_SubjectItemName write Set_SubjectItemName;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoNotesOutline provides a Create and CreateRemote method to          
// create instances of the default interface IOutline exposed by              
// the CoClass NotesOutline. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoNotesOutline = class
    class function Create: IOutline;
    class function CreateRemote(const MachineName: string): IOutline;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TNotesOutline
// Help String      : 
// Default Interface: IOutline
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TNotesOutlineProperties= class;
{$ENDIF}
  TNotesOutline = class(TOleServer)
  private
    FIntf:        IOutline;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TNotesOutlineProperties;
    function      GetServerProperties: TNotesOutlineProperties;
{$ENDIF}
    function      GetDefaultInterface: IOutline;
  protected
    procedure InitServerData; override;
    function Get_Alias: WideString;
    procedure Set_Alias(const ppAlias: WideString);
    function Get_Comment: WideString;
    procedure Set_Comment(const ppComment: WideString);
    function Get_Name: WideString;
    procedure Set_Name(const ppName: WideString);
    function Get_ParentDatabase: IDatabase;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IOutline);
    procedure Disconnect; override;
    function CreateEntry(const pEntryName: WideString; const pRefEntry: IOutlineEntry; 
                         bAfter: WordBool; bAsChild: WordBool): IOutlineEntry;
    function CreateEntryFrom(const pFromEntry: IOutlineEntry; const pRefEntry: IOutlineEntry; 
                             bAfter: WordBool; bAsChild: WordBool): IOutlineEntry;
    function GetFirst: IOutlineEntry;
    function GetLast: IOutlineEntry;
    function GetParent(const pIEntry: IOutlineEntry): IOutlineEntry;
    function GetNext(const pIEntry: IOutlineEntry): IOutlineEntry;
    function GetNextSibling(const pIEntry: IOutlineEntry): IOutlineEntry;
    function GetPrev(const pIEntry: IOutlineEntry): IOutlineEntry;
    function GetPrevSibling(const pIEntry: IOutlineEntry): IOutlineEntry;
    procedure MoveEntry(const pIEntry: IOutlineEntry; const pIRefEntry: IOutlineEntry; 
                        bAfter: WordBool; bAsChild: WordBool);
    procedure RemoveEntry(const pIEntry: IOutlineEntry);
    procedure Save;
    property DefaultInterface: IOutline read GetDefaultInterface;
    property ParentDatabase: IDatabase read Get_ParentDatabase;
    property Alias: WideString read Get_Alias write Set_Alias;
    property Comment: WideString read Get_Comment write Set_Comment;
    property Name: WideString read Get_Name write Set_Name;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TNotesOutlineProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TNotesOutline
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TNotesOutlineProperties = class(TPersistent)
  private
    FServer:    TNotesOutline;
    function    GetDefaultInterface: IOutline;
    constructor Create(AServer: TNotesOutline);
  protected
    function Get_Alias: WideString;
    procedure Set_Alias(const ppAlias: WideString);
    function Get_Comment: WideString;
    procedure Set_Comment(const ppComment: WideString);
    function Get_Name: WideString;
    procedure Set_Name(const ppName: WideString);
    function Get_ParentDatabase: IDatabase;
  public
    property DefaultInterface: IOutline read GetDefaultInterface;
  published
    property Alias: WideString read Get_Alias write Set_Alias;
    property Comment: WideString read Get_Comment write Set_Comment;
    property Name: WideString read Get_Name write Set_Name;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoNotesOutlineEntry provides a Create and CreateRemote method to          
// create instances of the default interface IOutlineEntry exposed by              
// the CoClass NotesOutlineEntry. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoNotesOutlineEntry = class
    class function Create: IOutlineEntry;
    class function CreateRemote(const MachineName: string): IOutlineEntry;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TNotesOutlineEntry
// Help String      : 
// Default Interface: IOutlineEntry
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TNotesOutlineEntryProperties= class;
{$ENDIF}
  TNotesOutlineEntry = class(TOleServer)
  private
    FIntf:        IOutlineEntry;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TNotesOutlineEntryProperties;
    function      GetServerProperties: TNotesOutlineEntryProperties;
{$ENDIF}
    function      GetDefaultInterface: IOutlineEntry;
  protected
    procedure InitServerData; override;
    function Get_Alias: WideString;
    procedure Set_Alias(const ppAlias: WideString);
    function Get_DATABASE: IDatabase;
    function Get_Document: IDocument;
    function Get_EntryClass: OE_CLASS;
    function Get_FrameText: WideString;
    procedure Set_FrameText(const ppText: WideString);
    function Get_Formula: WideString;
    function Get_HasChildren: WordBool;
    function Get_HideFormula: WideString;
    procedure Set_HideFormula(const ppFormula: WideString);
    function Get_ImagesText: WideString;
    procedure Set_ImagesText(const ppText: WideString);
    function Get_IsHiddenFromNotes: WordBool;
    procedure Set_IsHiddenFromNotes(pbFlag: WordBool);
    function Get_IsHiddenFromWeb: WordBool;
    procedure Set_IsHiddenFromWeb(pbFlag: WordBool);
    function Get_IsInThisDB: WordBool;
    function Get_IsPrivate: WordBool;
    function Get_KeepSelectionFocus: WordBool;
    procedure Set_KeepSelectionFocus(pbFlag: WordBool);
    function Get_Label_: WideString;
    procedure Set_Label_(const ppLabel: WideString);
    function Get_Level: Integer;
    function Get_NamedElement: WideString;
    function Get_Parent: IOutline;
    function Get_type_: OE_TYPE;
    function Get_URL: WideString;
    function Get_UseHideFormula: WordBool;
    procedure Set_UseHideFormula(pbFlag: WordBool);
    function Get_View: IView;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IOutlineEntry);
    procedure Disconnect; override;
    procedure SetAction(const pFormula: WideString);
    procedure SetNamedElement(const pIDb: IDatabase; const pElementName: WideString; 
                              lClass: OE_CLASS);
    procedure SetNoteLink(const pIObj: IUnknown);
    procedure SetURL(const pURL: WideString);
    property DefaultInterface: IOutlineEntry read GetDefaultInterface;
    property DATABASE: IDatabase read Get_DATABASE;
    property Document: IDocument read Get_Document;
    property EntryClass: OE_CLASS read Get_EntryClass;
    property Formula: WideString read Get_Formula;
    property HasChildren: WordBool read Get_HasChildren;
    property IsInThisDB: WordBool read Get_IsInThisDB;
    property IsPrivate: WordBool read Get_IsPrivate;
    property Level: Integer read Get_Level;
    property NamedElement: WideString read Get_NamedElement;
    property Parent: IOutline read Get_Parent;
    property type_: OE_TYPE read Get_type_;
    property URL: WideString read Get_URL;
    property View: IView read Get_View;
    property Alias: WideString read Get_Alias write Set_Alias;
    property FrameText: WideString read Get_FrameText write Set_FrameText;
    property HideFormula: WideString read Get_HideFormula write Set_HideFormula;
    property ImagesText: WideString read Get_ImagesText write Set_ImagesText;
    property IsHiddenFromNotes: WordBool read Get_IsHiddenFromNotes write Set_IsHiddenFromNotes;
    property IsHiddenFromWeb: WordBool read Get_IsHiddenFromWeb write Set_IsHiddenFromWeb;
    property KeepSelectionFocus: WordBool read Get_KeepSelectionFocus write Set_KeepSelectionFocus;
    property Label_: WideString read Get_Label_ write Set_Label_;
    property UseHideFormula: WordBool read Get_UseHideFormula write Set_UseHideFormula;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TNotesOutlineEntryProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TNotesOutlineEntry
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TNotesOutlineEntryProperties = class(TPersistent)
  private
    FServer:    TNotesOutlineEntry;
    function    GetDefaultInterface: IOutlineEntry;
    constructor Create(AServer: TNotesOutlineEntry);
  protected
    function Get_Alias: WideString;
    procedure Set_Alias(const ppAlias: WideString);
    function Get_DATABASE: IDatabase;
    function Get_Document: IDocument;
    function Get_EntryClass: OE_CLASS;
    function Get_FrameText: WideString;
    procedure Set_FrameText(const ppText: WideString);
    function Get_Formula: WideString;
    function Get_HasChildren: WordBool;
    function Get_HideFormula: WideString;
    procedure Set_HideFormula(const ppFormula: WideString);
    function Get_ImagesText: WideString;
    procedure Set_ImagesText(const ppText: WideString);
    function Get_IsHiddenFromNotes: WordBool;
    procedure Set_IsHiddenFromNotes(pbFlag: WordBool);
    function Get_IsHiddenFromWeb: WordBool;
    procedure Set_IsHiddenFromWeb(pbFlag: WordBool);
    function Get_IsInThisDB: WordBool;
    function Get_IsPrivate: WordBool;
    function Get_KeepSelectionFocus: WordBool;
    procedure Set_KeepSelectionFocus(pbFlag: WordBool);
    function Get_Label_: WideString;
    procedure Set_Label_(const ppLabel: WideString);
    function Get_Level: Integer;
    function Get_NamedElement: WideString;
    function Get_Parent: IOutline;
    function Get_type_: OE_TYPE;
    function Get_URL: WideString;
    function Get_UseHideFormula: WordBool;
    procedure Set_UseHideFormula(pbFlag: WordBool);
    function Get_View: IView;
  public
    property DefaultInterface: IOutlineEntry read GetDefaultInterface;
  published
    property Alias: WideString read Get_Alias write Set_Alias;
    property FrameText: WideString read Get_FrameText write Set_FrameText;
    property HideFormula: WideString read Get_HideFormula write Set_HideFormula;
    property ImagesText: WideString read Get_ImagesText write Set_ImagesText;
    property IsHiddenFromNotes: WordBool read Get_IsHiddenFromNotes write Set_IsHiddenFromNotes;
    property IsHiddenFromWeb: WordBool read Get_IsHiddenFromWeb write Set_IsHiddenFromWeb;
    property KeepSelectionFocus: WordBool read Get_KeepSelectionFocus write Set_KeepSelectionFocus;
    property Label_: WideString read Get_Label_ write Set_Label_;
    property UseHideFormula: WordBool read Get_UseHideFormula write Set_UseHideFormula;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoNotesRichTextItem provides a Create and CreateRemote method to          
// create instances of the default interface IRichTextItem exposed by              
// the CoClass NotesRichTextItem. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoNotesRichTextItem = class
    class function Create: IRichTextItem;
    class function CreateRemote(const MachineName: string): IRichTextItem;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TNotesRichTextItem
// Help String      : 
// Default Interface: IRichTextItem
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TNotesRichTextItemProperties= class;
{$ENDIF}
  TNotesRichTextItem = class(TOleServer)
  private
    FIntf:        IRichTextItem;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TNotesRichTextItemProperties;
    function      GetServerProperties: TNotesRichTextItemProperties;
{$ENDIF}
    function      GetDefaultInterface: IRichTextItem;
  protected
    procedure InitServerData; override;
    function Get_DateTimeValue: IDateTime;
    procedure Set_DateTimeValue(const ppITime: IDateTime);
    function Get_IsAuthors: WordBool;
    procedure Set_IsAuthors(pbFlag: WordBool);
    function Get_IsEncrypted: WordBool;
    procedure Set_IsEncrypted(pbFlag: WordBool);
    function Get_IsNames: WordBool;
    procedure Set_IsNames(pbFlag: WordBool);
    function Get_IsProtected: WordBool;
    procedure Set_IsProtected(pbFlag: WordBool);
    function Get_IsReaders: WordBool;
    procedure Set_IsReaders(pbFlag: WordBool);
    function Get_IsSigned: WordBool;
    procedure Set_IsSigned(pbFlag: WordBool);
    function Get_IsSummary: WordBool;
    procedure Set_IsSummary(pbFlag: WordBool);
    function Get_LastModified: OleVariant;
    function Get_Name: WideString;
    function Get_Parent: IDocument;
    function Get_SaveToDisk: WordBool;
    procedure Set_SaveToDisk(pbFlag: WordBool);
    function Get_Text: WideString;
    function Get_type_: IT_TYPE;
    function Get_ValueLength: Integer;
    function Get_Values: OleVariant;
    procedure Set_Values(pValue: OleVariant);
    function Get_EmbeddedObjects: OleVariant;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IRichTextItem);
    procedure Disconnect; override;
    function Abstract(lMaxlen: Integer; bDropvowels: WordBool; bUsedict: WordBool): WideString;
    procedure AppendToTextList(Values: OleVariant);
    function Contains(Value: OleVariant): WordBool;
    function CopyItemToDocument(const pIDoc: IDocument; const pNewname: WideString): IItem2;
    function GetMIMEEntity: IMIMEEntity;
    procedure Remove;
    procedure AddNewLine(lCount: Integer; bNewparagraph: WordBool);
    procedure AddPageBreak(const pIStyle: IRichTextParagraphStyle);
    procedure AddTab(lCount: Integer);
    procedure AppendDocLink(const pIObj: IUnknown; const pComment: WideString; 
                            const pHotspottext: WideString);
    procedure AppendParagraphStyle(const pIStyle: IRichTextParagraphStyle);
    procedure AppendRTItem(const pIRTItem: IRichTextItem);
    procedure AppendStyle(const pIStyle: IRichTextStyle);
    procedure AppendText(const pText: WideString);
    function EmbedObject(lType: EMBED_TYPE; const pClass: WideString; const pSource: WideString; 
                         const pName: WideString): IEmbeddedObject;
    function GetEmbeddedObject(const pName: WideString): IEmbeddedObject;
    function GetFormattedText(bTabstrip: WordBool; lLinelen: Integer): WideString;
    function CreateNavigator: IRichTextNavigator;
    function CreateRange: IRichTextRange;
    procedure AppendTable(lRowCount: Integer; lColumnCount: Integer; var pRowLabels: OleVariant; 
                          lLeftMargin: Integer; var pRTPStyleArray: OleVariant);
    procedure BeginInsert(var pElement: OleVariant; bAfter: WordBool);
    procedure EndInsert;
    procedure BeginSection(const pTitle: WideString; const pTitleStyle: IRichTextStyle; 
                           const pBarColor: IColorObject; bExpand: WordBool);
    procedure EndSection;
    function GetNotesFont(const pFaceName: WideString; bAddOnFail: WordBool): Integer;
    procedure Update;
    procedure Compact;
    function GetUnformattedText: WideString;
    property DefaultInterface: IRichTextItem read GetDefaultInterface;
    property LastModified: OleVariant read Get_LastModified;
    property Name: WideString read Get_Name;
    property Parent: IDocument read Get_Parent;
    property Text: WideString read Get_Text;
    property type_: IT_TYPE read Get_type_;
    property ValueLength: Integer read Get_ValueLength;
    property Values: OleVariant read Get_Values write Set_Values;
    property EmbeddedObjects: OleVariant read Get_EmbeddedObjects;
    property DateTimeValue: IDateTime read Get_DateTimeValue write Set_DateTimeValue;
    property IsAuthors: WordBool read Get_IsAuthors write Set_IsAuthors;
    property IsEncrypted: WordBool read Get_IsEncrypted write Set_IsEncrypted;
    property IsNames: WordBool read Get_IsNames write Set_IsNames;
    property IsProtected: WordBool read Get_IsProtected write Set_IsProtected;
    property IsReaders: WordBool read Get_IsReaders write Set_IsReaders;
    property IsSigned: WordBool read Get_IsSigned write Set_IsSigned;
    property IsSummary: WordBool read Get_IsSummary write Set_IsSummary;
    property SaveToDisk: WordBool read Get_SaveToDisk write Set_SaveToDisk;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TNotesRichTextItemProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TNotesRichTextItem
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TNotesRichTextItemProperties = class(TPersistent)
  private
    FServer:    TNotesRichTextItem;
    function    GetDefaultInterface: IRichTextItem;
    constructor Create(AServer: TNotesRichTextItem);
  protected
    function Get_DateTimeValue: IDateTime;
    procedure Set_DateTimeValue(const ppITime: IDateTime);
    function Get_IsAuthors: WordBool;
    procedure Set_IsAuthors(pbFlag: WordBool);
    function Get_IsEncrypted: WordBool;
    procedure Set_IsEncrypted(pbFlag: WordBool);
    function Get_IsNames: WordBool;
    procedure Set_IsNames(pbFlag: WordBool);
    function Get_IsProtected: WordBool;
    procedure Set_IsProtected(pbFlag: WordBool);
    function Get_IsReaders: WordBool;
    procedure Set_IsReaders(pbFlag: WordBool);
    function Get_IsSigned: WordBool;
    procedure Set_IsSigned(pbFlag: WordBool);
    function Get_IsSummary: WordBool;
    procedure Set_IsSummary(pbFlag: WordBool);
    function Get_LastModified: OleVariant;
    function Get_Name: WideString;
    function Get_Parent: IDocument;
    function Get_SaveToDisk: WordBool;
    procedure Set_SaveToDisk(pbFlag: WordBool);
    function Get_Text: WideString;
    function Get_type_: IT_TYPE;
    function Get_ValueLength: Integer;
    function Get_Values: OleVariant;
    procedure Set_Values(pValue: OleVariant);
    function Get_EmbeddedObjects: OleVariant;
  public
    property DefaultInterface: IRichTextItem read GetDefaultInterface;
  published
    property DateTimeValue: IDateTime read Get_DateTimeValue write Set_DateTimeValue;
    property IsAuthors: WordBool read Get_IsAuthors write Set_IsAuthors;
    property IsEncrypted: WordBool read Get_IsEncrypted write Set_IsEncrypted;
    property IsNames: WordBool read Get_IsNames write Set_IsNames;
    property IsProtected: WordBool read Get_IsProtected write Set_IsProtected;
    property IsReaders: WordBool read Get_IsReaders write Set_IsReaders;
    property IsSigned: WordBool read Get_IsSigned write Set_IsSigned;
    property IsSummary: WordBool read Get_IsSummary write Set_IsSummary;
    property SaveToDisk: WordBool read Get_SaveToDisk write Set_SaveToDisk;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoNotesRichTextStyle provides a Create and CreateRemote method to          
// create instances of the default interface IRichTextStyle exposed by              
// the CoClass NotesRichTextStyle. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoNotesRichTextStyle = class
    class function Create: IRichTextStyle;
    class function CreateRemote(const MachineName: string): IRichTextStyle;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TNotesRichTextStyle
// Help String      : 
// Default Interface: IRichTextStyle
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TNotesRichTextStyleProperties= class;
{$ENDIF}
  TNotesRichTextStyle = class(TOleServer)
  private
    FIntf:        IRichTextStyle;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TNotesRichTextStyleProperties;
    function      GetServerProperties: TNotesRichTextStyleProperties;
{$ENDIF}
    function      GetDefaultInterface: IRichTextStyle;
  protected
    procedure InitServerData; override;
    function Get_Bold: Integer;
    procedure Set_Bold(plValue: Integer);
    function Get_Effects: RT_EFFECTS;
    procedure Set_Effects(plValue: RT_EFFECTS);
    function Get_FontSize: Integer;
    procedure Set_FontSize(plValue: Integer);
    function Get_Italic: Integer;
    procedure Set_Italic(plValue: Integer);
    function Get_NotesColor: COLORS;
    procedure Set_NotesColor(plValue: COLORS);
    function Get_NotesFont: RT_FONTS;
    procedure Set_NotesFont(plValue: RT_FONTS);
    function Get_PassThruHTML: Integer;
    procedure Set_PassThruHTML(plValue: Integer);
    function Get_StrikeThrough: Integer;
    procedure Set_StrikeThrough(plValue: Integer);
    function Get_Underline: Integer;
    procedure Set_Underline(plValue: Integer);
    function Get_Parent: ISession;
    function Get_IsDefault: WordBool;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IRichTextStyle);
    procedure Disconnect; override;
    property DefaultInterface: IRichTextStyle read GetDefaultInterface;
    property Parent: ISession read Get_Parent;
    property IsDefault: WordBool read Get_IsDefault;
    property Bold: Integer read Get_Bold write Set_Bold;
    property Effects: RT_EFFECTS read Get_Effects write Set_Effects;
    property FontSize: Integer read Get_FontSize write Set_FontSize;
    property Italic: Integer read Get_Italic write Set_Italic;
    property NotesColor: COLORS read Get_NotesColor write Set_NotesColor;
    property NotesFont: RT_FONTS read Get_NotesFont write Set_NotesFont;
    property PassThruHTML: Integer read Get_PassThruHTML write Set_PassThruHTML;
    property StrikeThrough: Integer read Get_StrikeThrough write Set_StrikeThrough;
    property Underline: Integer read Get_Underline write Set_Underline;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TNotesRichTextStyleProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TNotesRichTextStyle
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TNotesRichTextStyleProperties = class(TPersistent)
  private
    FServer:    TNotesRichTextStyle;
    function    GetDefaultInterface: IRichTextStyle;
    constructor Create(AServer: TNotesRichTextStyle);
  protected
    function Get_Bold: Integer;
    procedure Set_Bold(plValue: Integer);
    function Get_Effects: RT_EFFECTS;
    procedure Set_Effects(plValue: RT_EFFECTS);
    function Get_FontSize: Integer;
    procedure Set_FontSize(plValue: Integer);
    function Get_Italic: Integer;
    procedure Set_Italic(plValue: Integer);
    function Get_NotesColor: COLORS;
    procedure Set_NotesColor(plValue: COLORS);
    function Get_NotesFont: RT_FONTS;
    procedure Set_NotesFont(plValue: RT_FONTS);
    function Get_PassThruHTML: Integer;
    procedure Set_PassThruHTML(plValue: Integer);
    function Get_StrikeThrough: Integer;
    procedure Set_StrikeThrough(plValue: Integer);
    function Get_Underline: Integer;
    procedure Set_Underline(plValue: Integer);
    function Get_Parent: ISession;
    function Get_IsDefault: WordBool;
  public
    property DefaultInterface: IRichTextStyle read GetDefaultInterface;
  published
    property Bold: Integer read Get_Bold write Set_Bold;
    property Effects: RT_EFFECTS read Get_Effects write Set_Effects;
    property FontSize: Integer read Get_FontSize write Set_FontSize;
    property Italic: Integer read Get_Italic write Set_Italic;
    property NotesColor: COLORS read Get_NotesColor write Set_NotesColor;
    property NotesFont: RT_FONTS read Get_NotesFont write Set_NotesFont;
    property PassThruHTML: Integer read Get_PassThruHTML write Set_PassThruHTML;
    property StrikeThrough: Integer read Get_StrikeThrough write Set_StrikeThrough;
    property Underline: Integer read Get_Underline write Set_Underline;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoNotesRichTextParagraphStyle provides a Create and CreateRemote method to          
// create instances of the default interface IRichTextParagraphStyle exposed by              
// the CoClass NotesRichTextParagraphStyle. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoNotesRichTextParagraphStyle = class
    class function Create: IRichTextParagraphStyle;
    class function CreateRemote(const MachineName: string): IRichTextParagraphStyle;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TNotesRichTextParagraphStyle
// Help String      : 
// Default Interface: IRichTextParagraphStyle
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TNotesRichTextParagraphStyleProperties= class;
{$ENDIF}
  TNotesRichTextParagraphStyle = class(TOleServer)
  private
    FIntf:        IRichTextParagraphStyle;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TNotesRichTextParagraphStyleProperties;
    function      GetServerProperties: TNotesRichTextParagraphStyleProperties;
{$ENDIF}
    function      GetDefaultInterface: IRichTextParagraphStyle;
  protected
    procedure InitServerData; override;
    function Get_Alignment: RT_ALIGN;
    procedure Set_Alignment(plValue: RT_ALIGN);
    function Get_FirstLineLeftMargin: Integer;
    procedure Set_FirstLineLeftMargin(plValue: Integer);
    function Get_InterLineSpacing: SPACING;
    procedure Set_InterLineSpacing(plValue: SPACING);
    function Get_LeftMargin: Integer;
    procedure Set_LeftMargin(plValue: Integer);
    function Get_Pagination: RT_PAGINATE;
    procedure Set_Pagination(plValue: RT_PAGINATE);
    function Get_RightMargin: Integer;
    procedure Set_RightMargin(plValue: Integer);
    function Get_SpacingAbove: SPACING;
    procedure Set_SpacingAbove(plValue: SPACING);
    function Get_SpacingBelow: SPACING;
    procedure Set_SpacingBelow(plValue: SPACING);
    function Get_Tabs: OleVariant;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IRichTextParagraphStyle);
    procedure Disconnect; override;
    procedure ClearAllTabs;
    procedure SetTab(lPosition: Integer; lType: RT_TAB);
    procedure SetTabs(lCount: Integer; lPosition: Integer; lInterval: Integer; lType: RT_TAB);
    property DefaultInterface: IRichTextParagraphStyle read GetDefaultInterface;
    property Tabs: OleVariant read Get_Tabs;
    property Alignment: RT_ALIGN read Get_Alignment write Set_Alignment;
    property FirstLineLeftMargin: Integer read Get_FirstLineLeftMargin write Set_FirstLineLeftMargin;
    property InterLineSpacing: SPACING read Get_InterLineSpacing write Set_InterLineSpacing;
    property LeftMargin: Integer read Get_LeftMargin write Set_LeftMargin;
    property Pagination: RT_PAGINATE read Get_Pagination write Set_Pagination;
    property RightMargin: Integer read Get_RightMargin write Set_RightMargin;
    property SpacingAbove: SPACING read Get_SpacingAbove write Set_SpacingAbove;
    property SpacingBelow: SPACING read Get_SpacingBelow write Set_SpacingBelow;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TNotesRichTextParagraphStyleProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TNotesRichTextParagraphStyle
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TNotesRichTextParagraphStyleProperties = class(TPersistent)
  private
    FServer:    TNotesRichTextParagraphStyle;
    function    GetDefaultInterface: IRichTextParagraphStyle;
    constructor Create(AServer: TNotesRichTextParagraphStyle);
  protected
    function Get_Alignment: RT_ALIGN;
    procedure Set_Alignment(plValue: RT_ALIGN);
    function Get_FirstLineLeftMargin: Integer;
    procedure Set_FirstLineLeftMargin(plValue: Integer);
    function Get_InterLineSpacing: SPACING;
    procedure Set_InterLineSpacing(plValue: SPACING);
    function Get_LeftMargin: Integer;
    procedure Set_LeftMargin(plValue: Integer);
    function Get_Pagination: RT_PAGINATE;
    procedure Set_Pagination(plValue: RT_PAGINATE);
    function Get_RightMargin: Integer;
    procedure Set_RightMargin(plValue: Integer);
    function Get_SpacingAbove: SPACING;
    procedure Set_SpacingAbove(plValue: SPACING);
    function Get_SpacingBelow: SPACING;
    procedure Set_SpacingBelow(plValue: SPACING);
    function Get_Tabs: OleVariant;
  public
    property DefaultInterface: IRichTextParagraphStyle read GetDefaultInterface;
  published
    property Alignment: RT_ALIGN read Get_Alignment write Set_Alignment;
    property FirstLineLeftMargin: Integer read Get_FirstLineLeftMargin write Set_FirstLineLeftMargin;
    property InterLineSpacing: SPACING read Get_InterLineSpacing write Set_InterLineSpacing;
    property LeftMargin: Integer read Get_LeftMargin write Set_LeftMargin;
    property Pagination: RT_PAGINATE read Get_Pagination write Set_Pagination;
    property RightMargin: Integer read Get_RightMargin write Set_RightMargin;
    property SpacingAbove: SPACING read Get_SpacingAbove write Set_SpacingAbove;
    property SpacingBelow: SPACING read Get_SpacingBelow write Set_SpacingBelow;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoNotesRichTextTab provides a Create and CreateRemote method to          
// create instances of the default interface IRichTextTab exposed by              
// the CoClass NotesRichTextTab. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoNotesRichTextTab = class
    class function Create: IRichTextTab;
    class function CreateRemote(const MachineName: string): IRichTextTab;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TNotesRichTextTab
// Help String      : 
// Default Interface: IRichTextTab
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TNotesRichTextTabProperties= class;
{$ENDIF}
  TNotesRichTextTab = class(TOleServer)
  private
    FIntf:        IRichTextTab;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TNotesRichTextTabProperties;
    function      GetServerProperties: TNotesRichTextTabProperties;
{$ENDIF}
    function      GetDefaultInterface: IRichTextTab;
  protected
    procedure InitServerData; override;
    function Get_Position: Integer;
    function Get_type_: RT_TAB;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IRichTextTab);
    procedure Disconnect; override;
    procedure Clear;
    property DefaultInterface: IRichTextTab read GetDefaultInterface;
    property Position: Integer read Get_Position;
    property type_: RT_TAB read Get_type_;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TNotesRichTextTabProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TNotesRichTextTab
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TNotesRichTextTabProperties = class(TPersistent)
  private
    FServer:    TNotesRichTextTab;
    function    GetDefaultInterface: IRichTextTab;
    constructor Create(AServer: TNotesRichTextTab);
  protected
    function Get_Position: Integer;
    function Get_type_: RT_TAB;
  public
    property DefaultInterface: IRichTextTab read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoNotesRegistration provides a Create and CreateRemote method to          
// create instances of the default interface IRegistration exposed by              
// the CoClass NotesRegistration. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoNotesRegistration = class
    class function Create: IRegistration;
    class function CreateRemote(const MachineName: string): IRegistration;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TNotesRegistration
// Help String      : 
// Default Interface: IRegistration
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TNotesRegistrationProperties= class;
{$ENDIF}
  TNotesRegistration = class(TOleServer)
  private
    FIntf:        IRegistration;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TNotesRegistrationProperties;
    function      GetServerProperties: TNotesRegistrationProperties;
{$ENDIF}
    function      GetDefaultInterface: IRegistration;
  protected
    procedure InitServerData; override;
    function Get_CertifierIDFile: WideString;
    procedure Set_CertifierIDFile(const ppFile: WideString);
    function Get_CreateMailDb: WordBool;
    procedure Set_CreateMailDb(pbFlag: WordBool);
    function Get_Expiration: OleVariant;
    procedure Set_Expiration(pDate: OleVariant);
    function Get_IDType: REG_TYPE;
    procedure Set_IDType(plType: REG_TYPE);
    function Get_IsNorthAmerican: WordBool;
    procedure Set_IsNorthAmerican(pbFlag: WordBool);
    function Get_MinPasswordLength: Integer;
    procedure Set_MinPasswordLength(plLen: Integer);
    function Get_OrgUnit: WideString;
    procedure Set_OrgUnit(const ppUnit: WideString);
    function Get_RegistrationLog: WideString;
    procedure Set_RegistrationLog(const ppLog: WideString);
    function Get_RegistrationServer: WideString;
    procedure Set_RegistrationServer(const ppServer: WideString);
    function Get_StoreIDInAddressBook: WordBool;
    procedure Set_StoreIDInAddressBook(pbFlag: WordBool);
    function Get_UpdateAddressBook: WordBool;
    procedure Set_UpdateAddressBook(pbFlag: WordBool);
    function Get_CertifierName: WideString;
    procedure Set_CertifierName(const ppCertName: WideString);
    function Get_MailACLManager: WideString;
    procedure Set_MailACLManager(const ppMailACLManager: WideString);
    function Get_MailInternetAddress: WideString;
    procedure Set_MailInternetAddress(const ppMailInternetAddress: WideString);
    function Get_MailTemplateName: WideString;
    procedure Set_MailTemplateName(const ppMailTemplateName: WideString);
    function Get_PolicyName: WideString;
    procedure Set_PolicyName(const ppPolicyName: WideString);
    function Get_RoamingServer: WideString;
    procedure Set_RoamingServer(const ppRoamingServer: WideString);
    function Get_RoamingSubdir: WideString;
    procedure Set_RoamingSubdir(const ppRoamingSubdir: WideString);
    function Get_ShortName: WideString;
    procedure Set_ShortName(const ppShortName: WideString);
    function Get_EnforceUniqueShortName: WordBool;
    procedure Set_EnforceUniqueShortName(pbEnforceUniqueShortName: WordBool);
    function Get_IsRoamingUser: WordBool;
    procedure Set_IsRoamingUser(pbIsRoamingUser: WordBool);
    function Get_MailCreateFTIndex: WordBool;
    procedure Set_MailCreateFTIndex(pbMailCreateFTIndex: WordBool);
    function Get_NoIDFile: WordBool;
    procedure Set_NoIDFile(pbNoIDFile: WordBool);
    function Get_StoreIDInMailfile: WordBool;
    procedure Set_StoreIDInMailfile(pbStoreIDInMailfile: WordBool);
    function Get_SynchInternetPassword: WordBool;
    procedure Set_SynchInternetPassword(pbSynchInternetPassword: WordBool);
    function Get_UseCertificateAuthority: WordBool;
    procedure Set_UseCertificateAuthority(pbUseCertificateAuthority: WordBool);
    function Get_MailOwnerAccess: REG_MAILOWNACL;
    procedure Set_MailOwnerAccess(plMailOwnerAccess: REG_MAILOWNACL);
    function Get_MailSystem: REG_MAILTYPE;
    procedure Set_MailSystem(plMailSystem: REG_MAILTYPE);
    function Get_RoamingCleanupSetting: REG_ROAMCLEANUP;
    procedure Set_RoamingCleanupSetting(plRoamingCleanupSetting: REG_ROAMCLEANUP);
    function Get_MailQuotaSizeLimit: Integer;
    procedure Set_MailQuotaSizeLimit(plMailQuotaSizeLimit: Integer);
    function Get_MailQuotaWarningThreshold: Integer;
    procedure Set_MailQuotaWarningThreshold(plMailQuotaWarningThreshold: Integer);
    function Get_RoamingCleanupPeriod: Integer;
    procedure Set_RoamingCleanupPeriod(plRoamingCleanupPeriod: Integer);
    function Get_GroupList: OleVariant;
    procedure Set_GroupList(pGroupList: OleVariant);
    function Get_MailReplicaServers: OleVariant;
    procedure Set_MailReplicaServers(pMailReplicaServers: OleVariant);
    function Get_AltOrgUnit: OleVariant;
    procedure Set_AltOrgUnit(pAltOrgUnit: OleVariant);
    function Get_AltOrgUnitLang: OleVariant;
    procedure Set_AltOrgUnitLang(pAltOrgUnitLang: OleVariant);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IRegistration);
    procedure Disconnect; override;
    procedure AddCertifierToAddressBook(const pIdfile: WideString; const pPassword: WideString; 
                                        const pLocation: WideString; const pComment: WideString);
    procedure AddServerToAddressBook(const pIdfile: WideString; const pServer: WideString; 
                                     const pDomain: WideString; const pUserpw: WideString; 
                                     const pNetwork: WideString; const pAdminname: WideString; 
                                     const pTitle: WideString; const pLocation: WideString; 
                                     const pComment: WideString);
    procedure AddUserProfile(const pUsername: WideString; const pProfile: WideString);
    procedure AddUserToAddressBook(const pIdfile: WideString; const pFullname: WideString; 
                                   const pLastn: WideString; const pUserpw: WideString; 
                                   const pFirstn: WideString; const pMiddle: WideString; 
                                   const pMailserv: WideString; const pMailfilepath: WideString; 
                                   const pFwdaddr: WideString; const pLocation: WideString; 
                                   const pComment: WideString);
    procedure CrossCertify(const pIdfile: WideString; const pCertpw: WideString; 
                           const pComment: WideString);
    procedure DeleteIDOnServer(const pUsername: WideString; bIsserverid: WordBool);
    procedure GetIDFromServer(const pUsername: WideString; const pFilepath: WideString; 
                              bIsserverid: WordBool);
    procedure GetUserInfo(const pUsername: WideString; out ppMailserver: WideString; 
                          out ppMailfile: WideString; out ppMaildomain: WideString; 
                          out pMailsystem: Integer); overload;
    procedure GetUserInfo(const pUsername: WideString; out ppMailserver: WideString; 
                          out ppMailfile: WideString; out ppMaildomain: WideString; 
                          out pMailsystem: Integer; out pProfile: OleVariant); overload;
    procedure Recertify(const pIdfile: WideString; const pCertpw: WideString; 
                        const pComment: WideString);
    procedure RegisterNewCertifier(const pOrg: WideString; const pIdfile: WideString; 
                                   const pCertpw: WideString; const pCountry: WideString);
    procedure RegisterNewServer(const pServer: WideString; const pIdfile: WideString; 
                                const pDomain: WideString; const pServerpw: WideString; 
                                const pCertpw: WideString; const pLocation: WideString; 
                                const pComment: WideString; const pNetwork: WideString; 
                                const pAdminname: WideString; const pTitle: WideString);
    procedure RegisterNewUser(const pLastn: WideString; const pIdfile: WideString; 
                              const pServer: WideString; const pFirstn: WideString; 
                              const pMiddle: WideString; const pCertpw: WideString; 
                              const pLocation: WideString; const pComment: WideString; 
                              const pMaildbpath: WideString; const pForward: WideString; 
                              const pUserpw: WideString; const pAltName: WideString; 
                              const pAltLang: WideString; type_: USER_TYPE);
    function SwitchToID(const pIdfile: WideString; const pUserpw: WideString): WideString;
    property DefaultInterface: IRegistration read GetDefaultInterface;
    property Expiration: OleVariant read Get_Expiration write Set_Expiration;
    property GroupList: OleVariant read Get_GroupList write Set_GroupList;
    property MailReplicaServers: OleVariant read Get_MailReplicaServers write Set_MailReplicaServers;
    property AltOrgUnit: OleVariant read Get_AltOrgUnit write Set_AltOrgUnit;
    property AltOrgUnitLang: OleVariant read Get_AltOrgUnitLang write Set_AltOrgUnitLang;
    property CertifierIDFile: WideString read Get_CertifierIDFile write Set_CertifierIDFile;
    property CreateMailDb: WordBool read Get_CreateMailDb write Set_CreateMailDb;
    property IDType: REG_TYPE read Get_IDType write Set_IDType;
    property IsNorthAmerican: WordBool read Get_IsNorthAmerican write Set_IsNorthAmerican;
    property MinPasswordLength: Integer read Get_MinPasswordLength write Set_MinPasswordLength;
    property OrgUnit: WideString read Get_OrgUnit write Set_OrgUnit;
    property RegistrationLog: WideString read Get_RegistrationLog write Set_RegistrationLog;
    property RegistrationServer: WideString read Get_RegistrationServer write Set_RegistrationServer;
    property StoreIDInAddressBook: WordBool read Get_StoreIDInAddressBook write Set_StoreIDInAddressBook;
    property UpdateAddressBook: WordBool read Get_UpdateAddressBook write Set_UpdateAddressBook;
    property CertifierName: WideString read Get_CertifierName write Set_CertifierName;
    property MailACLManager: WideString read Get_MailACLManager write Set_MailACLManager;
    property MailInternetAddress: WideString read Get_MailInternetAddress write Set_MailInternetAddress;
    property MailTemplateName: WideString read Get_MailTemplateName write Set_MailTemplateName;
    property PolicyName: WideString read Get_PolicyName write Set_PolicyName;
    property RoamingServer: WideString read Get_RoamingServer write Set_RoamingServer;
    property RoamingSubdir: WideString read Get_RoamingSubdir write Set_RoamingSubdir;
    property ShortName: WideString read Get_ShortName write Set_ShortName;
    property EnforceUniqueShortName: WordBool read Get_EnforceUniqueShortName write Set_EnforceUniqueShortName;
    property IsRoamingUser: WordBool read Get_IsRoamingUser write Set_IsRoamingUser;
    property MailCreateFTIndex: WordBool read Get_MailCreateFTIndex write Set_MailCreateFTIndex;
    property NoIDFile: WordBool read Get_NoIDFile write Set_NoIDFile;
    property StoreIDInMailfile: WordBool read Get_StoreIDInMailfile write Set_StoreIDInMailfile;
    property SynchInternetPassword: WordBool read Get_SynchInternetPassword write Set_SynchInternetPassword;
    property UseCertificateAuthority: WordBool read Get_UseCertificateAuthority write Set_UseCertificateAuthority;
    property MailOwnerAccess: REG_MAILOWNACL read Get_MailOwnerAccess write Set_MailOwnerAccess;
    property MailSystem: REG_MAILTYPE read Get_MailSystem write Set_MailSystem;
    property RoamingCleanupSetting: REG_ROAMCLEANUP read Get_RoamingCleanupSetting write Set_RoamingCleanupSetting;
    property MailQuotaSizeLimit: Integer read Get_MailQuotaSizeLimit write Set_MailQuotaSizeLimit;
    property MailQuotaWarningThreshold: Integer read Get_MailQuotaWarningThreshold write Set_MailQuotaWarningThreshold;
    property RoamingCleanupPeriod: Integer read Get_RoamingCleanupPeriod write Set_RoamingCleanupPeriod;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TNotesRegistrationProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TNotesRegistration
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TNotesRegistrationProperties = class(TPersistent)
  private
    FServer:    TNotesRegistration;
    function    GetDefaultInterface: IRegistration;
    constructor Create(AServer: TNotesRegistration);
  protected
    function Get_CertifierIDFile: WideString;
    procedure Set_CertifierIDFile(const ppFile: WideString);
    function Get_CreateMailDb: WordBool;
    procedure Set_CreateMailDb(pbFlag: WordBool);
    function Get_Expiration: OleVariant;
    procedure Set_Expiration(pDate: OleVariant);
    function Get_IDType: REG_TYPE;
    procedure Set_IDType(plType: REG_TYPE);
    function Get_IsNorthAmerican: WordBool;
    procedure Set_IsNorthAmerican(pbFlag: WordBool);
    function Get_MinPasswordLength: Integer;
    procedure Set_MinPasswordLength(plLen: Integer);
    function Get_OrgUnit: WideString;
    procedure Set_OrgUnit(const ppUnit: WideString);
    function Get_RegistrationLog: WideString;
    procedure Set_RegistrationLog(const ppLog: WideString);
    function Get_RegistrationServer: WideString;
    procedure Set_RegistrationServer(const ppServer: WideString);
    function Get_StoreIDInAddressBook: WordBool;
    procedure Set_StoreIDInAddressBook(pbFlag: WordBool);
    function Get_UpdateAddressBook: WordBool;
    procedure Set_UpdateAddressBook(pbFlag: WordBool);
    function Get_CertifierName: WideString;
    procedure Set_CertifierName(const ppCertName: WideString);
    function Get_MailACLManager: WideString;
    procedure Set_MailACLManager(const ppMailACLManager: WideString);
    function Get_MailInternetAddress: WideString;
    procedure Set_MailInternetAddress(const ppMailInternetAddress: WideString);
    function Get_MailTemplateName: WideString;
    procedure Set_MailTemplateName(const ppMailTemplateName: WideString);
    function Get_PolicyName: WideString;
    procedure Set_PolicyName(const ppPolicyName: WideString);
    function Get_RoamingServer: WideString;
    procedure Set_RoamingServer(const ppRoamingServer: WideString);
    function Get_RoamingSubdir: WideString;
    procedure Set_RoamingSubdir(const ppRoamingSubdir: WideString);
    function Get_ShortName: WideString;
    procedure Set_ShortName(const ppShortName: WideString);
    function Get_EnforceUniqueShortName: WordBool;
    procedure Set_EnforceUniqueShortName(pbEnforceUniqueShortName: WordBool);
    function Get_IsRoamingUser: WordBool;
    procedure Set_IsRoamingUser(pbIsRoamingUser: WordBool);
    function Get_MailCreateFTIndex: WordBool;
    procedure Set_MailCreateFTIndex(pbMailCreateFTIndex: WordBool);
    function Get_NoIDFile: WordBool;
    procedure Set_NoIDFile(pbNoIDFile: WordBool);
    function Get_StoreIDInMailfile: WordBool;
    procedure Set_StoreIDInMailfile(pbStoreIDInMailfile: WordBool);
    function Get_SynchInternetPassword: WordBool;
    procedure Set_SynchInternetPassword(pbSynchInternetPassword: WordBool);
    function Get_UseCertificateAuthority: WordBool;
    procedure Set_UseCertificateAuthority(pbUseCertificateAuthority: WordBool);
    function Get_MailOwnerAccess: REG_MAILOWNACL;
    procedure Set_MailOwnerAccess(plMailOwnerAccess: REG_MAILOWNACL);
    function Get_MailSystem: REG_MAILTYPE;
    procedure Set_MailSystem(plMailSystem: REG_MAILTYPE);
    function Get_RoamingCleanupSetting: REG_ROAMCLEANUP;
    procedure Set_RoamingCleanupSetting(plRoamingCleanupSetting: REG_ROAMCLEANUP);
    function Get_MailQuotaSizeLimit: Integer;
    procedure Set_MailQuotaSizeLimit(plMailQuotaSizeLimit: Integer);
    function Get_MailQuotaWarningThreshold: Integer;
    procedure Set_MailQuotaWarningThreshold(plMailQuotaWarningThreshold: Integer);
    function Get_RoamingCleanupPeriod: Integer;
    procedure Set_RoamingCleanupPeriod(plRoamingCleanupPeriod: Integer);
    function Get_GroupList: OleVariant;
    procedure Set_GroupList(pGroupList: OleVariant);
    function Get_MailReplicaServers: OleVariant;
    procedure Set_MailReplicaServers(pMailReplicaServers: OleVariant);
    function Get_AltOrgUnit: OleVariant;
    procedure Set_AltOrgUnit(pAltOrgUnit: OleVariant);
    function Get_AltOrgUnitLang: OleVariant;
    procedure Set_AltOrgUnitLang(pAltOrgUnitLang: OleVariant);
  public
    property DefaultInterface: IRegistration read GetDefaultInterface;
  published
    property CertifierIDFile: WideString read Get_CertifierIDFile write Set_CertifierIDFile;
    property CreateMailDb: WordBool read Get_CreateMailDb write Set_CreateMailDb;
    property IDType: REG_TYPE read Get_IDType write Set_IDType;
    property IsNorthAmerican: WordBool read Get_IsNorthAmerican write Set_IsNorthAmerican;
    property MinPasswordLength: Integer read Get_MinPasswordLength write Set_MinPasswordLength;
    property OrgUnit: WideString read Get_OrgUnit write Set_OrgUnit;
    property RegistrationLog: WideString read Get_RegistrationLog write Set_RegistrationLog;
    property RegistrationServer: WideString read Get_RegistrationServer write Set_RegistrationServer;
    property StoreIDInAddressBook: WordBool read Get_StoreIDInAddressBook write Set_StoreIDInAddressBook;
    property UpdateAddressBook: WordBool read Get_UpdateAddressBook write Set_UpdateAddressBook;
    property CertifierName: WideString read Get_CertifierName write Set_CertifierName;
    property MailACLManager: WideString read Get_MailACLManager write Set_MailACLManager;
    property MailInternetAddress: WideString read Get_MailInternetAddress write Set_MailInternetAddress;
    property MailTemplateName: WideString read Get_MailTemplateName write Set_MailTemplateName;
    property PolicyName: WideString read Get_PolicyName write Set_PolicyName;
    property RoamingServer: WideString read Get_RoamingServer write Set_RoamingServer;
    property RoamingSubdir: WideString read Get_RoamingSubdir write Set_RoamingSubdir;
    property ShortName: WideString read Get_ShortName write Set_ShortName;
    property EnforceUniqueShortName: WordBool read Get_EnforceUniqueShortName write Set_EnforceUniqueShortName;
    property IsRoamingUser: WordBool read Get_IsRoamingUser write Set_IsRoamingUser;
    property MailCreateFTIndex: WordBool read Get_MailCreateFTIndex write Set_MailCreateFTIndex;
    property NoIDFile: WordBool read Get_NoIDFile write Set_NoIDFile;
    property StoreIDInMailfile: WordBool read Get_StoreIDInMailfile write Set_StoreIDInMailfile;
    property SynchInternetPassword: WordBool read Get_SynchInternetPassword write Set_SynchInternetPassword;
    property UseCertificateAuthority: WordBool read Get_UseCertificateAuthority write Set_UseCertificateAuthority;
    property MailOwnerAccess: REG_MAILOWNACL read Get_MailOwnerAccess write Set_MailOwnerAccess;
    property MailSystem: REG_MAILTYPE read Get_MailSystem write Set_MailSystem;
    property RoamingCleanupSetting: REG_ROAMCLEANUP read Get_RoamingCleanupSetting write Set_RoamingCleanupSetting;
    property MailQuotaSizeLimit: Integer read Get_MailQuotaSizeLimit write Set_MailQuotaSizeLimit;
    property MailQuotaWarningThreshold: Integer read Get_MailQuotaWarningThreshold write Set_MailQuotaWarningThreshold;
    property RoamingCleanupPeriod: Integer read Get_RoamingCleanupPeriod write Set_RoamingCleanupPeriod;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoNotesReplication provides a Create and CreateRemote method to          
// create instances of the default interface IReplication exposed by              
// the CoClass NotesReplication. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoNotesReplication = class
    class function Create: IReplication;
    class function CreateRemote(const MachineName: string): IReplication;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TNotesReplication
// Help String      : 
// Default Interface: IReplication
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TNotesReplicationProperties= class;
{$ENDIF}
  TNotesReplication = class(TOleServer)
  private
    FIntf:        IReplication;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TNotesReplicationProperties;
    function      GetServerProperties: TNotesReplicationProperties;
{$ENDIF}
    function      GetDefaultInterface: IReplication;
  protected
    procedure InitServerData; override;
    procedure Set_Abstract(pbFlag: WordBool);
    function Get_Abstract: WordBool;
    function Get_CutoffDate: OleVariant;
    function Get_CutoffDelete: WordBool;
    procedure Set_CutoffDelete(pbFlag: WordBool);
    function Get_CutoffInterval: Integer;
    procedure Set_CutoffInterval(plInterval: Integer);
    procedure Set_Disabled(pbFlag: WordBool);
    function Get_Disabled: WordBool;
    procedure Set_IgnoreDeletes(pbFlag: WordBool);
    function Get_IgnoreDeletes: WordBool;
    procedure Set_IgnoreDestDeletes(pbFlag: WordBool);
    function Get_IgnoreDestDeletes: WordBool;
    function Get_Priority: RP_PRIORITY;
    procedure Set_Priority(plPriority: RP_PRIORITY);
    function Get_DontSendLocalSecurityUpdates: WordBool;
    procedure Set_DontSendLocalSecurityUpdates(bValue: WordBool);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IReplication);
    procedure Disconnect; override;
    procedure ClearHistory;
    procedure Reset;
    procedure Save;
    function GetEntry(const pSourceServer: WideString; const pDestinationServer: WideString; 
                      bCreate: WordBool): IReplicationEntry;
    property DefaultInterface: IReplication read GetDefaultInterface;
    property CutoffDate: OleVariant read Get_CutoffDate;
    property Abstract: WordBool read Get_Abstract write Set_Abstract;
    property CutoffDelete: WordBool read Get_CutoffDelete write Set_CutoffDelete;
    property CutoffInterval: Integer read Get_CutoffInterval write Set_CutoffInterval;
    property Disabled: WordBool read Get_Disabled write Set_Disabled;
    property IgnoreDeletes: WordBool read Get_IgnoreDeletes write Set_IgnoreDeletes;
    property IgnoreDestDeletes: WordBool read Get_IgnoreDestDeletes write Set_IgnoreDestDeletes;
    property Priority: RP_PRIORITY read Get_Priority write Set_Priority;
    property DontSendLocalSecurityUpdates: WordBool read Get_DontSendLocalSecurityUpdates write Set_DontSendLocalSecurityUpdates;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TNotesReplicationProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TNotesReplication
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TNotesReplicationProperties = class(TPersistent)
  private
    FServer:    TNotesReplication;
    function    GetDefaultInterface: IReplication;
    constructor Create(AServer: TNotesReplication);
  protected
    procedure Set_Abstract(pbFlag: WordBool);
    function Get_Abstract: WordBool;
    function Get_CutoffDate: OleVariant;
    function Get_CutoffDelete: WordBool;
    procedure Set_CutoffDelete(pbFlag: WordBool);
    function Get_CutoffInterval: Integer;
    procedure Set_CutoffInterval(plInterval: Integer);
    procedure Set_Disabled(pbFlag: WordBool);
    function Get_Disabled: WordBool;
    procedure Set_IgnoreDeletes(pbFlag: WordBool);
    function Get_IgnoreDeletes: WordBool;
    procedure Set_IgnoreDestDeletes(pbFlag: WordBool);
    function Get_IgnoreDestDeletes: WordBool;
    function Get_Priority: RP_PRIORITY;
    procedure Set_Priority(plPriority: RP_PRIORITY);
    function Get_DontSendLocalSecurityUpdates: WordBool;
    procedure Set_DontSendLocalSecurityUpdates(bValue: WordBool);
  public
    property DefaultInterface: IReplication read GetDefaultInterface;
  published
    property Abstract: WordBool read Get_Abstract write Set_Abstract;
    property CutoffDelete: WordBool read Get_CutoffDelete write Set_CutoffDelete;
    property CutoffInterval: Integer read Get_CutoffInterval write Set_CutoffInterval;
    property Disabled: WordBool read Get_Disabled write Set_Disabled;
    property IgnoreDeletes: WordBool read Get_IgnoreDeletes write Set_IgnoreDeletes;
    property IgnoreDestDeletes: WordBool read Get_IgnoreDestDeletes write Set_IgnoreDestDeletes;
    property Priority: RP_PRIORITY read Get_Priority write Set_Priority;
    property DontSendLocalSecurityUpdates: WordBool read Get_DontSendLocalSecurityUpdates write Set_DontSendLocalSecurityUpdates;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoNotesSession provides a Create and CreateRemote method to          
// create instances of the default interface ISession exposed by              
// the CoClass NotesSession. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoNotesSession = class
    class function Create: ISession;
    class function CreateRemote(const MachineName: string): ISession;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TNotesSession
// Help String      : 
// Default Interface: ISession
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TNotesSessionProperties= class;
{$ENDIF}
  TNotesSession = class(TOleServer)
  private
    FIntf:        ISession;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TNotesSessionProperties;
    function      GetServerProperties: TNotesSessionProperties;
{$ENDIF}
    function      GetDefaultInterface: ISession;
  protected
    procedure InitServerData; override;
    function Get_AddressBooks: OleVariant;
    function Get_CommonUserName: WideString;
    function Get_CurrentAgent: IAgent;
    function Get_CurrentDatabase: IDatabase;
    function Get_DocumentContext: IDocument;
    function Get_EffectiveUserName: WideString;
    function Get_HttpURL: WideString;
    function Get_International: IInternational;
    procedure Set_ConvertMime(pbFlag: WordBool);
    function Get_ConvertMime: WordBool;
    function Get_IsOnServer: WordBool;
    function Get_LastExitStatus: Integer;
    function Get_LastRun: OleVariant;
    function Get_NotesBuildVersion: Integer;
    function Get_NotesURL: WideString;
    function Get_NotesVersion: WideString;
    function Get_Platform: WideString;
    function Get_SavedData: IDocument;
    function Get_ServerName: WideString;
    function Get_UserName: WideString;
    function Get_UserNameList: OleVariant;
    function Get_UserNameObject: IName;
    function Get_URLDatabase: IDatabase;
    function Get_UserGroupNameList: OleVariant;
    function Get_OrgDirectoryPath: WideString;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ISession);
    procedure Disconnect; override;
    function CreateDateRange: IDateRange;
    function CreateDateTime(const pDate: WideString): IDateTime;
    function CreateLog(const Name: WideString): ILog;
    function CreateName(const pName: WideString; const pLang: WideString): IName;
    function CreateNewsletter(const pIDc: IDocumentCollection): INewsletter;
    function CreateRegistration: IRegistration;
    function CreateRichTextParagraphStyle: IRichTextParagraphStyle;
    function CreateRichTextStyle: IRichTextStyle;
    function Evaluate(const pFormula: WideString; const pIDoc: IDocument): OleVariant;
    function FreeTimeSearch(const pIWindow: IDateRange; iDuration: SYSINT; Names: OleVariant; 
                            bFirstfit: WordBool): OleVariant;
    function GetDatabase(const pServer: WideString; const pFile: WideString; bCreateonfail: WordBool): IDatabase;
    function GetDbDirectory(const pServer: WideString): IDbDirectory;
    function GetEnvironmentString(const pName: WideString; bisSystem: WordBool): WideString;
    function GetEnvironmentValue(const pName: WideString; bisSystem: WordBool): OleVariant;
    procedure Initialize(const pPassword: WideString);
    procedure InitializeUsingNotesUserName(const pUser: WideString; const pPassword: WideString);
    procedure SetEnvironmentVar(const pName: WideString; Value: OleVariant; bisSystem: WordBool);
    procedure UpdateProcessedDoc(const pIDoc: IDocument);
    function Resolve(const pURL: WideString): IUnknown;
    function CreateAdministrationProcess(const pServer: WideString): IAdministrationProcess;
    function CreateStream: INotesStream;
    function SendConsoleCommand(const pServer: WideString; const pCommand: WideString): WideString;
    function CreateColorObject: IColorObject;
    function CreateDXLExporter: IDXLExporter;
    function CreateDXLImporter: IDXLImporter;
    function GetUserPolicySettings(const pServer: WideString; const pName: WideString; 
                                   lType: SESS_POLICY; const pExplicitPolicy: WideString; 
                                   const pReserved: WideString): IDocument;
    function HashPassword(const pPassword: WideString): WideString;
    function VerifyPassword(const pPassword: WideString; const pHashedPassword: WideString): WordBool;
    property DefaultInterface: ISession read GetDefaultInterface;
    property AddressBooks: OleVariant read Get_AddressBooks;
    property CommonUserName: WideString read Get_CommonUserName;
    property CurrentAgent: IAgent read Get_CurrentAgent;
    property CurrentDatabase: IDatabase read Get_CurrentDatabase;
    property DocumentContext: IDocument read Get_DocumentContext;
    property EffectiveUserName: WideString read Get_EffectiveUserName;
    property HttpURL: WideString read Get_HttpURL;
    property International: IInternational read Get_International;
    property IsOnServer: WordBool read Get_IsOnServer;
    property LastExitStatus: Integer read Get_LastExitStatus;
    property LastRun: OleVariant read Get_LastRun;
    property NotesBuildVersion: Integer read Get_NotesBuildVersion;
    property NotesURL: WideString read Get_NotesURL;
    property NotesVersion: WideString read Get_NotesVersion;
    property Platform: WideString read Get_Platform;
    property SavedData: IDocument read Get_SavedData;
    property ServerName: WideString read Get_ServerName;
    property UserName: WideString read Get_UserName;
    property UserNameList: OleVariant read Get_UserNameList;
    property UserNameObject: IName read Get_UserNameObject;
    property URLDatabase: IDatabase read Get_URLDatabase;
    property UserGroupNameList: OleVariant read Get_UserGroupNameList;
    property OrgDirectoryPath: WideString read Get_OrgDirectoryPath;
    property ConvertMime: WordBool read Get_ConvertMime write Set_ConvertMime;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TNotesSessionProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TNotesSession
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TNotesSessionProperties = class(TPersistent)
  private
    FServer:    TNotesSession;
    function    GetDefaultInterface: ISession;
    constructor Create(AServer: TNotesSession);
  protected
    function Get_AddressBooks: OleVariant;
    function Get_CommonUserName: WideString;
    function Get_CurrentAgent: IAgent;
    function Get_CurrentDatabase: IDatabase;
    function Get_DocumentContext: IDocument;
    function Get_EffectiveUserName: WideString;
    function Get_HttpURL: WideString;
    function Get_International: IInternational;
    procedure Set_ConvertMime(pbFlag: WordBool);
    function Get_ConvertMime: WordBool;
    function Get_IsOnServer: WordBool;
    function Get_LastExitStatus: Integer;
    function Get_LastRun: OleVariant;
    function Get_NotesBuildVersion: Integer;
    function Get_NotesURL: WideString;
    function Get_NotesVersion: WideString;
    function Get_Platform: WideString;
    function Get_SavedData: IDocument;
    function Get_ServerName: WideString;
    function Get_UserName: WideString;
    function Get_UserNameList: OleVariant;
    function Get_UserNameObject: IName;
    function Get_URLDatabase: IDatabase;
    function Get_UserGroupNameList: OleVariant;
    function Get_OrgDirectoryPath: WideString;
  public
    property DefaultInterface: ISession read GetDefaultInterface;
  published
    property ConvertMime: WordBool read Get_ConvertMime write Set_ConvertMime;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoNotesView provides a Create and CreateRemote method to          
// create instances of the default interface IView exposed by              
// the CoClass NotesView. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoNotesView = class
    class function Create: IView;
    class function CreateRemote(const MachineName: string): IView;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TNotesView
// Help String      : 
// Default Interface: IView
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TNotesViewProperties= class;
{$ENDIF}
  TNotesView = class(TOleServer)
  private
    FIntf:        IView;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TNotesViewProperties;
    function      GetServerProperties: TNotesViewProperties;
{$ENDIF}
    function      GetDefaultInterface: IView;
  protected
    procedure InitServerData; override;
    function Get_Aliases: OleVariant;
    function Get_AllEntries: IViewEntryCollection;
    function Get_AutoUpdate: WordBool;
    procedure Set_AutoUpdate(pbAuto: WordBool);
    function Get_BackgroundColor: COLORS;
    function Get_ColumnCount: Integer;
    function Get_ColumnNames: OleVariant;
    function Get_Columns: OleVariant;
    function Get_Created: OleVariant;
    function Get_HeaderLines: Integer;
    function Get_HttpURL: WideString;
    function Get_IsCalendar: WordBool;
    function Get_IsCategorized: WordBool;
    function Get_IsConflict: WordBool;
    function Get_IsDefaultView: WordBool;
    function Get_IsFolder: WordBool;
    function Get_IsHierarchical: WordBool;
    function Get_IsModified: WordBool;
    function Get_IsPrivate: WordBool;
    function Get_LastModified: OleVariant;
    function Get_Name: WideString;
    function Get_NotesURL: WideString;
    function Get_Parent: IDatabase;
    function Get_ProtectReaders: WordBool;
    procedure Set_ProtectReaders(pbReaders: WordBool);
    function Get_Readers: OleVariant;
    procedure Set_Readers(pReaders: OleVariant);
    function Get_RowLines: Integer;
    function Get_SPACING: SPACING;
    function Get_TopLevelEntryCount: Integer;
    function Get_UniversalID: WideString;
    procedure Set_Aliases(pAliases: OleVariant);
    procedure Set_IsProhibitDesignRefresh(bValue: WordBool);
    function Get_IsProhibitDesignRefresh: WordBool;
    procedure Set_IsDefaultView(pbDefault: WordBool);
    procedure Set_BackgroundColor(plColor: Integer);
    procedure Set_SPACING(plSpacing: Integer);
    procedure Set_Name(const ppName: WideString);
    procedure Set_SelectionFormula(const psValue: WideString);
    function Get_SelectionFormula: WideString;
    function Get_EntryCount: Integer;
    function Get_LockHolders: OleVariant;
    function Get_ViewInheritedName: WideString;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IView);
    procedure Disconnect; override;
    procedure Clear;
    function CreateViewNav(lCacheSize: Integer): IViewNavigator;
    function CreateViewNavMaxLevel(lLevel: Integer; lCacheSize: Integer): IViewNavigator;
    function CreateViewNavFrom(const pIUnk: IUnknown; lCacheSize: Integer): IViewNavigator;
    function CreateViewNavFromCategory(const pName: WideString; lCacheSize: Integer): IViewNavigator;
    function CreateViewNavFromChildren(const pIUnk: IUnknown; lCacheSize: Integer): IViewNavigator;
    function CreateViewNavFromDescendants(const pIUnk: IUnknown; lCacheSize: Integer): IViewNavigator;
    function FTSearch(const pQuery: WideString; lMaxDocs: Integer): Integer;
    function GetAllDocumentsByKey(Keys: OleVariant; bExact: WordBool): IDocumentCollection;
    function GetAllEntriesByKey(Keys: OleVariant; bExact: WordBool): IViewEntryCollection;
    function GetChild(const pICurrent: IDocument): IDocument;
    function GetColumn(lColumnNumber: Integer): IViewColumn;
    function GetDocumentByKey(Keys: OleVariant; bExact: WordBool): IDocument;
    function GetEntryByKey(Keys: OleVariant; bExact: WordBool): IViewEntry;
    function GetFirstDocument: IDocument;
    function GetLastDocument: IDocument;
    function GetNextDocument(const pICurrent: IDocument): IDocument;
    function GetNextSibling(const pICurrent: IDocument): IDocument;
    function GetNthDocument(lN: Integer): IDocument;
    function GetParentDocument(const pICurrent: IDocument): IDocument;
    function GetPrevDocument(const pICurrent: IDocument): IDocument;
    function GetPrevSibling(const pICurrent: IDocument): IDocument;
    procedure Refresh;
    procedure Remove;
    function CreateColumn(pos: Integer; const Name: WideString; const Formula: WideString): IViewColumn;
    function CopyColumn(nameIndexObj: OleVariant; dst: Integer): IViewColumn;
    procedure RemoveColumn(nameIndex: OleVariant);
    procedure SetAliases(const Aliases: WideString);
    function Lock(var pName: OleVariant; bProvisionalOK: WordBool): WordBool;
    function LockProvisional: WordBool; overload;
    function LockProvisional(var pName: OleVariant): WordBool; overload;
    procedure Unlock;
    property DefaultInterface: IView read GetDefaultInterface;
    property Aliases: OleVariant read Get_Aliases write Set_Aliases;
    property AllEntries: IViewEntryCollection read Get_AllEntries;
    property ColumnCount: Integer read Get_ColumnCount;
    property ColumnNames: OleVariant read Get_ColumnNames;
    property Columns: OleVariant read Get_Columns;
    property Created: OleVariant read Get_Created;
    property HeaderLines: Integer read Get_HeaderLines;
    property HttpURL: WideString read Get_HttpURL;
    property IsCalendar: WordBool read Get_IsCalendar;
    property IsCategorized: WordBool read Get_IsCategorized;
    property IsConflict: WordBool read Get_IsConflict;
    property IsFolder: WordBool read Get_IsFolder;
    property IsHierarchical: WordBool read Get_IsHierarchical;
    property IsModified: WordBool read Get_IsModified;
    property IsPrivate: WordBool read Get_IsPrivate;
    property LastModified: OleVariant read Get_LastModified;
    property NotesURL: WideString read Get_NotesURL;
    property Parent: IDatabase read Get_Parent;
    property Readers: OleVariant read Get_Readers write Set_Readers;
    property RowLines: Integer read Get_RowLines;
    property TopLevelEntryCount: Integer read Get_TopLevelEntryCount;
    property UniversalID: WideString read Get_UniversalID;
    property EntryCount: Integer read Get_EntryCount;
    property LockHolders: OleVariant read Get_LockHolders;
    property ViewInheritedName: WideString read Get_ViewInheritedName;
    property AutoUpdate: WordBool read Get_AutoUpdate write Set_AutoUpdate;
    property IsDefaultView: WordBool read Get_IsDefaultView write Set_IsDefaultView;
    property Name: WideString read Get_Name write Set_Name;
    property ProtectReaders: WordBool read Get_ProtectReaders write Set_ProtectReaders;
    property IsProhibitDesignRefresh: WordBool read Get_IsProhibitDesignRefresh write Set_IsProhibitDesignRefresh;
    property SelectionFormula: WideString read Get_SelectionFormula write Set_SelectionFormula;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TNotesViewProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TNotesView
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TNotesViewProperties = class(TPersistent)
  private
    FServer:    TNotesView;
    function    GetDefaultInterface: IView;
    constructor Create(AServer: TNotesView);
  protected
    function Get_Aliases: OleVariant;
    function Get_AllEntries: IViewEntryCollection;
    function Get_AutoUpdate: WordBool;
    procedure Set_AutoUpdate(pbAuto: WordBool);
    function Get_BackgroundColor: COLORS;
    function Get_ColumnCount: Integer;
    function Get_ColumnNames: OleVariant;
    function Get_Columns: OleVariant;
    function Get_Created: OleVariant;
    function Get_HeaderLines: Integer;
    function Get_HttpURL: WideString;
    function Get_IsCalendar: WordBool;
    function Get_IsCategorized: WordBool;
    function Get_IsConflict: WordBool;
    function Get_IsDefaultView: WordBool;
    function Get_IsFolder: WordBool;
    function Get_IsHierarchical: WordBool;
    function Get_IsModified: WordBool;
    function Get_IsPrivate: WordBool;
    function Get_LastModified: OleVariant;
    function Get_Name: WideString;
    function Get_NotesURL: WideString;
    function Get_Parent: IDatabase;
    function Get_ProtectReaders: WordBool;
    procedure Set_ProtectReaders(pbReaders: WordBool);
    function Get_Readers: OleVariant;
    procedure Set_Readers(pReaders: OleVariant);
    function Get_RowLines: Integer;
    function Get_SPACING: SPACING;
    function Get_TopLevelEntryCount: Integer;
    function Get_UniversalID: WideString;
    procedure Set_Aliases(pAliases: OleVariant);
    procedure Set_IsProhibitDesignRefresh(bValue: WordBool);
    function Get_IsProhibitDesignRefresh: WordBool;
    procedure Set_IsDefaultView(pbDefault: WordBool);
    procedure Set_BackgroundColor(plColor: Integer);
    procedure Set_SPACING(plSpacing: Integer);
    procedure Set_Name(const ppName: WideString);
    procedure Set_SelectionFormula(const psValue: WideString);
    function Get_SelectionFormula: WideString;
    function Get_EntryCount: Integer;
    function Get_LockHolders: OleVariant;
    function Get_ViewInheritedName: WideString;
  public
    property DefaultInterface: IView read GetDefaultInterface;
  published
    property AutoUpdate: WordBool read Get_AutoUpdate write Set_AutoUpdate;
    property IsDefaultView: WordBool read Get_IsDefaultView write Set_IsDefaultView;
    property Name: WideString read Get_Name write Set_Name;
    property ProtectReaders: WordBool read Get_ProtectReaders write Set_ProtectReaders;
    property IsProhibitDesignRefresh: WordBool read Get_IsProhibitDesignRefresh write Set_IsProhibitDesignRefresh;
    property SelectionFormula: WideString read Get_SelectionFormula write Set_SelectionFormula;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoNotesViewColumn provides a Create and CreateRemote method to          
// create instances of the default interface IViewColumn exposed by              
// the CoClass NotesViewColumn. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoNotesViewColumn = class
    class function Create: IViewColumn;
    class function CreateRemote(const MachineName: string): IViewColumn;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TNotesViewColumn
// Help String      : 
// Default Interface: IViewColumn
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TNotesViewColumnProperties= class;
{$ENDIF}
  TNotesViewColumn = class(TOleServer)
  private
    FIntf:        IViewColumn;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TNotesViewColumnProperties;
    function      GetServerProperties: TNotesViewColumnProperties;
{$ENDIF}
    function      GetDefaultInterface: IViewColumn;
  protected
    procedure InitServerData; override;
    function Get_Alignment: VC_ALIGN;
    function Get_DateFmt: VC_DATEFMT;
    function Get_FontColor: COLORS;
    function Get_FontFace: WideString;
    function Get_FontPointSize: Integer;
    function Get_FontStyle: VC_FONTSTYLE;
    function Get_Formula: WideString;
    function Get_HeaderAlignment: VC_ALIGN;
    function Get_IsAccentSensitiveSort: WordBool;
    function Get_IsCaseSensitiveSort: WordBool;
    function Get_IsCategory: WordBool;
    function Get_IsField: WordBool;
    function Get_IsFormula: WordBool;
    function Get_IsHidden: WordBool;
    function Get_IsHideDetail: WordBool;
    function Get_IsIcon: WordBool;
    function Get_IsResize: WordBool;
    function Get_IsResortAscending: WordBool;
    function Get_IsResortDescending: WordBool;
    function Get_IsResortToView: WordBool;
    function Get_IsResponse: WordBool;
    function Get_IsSecondaryResort: WordBool;
    function Get_IsSecondaryResortDescending: WordBool;
    function Get_IsShowTwistie: WordBool;
    function Get_IsSortDescending: WordBool;
    function Get_IsSorted: WordBool;
    function Get_ItemName: WideString;
    function Get_ListSep: VC_SEP;
    function Get_NumberAttrib: VC_NUMATTR;
    function Get_NumberDigits: Integer;
    function Get_NumberFormat: VC_NUMFMT;
    function Get_Parent: IView;
    function Get_Position: Integer;
    function Get_TimeDateFmt: VC_TDFMT;
    function Get_TimeFmt: VC_TIMEFMT;
    function Get_TimeZoneFmt: VC_TIMEZONEFMT;
    function Get_Title: WideString;
    function Get_Width: Integer;
    function Get_HeaderFontColor: Integer;
    function Get_HeaderFontFace: WideString;
    function Get_HeaderFontPointSize: Integer;
    function Get_HeaderFontStyle: Integer;
    function Get_SecondaryResortColumnIndex: Integer;
    function Get_IsFontBold: WordBool;
    function Get_IsFontItalic: WordBool;
    function Get_IsFontUnderline: WordBool;
    function Get_IsFontStrikethrough: WordBool;
    function Get_IsHeaderFontBold: WordBool;
    function Get_IsHeaderFontItalic: WordBool;
    function Get_IsHeaderFontUnderline: WordBool;
    function Get_IsHeaderFontStrikethrough: WordBool;
    function Get_IsNumberAttribParens: WordBool;
    function Get_IsNumberAttribPunctuated: WordBool;
    function Get_IsNumberAttribPercent: WordBool;
    function Get_ResortToViewName: WideString;
    procedure Set_Alignment(plVal: Integer);
    procedure Set_DateFmt(plVal: Integer);
    procedure Set_FontColor(plVal: Integer);
    procedure Set_FontFace(const ppResult: WideString);
    procedure Set_FontPointSize(plVal: Integer);
    procedure Set_FontStyle(plVal: Integer);
    procedure Set_Formula(const ppResult: WideString);
    procedure Set_HeaderAlignment(plVal: Integer);
    procedure Set_IsAccentSensitiveSort(pbFlag: WordBool);
    procedure Set_IsCaseSensitiveSort(pbFlag: WordBool);
    procedure Set_IsHidden(pbFlag: WordBool);
    procedure Set_IsHideDetail(pbFlag: WordBool);
    procedure Set_IsResize(pbFlag: WordBool);
    procedure Set_IsResortAscending(pbFlag: WordBool);
    procedure Set_IsResortDescending(pbFlag: WordBool);
    procedure Set_IsResortToView(pbFlag: WordBool);
    procedure Set_IsSecondaryResort(pbFlag: WordBool);
    procedure Set_IsSecondaryResortDescending(pbFlag: WordBool);
    procedure Set_IsShowTwistie(pbFlag: WordBool);
    procedure Set_IsSortDescending(pbFlag: WordBool);
    procedure Set_IsSorted(pbFlag: WordBool);
    procedure Set_ListSep(plVal: Integer);
    procedure Set_NumberAttrib(plVal: Integer);
    procedure Set_NumberDigits(plVal: Integer);
    procedure Set_NumberFormat(plVal: Integer);
    procedure Set_Position(plVal: Integer);
    procedure Set_TimeDateFmt(plVal: Integer);
    procedure Set_TimeFmt(plVal: Integer);
    procedure Set_TimeZoneFmt(plVal: Integer);
    procedure Set_Title(const ppResult: WideString);
    procedure Set_Width(plVal: Integer);
    procedure Set_HeaderFontColor(plVal: Integer);
    procedure Set_HeaderFontFace(const ppResult: WideString);
    procedure Set_HeaderFontPointSize(plVal: Integer);
    procedure Set_HeaderFontStyle(plVal: Integer);
    procedure Set_SecondaryResortColumnIndex(plVal: Integer);
    procedure Set_IsFontBold(pbFlag: WordBool);
    procedure Set_IsFontItalic(pbFlag: WordBool);
    procedure Set_IsFontUnderline(pbFlag: WordBool);
    procedure Set_IsFontStrikethrough(pbFlag: WordBool);
    procedure Set_IsHeaderFontBold(pbFlag: WordBool);
    procedure Set_IsHeaderFontItalic(pbFlag: WordBool);
    procedure Set_IsHeaderFontUnderline(pbFlag: WordBool);
    procedure Set_IsHeaderFontStrikethrough(pbFlag: WordBool);
    procedure Set_IsNumberAttribParens(pbFlag: WordBool);
    procedure Set_IsNumberAttribPunctuated(pbFlag: WordBool);
    procedure Set_IsNumberAttribPercent(pbFlag: WordBool);
    procedure Set_ResortToViewName(const ppResult: WideString);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IViewColumn);
    procedure Disconnect; override;
    property DefaultInterface: IViewColumn read GetDefaultInterface;
    property IsCategory: WordBool read Get_IsCategory;
    property IsField: WordBool read Get_IsField;
    property IsFormula: WordBool read Get_IsFormula;
    property IsIcon: WordBool read Get_IsIcon;
    property IsResponse: WordBool read Get_IsResponse;
    property ItemName: WideString read Get_ItemName;
    property Parent: IView read Get_Parent;
    property FontFace: WideString read Get_FontFace write Set_FontFace;
    property FontPointSize: Integer read Get_FontPointSize write Set_FontPointSize;
    property Formula: WideString read Get_Formula write Set_Formula;
    property IsAccentSensitiveSort: WordBool read Get_IsAccentSensitiveSort write Set_IsAccentSensitiveSort;
    property IsCaseSensitiveSort: WordBool read Get_IsCaseSensitiveSort write Set_IsCaseSensitiveSort;
    property IsHidden: WordBool read Get_IsHidden write Set_IsHidden;
    property IsHideDetail: WordBool read Get_IsHideDetail write Set_IsHideDetail;
    property IsResize: WordBool read Get_IsResize write Set_IsResize;
    property IsResortAscending: WordBool read Get_IsResortAscending write Set_IsResortAscending;
    property IsResortDescending: WordBool read Get_IsResortDescending write Set_IsResortDescending;
    property IsResortToView: WordBool read Get_IsResortToView write Set_IsResortToView;
    property IsSecondaryResort: WordBool read Get_IsSecondaryResort write Set_IsSecondaryResort;
    property IsSecondaryResortDescending: WordBool read Get_IsSecondaryResortDescending write Set_IsSecondaryResortDescending;
    property IsShowTwistie: WordBool read Get_IsShowTwistie write Set_IsShowTwistie;
    property IsSortDescending: WordBool read Get_IsSortDescending write Set_IsSortDescending;
    property IsSorted: WordBool read Get_IsSorted write Set_IsSorted;
    property NumberDigits: Integer read Get_NumberDigits write Set_NumberDigits;
    property Position: Integer read Get_Position write Set_Position;
    property Title: WideString read Get_Title write Set_Title;
    property Width: Integer read Get_Width write Set_Width;
    property HeaderFontColor: Integer read Get_HeaderFontColor write Set_HeaderFontColor;
    property HeaderFontFace: WideString read Get_HeaderFontFace write Set_HeaderFontFace;
    property HeaderFontPointSize: Integer read Get_HeaderFontPointSize write Set_HeaderFontPointSize;
    property HeaderFontStyle: Integer read Get_HeaderFontStyle write Set_HeaderFontStyle;
    property SecondaryResortColumnIndex: Integer read Get_SecondaryResortColumnIndex write Set_SecondaryResortColumnIndex;
    property IsFontBold: WordBool read Get_IsFontBold write Set_IsFontBold;
    property IsFontItalic: WordBool read Get_IsFontItalic write Set_IsFontItalic;
    property IsFontUnderline: WordBool read Get_IsFontUnderline write Set_IsFontUnderline;
    property IsFontStrikethrough: WordBool read Get_IsFontStrikethrough write Set_IsFontStrikethrough;
    property IsHeaderFontBold: WordBool read Get_IsHeaderFontBold write Set_IsHeaderFontBold;
    property IsHeaderFontItalic: WordBool read Get_IsHeaderFontItalic write Set_IsHeaderFontItalic;
    property IsHeaderFontUnderline: WordBool read Get_IsHeaderFontUnderline write Set_IsHeaderFontUnderline;
    property IsHeaderFontStrikethrough: WordBool read Get_IsHeaderFontStrikethrough write Set_IsHeaderFontStrikethrough;
    property IsNumberAttribParens: WordBool read Get_IsNumberAttribParens write Set_IsNumberAttribParens;
    property IsNumberAttribPunctuated: WordBool read Get_IsNumberAttribPunctuated write Set_IsNumberAttribPunctuated;
    property IsNumberAttribPercent: WordBool read Get_IsNumberAttribPercent write Set_IsNumberAttribPercent;
    property ResortToViewName: WideString read Get_ResortToViewName write Set_ResortToViewName;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TNotesViewColumnProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TNotesViewColumn
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TNotesViewColumnProperties = class(TPersistent)
  private
    FServer:    TNotesViewColumn;
    function    GetDefaultInterface: IViewColumn;
    constructor Create(AServer: TNotesViewColumn);
  protected
    function Get_Alignment: VC_ALIGN;
    function Get_DateFmt: VC_DATEFMT;
    function Get_FontColor: COLORS;
    function Get_FontFace: WideString;
    function Get_FontPointSize: Integer;
    function Get_FontStyle: VC_FONTSTYLE;
    function Get_Formula: WideString;
    function Get_HeaderAlignment: VC_ALIGN;
    function Get_IsAccentSensitiveSort: WordBool;
    function Get_IsCaseSensitiveSort: WordBool;
    function Get_IsCategory: WordBool;
    function Get_IsField: WordBool;
    function Get_IsFormula: WordBool;
    function Get_IsHidden: WordBool;
    function Get_IsHideDetail: WordBool;
    function Get_IsIcon: WordBool;
    function Get_IsResize: WordBool;
    function Get_IsResortAscending: WordBool;
    function Get_IsResortDescending: WordBool;
    function Get_IsResortToView: WordBool;
    function Get_IsResponse: WordBool;
    function Get_IsSecondaryResort: WordBool;
    function Get_IsSecondaryResortDescending: WordBool;
    function Get_IsShowTwistie: WordBool;
    function Get_IsSortDescending: WordBool;
    function Get_IsSorted: WordBool;
    function Get_ItemName: WideString;
    function Get_ListSep: VC_SEP;
    function Get_NumberAttrib: VC_NUMATTR;
    function Get_NumberDigits: Integer;
    function Get_NumberFormat: VC_NUMFMT;
    function Get_Parent: IView;
    function Get_Position: Integer;
    function Get_TimeDateFmt: VC_TDFMT;
    function Get_TimeFmt: VC_TIMEFMT;
    function Get_TimeZoneFmt: VC_TIMEZONEFMT;
    function Get_Title: WideString;
    function Get_Width: Integer;
    function Get_HeaderFontColor: Integer;
    function Get_HeaderFontFace: WideString;
    function Get_HeaderFontPointSize: Integer;
    function Get_HeaderFontStyle: Integer;
    function Get_SecondaryResortColumnIndex: Integer;
    function Get_IsFontBold: WordBool;
    function Get_IsFontItalic: WordBool;
    function Get_IsFontUnderline: WordBool;
    function Get_IsFontStrikethrough: WordBool;
    function Get_IsHeaderFontBold: WordBool;
    function Get_IsHeaderFontItalic: WordBool;
    function Get_IsHeaderFontUnderline: WordBool;
    function Get_IsHeaderFontStrikethrough: WordBool;
    function Get_IsNumberAttribParens: WordBool;
    function Get_IsNumberAttribPunctuated: WordBool;
    function Get_IsNumberAttribPercent: WordBool;
    function Get_ResortToViewName: WideString;
    procedure Set_Alignment(plVal: Integer);
    procedure Set_DateFmt(plVal: Integer);
    procedure Set_FontColor(plVal: Integer);
    procedure Set_FontFace(const ppResult: WideString);
    procedure Set_FontPointSize(plVal: Integer);
    procedure Set_FontStyle(plVal: Integer);
    procedure Set_Formula(const ppResult: WideString);
    procedure Set_HeaderAlignment(plVal: Integer);
    procedure Set_IsAccentSensitiveSort(pbFlag: WordBool);
    procedure Set_IsCaseSensitiveSort(pbFlag: WordBool);
    procedure Set_IsHidden(pbFlag: WordBool);
    procedure Set_IsHideDetail(pbFlag: WordBool);
    procedure Set_IsResize(pbFlag: WordBool);
    procedure Set_IsResortAscending(pbFlag: WordBool);
    procedure Set_IsResortDescending(pbFlag: WordBool);
    procedure Set_IsResortToView(pbFlag: WordBool);
    procedure Set_IsSecondaryResort(pbFlag: WordBool);
    procedure Set_IsSecondaryResortDescending(pbFlag: WordBool);
    procedure Set_IsShowTwistie(pbFlag: WordBool);
    procedure Set_IsSortDescending(pbFlag: WordBool);
    procedure Set_IsSorted(pbFlag: WordBool);
    procedure Set_ListSep(plVal: Integer);
    procedure Set_NumberAttrib(plVal: Integer);
    procedure Set_NumberDigits(plVal: Integer);
    procedure Set_NumberFormat(plVal: Integer);
    procedure Set_Position(plVal: Integer);
    procedure Set_TimeDateFmt(plVal: Integer);
    procedure Set_TimeFmt(plVal: Integer);
    procedure Set_TimeZoneFmt(plVal: Integer);
    procedure Set_Title(const ppResult: WideString);
    procedure Set_Width(plVal: Integer);
    procedure Set_HeaderFontColor(plVal: Integer);
    procedure Set_HeaderFontFace(const ppResult: WideString);
    procedure Set_HeaderFontPointSize(plVal: Integer);
    procedure Set_HeaderFontStyle(plVal: Integer);
    procedure Set_SecondaryResortColumnIndex(plVal: Integer);
    procedure Set_IsFontBold(pbFlag: WordBool);
    procedure Set_IsFontItalic(pbFlag: WordBool);
    procedure Set_IsFontUnderline(pbFlag: WordBool);
    procedure Set_IsFontStrikethrough(pbFlag: WordBool);
    procedure Set_IsHeaderFontBold(pbFlag: WordBool);
    procedure Set_IsHeaderFontItalic(pbFlag: WordBool);
    procedure Set_IsHeaderFontUnderline(pbFlag: WordBool);
    procedure Set_IsHeaderFontStrikethrough(pbFlag: WordBool);
    procedure Set_IsNumberAttribParens(pbFlag: WordBool);
    procedure Set_IsNumberAttribPunctuated(pbFlag: WordBool);
    procedure Set_IsNumberAttribPercent(pbFlag: WordBool);
    procedure Set_ResortToViewName(const ppResult: WideString);
  public
    property DefaultInterface: IViewColumn read GetDefaultInterface;
  published
    property FontFace: WideString read Get_FontFace write Set_FontFace;
    property FontPointSize: Integer read Get_FontPointSize write Set_FontPointSize;
    property Formula: WideString read Get_Formula write Set_Formula;
    property IsAccentSensitiveSort: WordBool read Get_IsAccentSensitiveSort write Set_IsAccentSensitiveSort;
    property IsCaseSensitiveSort: WordBool read Get_IsCaseSensitiveSort write Set_IsCaseSensitiveSort;
    property IsHidden: WordBool read Get_IsHidden write Set_IsHidden;
    property IsHideDetail: WordBool read Get_IsHideDetail write Set_IsHideDetail;
    property IsResize: WordBool read Get_IsResize write Set_IsResize;
    property IsResortAscending: WordBool read Get_IsResortAscending write Set_IsResortAscending;
    property IsResortDescending: WordBool read Get_IsResortDescending write Set_IsResortDescending;
    property IsResortToView: WordBool read Get_IsResortToView write Set_IsResortToView;
    property IsSecondaryResort: WordBool read Get_IsSecondaryResort write Set_IsSecondaryResort;
    property IsSecondaryResortDescending: WordBool read Get_IsSecondaryResortDescending write Set_IsSecondaryResortDescending;
    property IsShowTwistie: WordBool read Get_IsShowTwistie write Set_IsShowTwistie;
    property IsSortDescending: WordBool read Get_IsSortDescending write Set_IsSortDescending;
    property IsSorted: WordBool read Get_IsSorted write Set_IsSorted;
    property NumberDigits: Integer read Get_NumberDigits write Set_NumberDigits;
    property Position: Integer read Get_Position write Set_Position;
    property Title: WideString read Get_Title write Set_Title;
    property Width: Integer read Get_Width write Set_Width;
    property HeaderFontColor: Integer read Get_HeaderFontColor write Set_HeaderFontColor;
    property HeaderFontFace: WideString read Get_HeaderFontFace write Set_HeaderFontFace;
    property HeaderFontPointSize: Integer read Get_HeaderFontPointSize write Set_HeaderFontPointSize;
    property HeaderFontStyle: Integer read Get_HeaderFontStyle write Set_HeaderFontStyle;
    property SecondaryResortColumnIndex: Integer read Get_SecondaryResortColumnIndex write Set_SecondaryResortColumnIndex;
    property IsFontBold: WordBool read Get_IsFontBold write Set_IsFontBold;
    property IsFontItalic: WordBool read Get_IsFontItalic write Set_IsFontItalic;
    property IsFontUnderline: WordBool read Get_IsFontUnderline write Set_IsFontUnderline;
    property IsFontStrikethrough: WordBool read Get_IsFontStrikethrough write Set_IsFontStrikethrough;
    property IsHeaderFontBold: WordBool read Get_IsHeaderFontBold write Set_IsHeaderFontBold;
    property IsHeaderFontItalic: WordBool read Get_IsHeaderFontItalic write Set_IsHeaderFontItalic;
    property IsHeaderFontUnderline: WordBool read Get_IsHeaderFontUnderline write Set_IsHeaderFontUnderline;
    property IsHeaderFontStrikethrough: WordBool read Get_IsHeaderFontStrikethrough write Set_IsHeaderFontStrikethrough;
    property IsNumberAttribParens: WordBool read Get_IsNumberAttribParens write Set_IsNumberAttribParens;
    property IsNumberAttribPunctuated: WordBool read Get_IsNumberAttribPunctuated write Set_IsNumberAttribPunctuated;
    property IsNumberAttribPercent: WordBool read Get_IsNumberAttribPercent write Set_IsNumberAttribPercent;
    property ResortToViewName: WideString read Get_ResortToViewName write Set_ResortToViewName;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoNotesViewEntry provides a Create and CreateRemote method to          
// create instances of the default interface IViewEntry exposed by              
// the CoClass NotesViewEntry. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoNotesViewEntry = class
    class function Create: IViewEntry;
    class function CreateRemote(const MachineName: string): IViewEntry;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TNotesViewEntry
// Help String      : 
// Default Interface: IViewEntry
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TNotesViewEntryProperties= class;
{$ENDIF}
  TNotesViewEntry = class(TOleServer)
  private
    FIntf:        IViewEntry;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TNotesViewEntryProperties;
    function      GetServerProperties: TNotesViewEntryProperties;
{$ENDIF}
    function      GetDefaultInterface: IViewEntry;
  protected
    procedure InitServerData; override;
    function Get_ChildCount: Integer;
    function Get_ColumnIndentLevel: Integer;
    function Get_ColumnValues: OleVariant;
    function Get_DescendantCount: Integer;
    function Get_Document: IDocument;
    function Get_FTSearchScore: Integer;
    function Get_IndentLevel: Integer;
    function Get_IsCategory: WordBool;
    function Get_IsConflict: WordBool;
    function Get_IsDocument: WordBool;
    function Get_IsTotal: WordBool;
    function Get_IsValid: WordBool;
    function Get_NoteID: WideString;
    function Get_Parent: IUnknown;
    function Get_SiblingCount: Integer;
    function Get_UniversalID: WideString;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IViewEntry);
    procedure Disconnect; override;
    function GetPosition(const pSeparator: WideString): WideString;
    property DefaultInterface: IViewEntry read GetDefaultInterface;
    property ChildCount: Integer read Get_ChildCount;
    property ColumnIndentLevel: Integer read Get_ColumnIndentLevel;
    property ColumnValues: OleVariant read Get_ColumnValues;
    property DescendantCount: Integer read Get_DescendantCount;
    property Document: IDocument read Get_Document;
    property FTSearchScore: Integer read Get_FTSearchScore;
    property IndentLevel: Integer read Get_IndentLevel;
    property IsCategory: WordBool read Get_IsCategory;
    property IsConflict: WordBool read Get_IsConflict;
    property IsDocument: WordBool read Get_IsDocument;
    property IsTotal: WordBool read Get_IsTotal;
    property IsValid: WordBool read Get_IsValid;
    property NoteID: WideString read Get_NoteID;
    property Parent: IUnknown read Get_Parent;
    property SiblingCount: Integer read Get_SiblingCount;
    property UniversalID: WideString read Get_UniversalID;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TNotesViewEntryProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TNotesViewEntry
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TNotesViewEntryProperties = class(TPersistent)
  private
    FServer:    TNotesViewEntry;
    function    GetDefaultInterface: IViewEntry;
    constructor Create(AServer: TNotesViewEntry);
  protected
    function Get_ChildCount: Integer;
    function Get_ColumnIndentLevel: Integer;
    function Get_ColumnValues: OleVariant;
    function Get_DescendantCount: Integer;
    function Get_Document: IDocument;
    function Get_FTSearchScore: Integer;
    function Get_IndentLevel: Integer;
    function Get_IsCategory: WordBool;
    function Get_IsConflict: WordBool;
    function Get_IsDocument: WordBool;
    function Get_IsTotal: WordBool;
    function Get_IsValid: WordBool;
    function Get_NoteID: WideString;
    function Get_Parent: IUnknown;
    function Get_SiblingCount: Integer;
    function Get_UniversalID: WideString;
  public
    property DefaultInterface: IViewEntry read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoNotesViewEntryCollection provides a Create and CreateRemote method to          
// create instances of the default interface IViewEntryCollection exposed by              
// the CoClass NotesViewEntryCollection. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoNotesViewEntryCollection = class
    class function Create: IViewEntryCollection;
    class function CreateRemote(const MachineName: string): IViewEntryCollection;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TNotesViewEntryCollection
// Help String      : 
// Default Interface: IViewEntryCollection
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TNotesViewEntryCollectionProperties= class;
{$ENDIF}
  TNotesViewEntryCollection = class(TOleServer)
  private
    FIntf:        IViewEntryCollection;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TNotesViewEntryCollectionProperties;
    function      GetServerProperties: TNotesViewEntryCollectionProperties;
{$ENDIF}
    function      GetDefaultInterface: IViewEntryCollection;
  protected
    procedure InitServerData; override;
    function Get_Count: Integer;
    function Get_Parent: IView;
    function Get_Query: WideString;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IViewEntryCollection);
    procedure Disconnect; override;
    procedure AddEntry(const pIObj: IUnknown; bReserved: WordBool);
    procedure DeleteEntry(const pIEntry: IViewEntry);
    procedure FTSearch(const pQuery: WideString; lMaxDocs: Integer);
    function GetEntry(const pIObj: IUnknown): IViewEntry;
    function GetFirstEntry: IViewEntry;
    function GetLastEntry: IViewEntry;
    function GetNextEntry(const pIEntry: IViewEntry): IViewEntry;
    function GetNthEntry(lN: Integer): IViewEntry;
    function GetPrevEntry(const pIEntry: IViewEntry): IViewEntry;
    procedure PutAllInFolder(const pFolderName: WideString; bCreateonfail: WordBool);
    procedure RemoveAll(bForce: WordBool);
    procedure RemoveAllFromFolder(const pFolderName: WideString);
    procedure StampAll(const pItemName: WideString; Value: OleVariant);
    procedure UpdateAll;
    property DefaultInterface: IViewEntryCollection read GetDefaultInterface;
    property Count: Integer read Get_Count;
    property Parent: IView read Get_Parent;
    property Query: WideString read Get_Query;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TNotesViewEntryCollectionProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TNotesViewEntryCollection
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TNotesViewEntryCollectionProperties = class(TPersistent)
  private
    FServer:    TNotesViewEntryCollection;
    function    GetDefaultInterface: IViewEntryCollection;
    constructor Create(AServer: TNotesViewEntryCollection);
  protected
    function Get_Count: Integer;
    function Get_Parent: IView;
    function Get_Query: WideString;
  public
    property DefaultInterface: IViewEntryCollection read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoNotesViewNavigator provides a Create and CreateRemote method to          
// create instances of the default interface IViewNavigator exposed by              
// the CoClass NotesViewNavigator. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoNotesViewNavigator = class
    class function Create: IViewNavigator;
    class function CreateRemote(const MachineName: string): IViewNavigator;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TNotesViewNavigator
// Help String      : 
// Default Interface: IViewNavigator
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TNotesViewNavigatorProperties= class;
{$ENDIF}
  TNotesViewNavigator = class(TOleServer)
  private
    FIntf:        IViewNavigator;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TNotesViewNavigatorProperties;
    function      GetServerProperties: TNotesViewNavigatorProperties;
{$ENDIF}
    function      GetDefaultInterface: IViewNavigator;
  protected
    procedure InitServerData; override;
    function Get_CacheSize: Integer;
    procedure Set_CacheSize(plSize: Integer);
    function Get_MaxLevel: Integer;
    procedure Set_MaxLevel(plLevel: Integer);
    function Get_ParentView: IView;
    function Get_Count: Integer;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IViewNavigator);
    procedure Disconnect; override;
    function GetChild(const pICurrent: IViewEntry): IViewEntry;
    function GetEntry(const pICurrent: IViewEntry): IViewEntry;
    function GetCurrent: IViewEntry;
    function GetFirst: IViewEntry;
    function GetFirstDocument: IViewEntry;
    function GetLast: IViewEntry;
    function GetLastDocument: IViewEntry;
    function GetNext(const pICurrent: IViewEntry): IViewEntry;
    function GetNextCategory(const pICurrent: IViewEntry): IViewEntry;
    function GetNextDocument(const pICurrent: IViewEntry): IViewEntry;
    function GetNextSibling(const pICurrent: IViewEntry): IViewEntry;
    function GetNth(lN: Integer): IViewEntry;
    function GetParent(const pICurrent: IViewEntry): IViewEntry;
    function GetPos(const pPos: WideString; const pSeparator: WideString): IViewEntry;
    function GetPrev(const pICurrent: IViewEntry): IViewEntry;
    function GetPrevCategory(const pICurrent: IViewEntry): IViewEntry;
    function GetPrevDocument(const pICurrent: IViewEntry): IViewEntry;
    function GetPrevSibling(const pICurrent: IViewEntry): IViewEntry;
    procedure GotoChild(const pIViewEntry: IViewEntry);
    procedure GotoEntry(const pIObj: IUnknown);
    procedure GotoFirst;
    procedure GotoFirstDocument;
    procedure GotoLast;
    procedure GotoLastDocument;
    procedure GotoNext(const pIViewEntry: IViewEntry);
    procedure GotoNextCategory(const pIViewEntry: IViewEntry);
    procedure GotoNextDocument(const pIViewEntry: IViewEntry);
    procedure GotoNextSibling(const pIViewEntry: IViewEntry);
    procedure GotoParent(const pIViewEntry: IViewEntry);
    procedure GotoPos(const pPos: WideString; const pSeparator: WideString);
    procedure GotoPrev(const pIViewEntry: IViewEntry);
    procedure GotoPrevCategory(const pIViewEntry: IViewEntry);
    procedure GotoPrevDocument(const pIViewEntry: IViewEntry);
    procedure GotoPrevSibling(const pIViewEntry: IViewEntry);
    property DefaultInterface: IViewNavigator read GetDefaultInterface;
    property ParentView: IView read Get_ParentView;
    property Count: Integer read Get_Count;
    property CacheSize: Integer read Get_CacheSize write Set_CacheSize;
    property MaxLevel: Integer read Get_MaxLevel write Set_MaxLevel;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TNotesViewNavigatorProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TNotesViewNavigator
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TNotesViewNavigatorProperties = class(TPersistent)
  private
    FServer:    TNotesViewNavigator;
    function    GetDefaultInterface: IViewNavigator;
    constructor Create(AServer: TNotesViewNavigator);
  protected
    function Get_CacheSize: Integer;
    procedure Set_CacheSize(plSize: Integer);
    function Get_MaxLevel: Integer;
    procedure Set_MaxLevel(plLevel: Integer);
    function Get_ParentView: IView;
    function Get_Count: Integer;
  public
    property DefaultInterface: IViewNavigator read GetDefaultInterface;
  published
    property CacheSize: Integer read Get_CacheSize write Set_CacheSize;
    property MaxLevel: Integer read Get_MaxLevel write Set_MaxLevel;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoNotesMIMEEntity provides a Create and CreateRemote method to          
// create instances of the default interface IMIMEEntity exposed by              
// the CoClass NotesMIMEEntity. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoNotesMIMEEntity = class
    class function Create: IMIMEEntity;
    class function CreateRemote(const MachineName: string): IMIMEEntity;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TNotesMIMEEntity
// Help String      : 
// Default Interface: IMIMEEntity
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TNotesMIMEEntityProperties= class;
{$ENDIF}
  TNotesMIMEEntity = class(TOleServer)
  private
    FIntf:        IMIMEEntity;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TNotesMIMEEntityProperties;
    function      GetServerProperties: TNotesMIMEEntityProperties;
{$ENDIF}
    function      GetDefaultInterface: IMIMEEntity;
  protected
    procedure InitServerData; override;
    function Get_ContentSubType: WideString;
    function Get_ContentType: WideString;
    function Get_ContentAsText: WideString;
    function Get_Headers: WideString;
    function Get_ParentDoc: IDocument;
    function Get_BoundaryStart: WideString;
    function Get_BoundaryEnd: WideString;
    function Get_Charset: WideString;
    function Get_Encoding: MIME_ENCODING;
    function Get_HeaderObjects: OleVariant;
    function Get_Preamble: WideString;
    procedure Set_Preamble(const ppPreamble: WideString);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IMIMEEntity);
    procedure Disconnect; override;
    function GetFirstChildEntity: IMIMEEntity;
    function GetNextSibling: IMIMEEntity;
    function GetParentEntity: IMIMEEntity;
    function CreateChildEntity(const pNextSiblingIMIMEEntity: IMIMEEntity): IMIMEEntity;
    function CreateHeader(const pHeaderName: WideString): IMIMEHeader;
    function CreateParentEntity: IMIMEEntity;
    procedure DecodeContent;
    procedure EncodeContent(lEnc: MIME_ENCODING);
    procedure GetContentAsBytes(const pINotesStream: INotesStream; bDecoded: WordBool);
    procedure GetContentAsText(const pINotesStream: INotesStream; bDecoded: WordBool);
    procedure GetEntityAsText(const pINotesStream: INotesStream; var pHeaderFilters: OleVariant; 
                              bInclusive: WordBool);
    function GetNextEntity(lSearchPath: SEARCH_PATH): IMIMEEntity;
    function GetNthHeader(const pHeaderName: WideString; lNth: Integer): IMIMEHeader;
    function GetPrevEntity(lSearchPath: SEARCH_PATH): IMIMEEntity;
    function GetPrevSibling: IMIMEEntity;
    function GetSomeHeaders(var pHeaderFilters: OleVariant; bInclusive: WordBool): WideString;
    procedure Remove;
    procedure SetContentFromBytes(const pINotesStream: INotesStream; 
                                  const pContentType: WideString; lEnc: MIME_ENCODING);
    procedure SetContentFromText(const pINotesStream: INotesStream; const pContentType: WideString; 
                                 lEnc: MIME_ENCODING);
    property DefaultInterface: IMIMEEntity read GetDefaultInterface;
    property ContentSubType: WideString read Get_ContentSubType;
    property ContentType: WideString read Get_ContentType;
    property ContentAsText: WideString read Get_ContentAsText;
    property Headers: WideString read Get_Headers;
    property ParentDoc: IDocument read Get_ParentDoc;
    property BoundaryStart: WideString read Get_BoundaryStart;
    property BoundaryEnd: WideString read Get_BoundaryEnd;
    property Charset: WideString read Get_Charset;
    property Encoding: MIME_ENCODING read Get_Encoding;
    property HeaderObjects: OleVariant read Get_HeaderObjects;
    property Preamble: WideString read Get_Preamble write Set_Preamble;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TNotesMIMEEntityProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TNotesMIMEEntity
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TNotesMIMEEntityProperties = class(TPersistent)
  private
    FServer:    TNotesMIMEEntity;
    function    GetDefaultInterface: IMIMEEntity;
    constructor Create(AServer: TNotesMIMEEntity);
  protected
    function Get_ContentSubType: WideString;
    function Get_ContentType: WideString;
    function Get_ContentAsText: WideString;
    function Get_Headers: WideString;
    function Get_ParentDoc: IDocument;
    function Get_BoundaryStart: WideString;
    function Get_BoundaryEnd: WideString;
    function Get_Charset: WideString;
    function Get_Encoding: MIME_ENCODING;
    function Get_HeaderObjects: OleVariant;
    function Get_Preamble: WideString;
    procedure Set_Preamble(const ppPreamble: WideString);
  public
    property DefaultInterface: IMIMEEntity read GetDefaultInterface;
  published
    property Preamble: WideString read Get_Preamble write Set_Preamble;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoNotesMIMEHeader provides a Create and CreateRemote method to          
// create instances of the default interface IMIMEHeader exposed by              
// the CoClass NotesMIMEHeader. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoNotesMIMEHeader = class
    class function Create: IMIMEHeader;
    class function CreateRemote(const MachineName: string): IMIMEHeader;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TNotesMIMEHeader
// Help String      : 
// Default Interface: IMIMEHeader
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TNotesMIMEHeaderProperties= class;
{$ENDIF}
  TNotesMIMEHeader = class(TOleServer)
  private
    FIntf:        IMIMEHeader;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TNotesMIMEHeaderProperties;
    function      GetServerProperties: TNotesMIMEHeaderProperties;
{$ENDIF}
    function      GetDefaultInterface: IMIMEHeader;
  protected
    procedure InitServerData; override;
    function Get_HeaderName: WideString;
    function Get_Parent: IMIMEEntity;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IMIMEHeader);
    procedure Disconnect; override;
    function AddValText(const pValueText: WideString; const pRfc2047Charset: WideString): WordBool;
    function GetHeaderVal(bFolded: WordBool; bDecoded: WordBool): WideString;
    function GetHeaderValAndParams(bFolded: WordBool; bDecoded: WordBool): WideString;
    function GetParamVal(const pParamName: WideString; bFolded: WordBool): WideString;
    procedure Remove;
    function SetHeaderVal(const pHeaderVal: WideString): WordBool;
    function SetHeaderValAndParams(const pHeaderValParams: WideString): WordBool;
    function SetParamVal(const pParamName: WideString; const pParamVal: WideString): WordBool;
    property DefaultInterface: IMIMEHeader read GetDefaultInterface;
    property HeaderName: WideString read Get_HeaderName;
    property Parent: IMIMEEntity read Get_Parent;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TNotesMIMEHeaderProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TNotesMIMEHeader
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TNotesMIMEHeaderProperties = class(TPersistent)
  private
    FServer:    TNotesMIMEHeader;
    function    GetDefaultInterface: IMIMEHeader;
    constructor Create(AServer: TNotesMIMEHeader);
  protected
    function Get_HeaderName: WideString;
    function Get_Parent: IMIMEEntity;
  public
    property DefaultInterface: IMIMEHeader read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoNotesStream provides a Create and CreateRemote method to          
// create instances of the default interface INotesStream exposed by              
// the CoClass NotesStream. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoNotesStream = class
    class function Create: INotesStream;
    class function CreateRemote(const MachineName: string): INotesStream;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TNotesStream
// Help String      : 
// Default Interface: INotesStream
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TNotesStreamProperties= class;
{$ENDIF}
  TNotesStream = class(TOleServer)
  private
    FIntf:        INotesStream;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TNotesStreamProperties;
    function      GetServerProperties: TNotesStreamProperties;
{$ENDIF}
    function      GetDefaultInterface: INotesStream;
  protected
    procedure InitServerData; override;
    function Get_Charset: WideString;
    function Get_IsEOS: WordBool;
    function Get_Position: Integer;
    procedure Set_Position(plPosition: Integer);
    function Get_Bytes: Integer;
    function Get_IsReadOnly: WordBool;
    function Get_Parent: ISession;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: INotesStream);
    procedure Disconnect; override;
    procedure Close;
    function Open(const pName: WideString; const pCharset: WideString): WordBool;
    function Read(lLength: Integer): OleVariant;
    function ReadText(lLength: STMREAD_LEN; lEOL: EOL_TYPE): WideString;
    procedure Truncate;
    function Write(vByteArray: OleVariant): Integer;
    function WriteText(const pText: WideString; lEOL: EOL_TYPE): Integer;
    property DefaultInterface: INotesStream read GetDefaultInterface;
    property Charset: WideString read Get_Charset;
    property IsEOS: WordBool read Get_IsEOS;
    property Bytes: Integer read Get_Bytes;
    property IsReadOnly: WordBool read Get_IsReadOnly;
    property Parent: ISession read Get_Parent;
    property Position: Integer read Get_Position write Set_Position;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TNotesStreamProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TNotesStream
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TNotesStreamProperties = class(TPersistent)
  private
    FServer:    TNotesStream;
    function    GetDefaultInterface: INotesStream;
    constructor Create(AServer: TNotesStream);
  protected
    function Get_Charset: WideString;
    function Get_IsEOS: WordBool;
    function Get_Position: Integer;
    procedure Set_Position(plPosition: Integer);
    function Get_Bytes: Integer;
    function Get_IsReadOnly: WordBool;
    function Get_Parent: ISession;
  public
    property DefaultInterface: INotesStream read GetDefaultInterface;
  published
    property Position: Integer read Get_Position write Set_Position;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoNotesAdministrationProcess provides a Create and CreateRemote method to          
// create instances of the default interface IAdministrationProcess exposed by              
// the CoClass NotesAdministrationProcess. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoNotesAdministrationProcess = class
    class function Create: IAdministrationProcess;
    class function CreateRemote(const MachineName: string): IAdministrationProcess;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TNotesAdministrationProcess
// Help String      : 
// Default Interface: IAdministrationProcess
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TNotesAdministrationProcessProperties= class;
{$ENDIF}
  TNotesAdministrationProcess = class(TOleServer)
  private
    FIntf:        IAdministrationProcess;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TNotesAdministrationProcessProperties;
    function      GetServerProperties: TNotesAdministrationProcessProperties;
{$ENDIF}
    function      GetDefaultInterface: IAdministrationProcess;
  protected
    procedure InitServerData; override;
    function Get_CertificateAuthorityOrg: WideString;
    procedure Set_CertificateAuthorityOrg(const ppCertificateAuthorityOrg: WideString);
    function Get_CertifierFile: WideString;
    procedure Set_CertifierFile(const ppCertifierFile: WideString);
    function Get_CertifierPassword: WideString;
    procedure Set_CertifierPassword(const ppCertifierPassword: WideString);
    function Get_IsCertificateAuthorityAvailable: WordBool;
    procedure Set_UseCertificateAuthority(pbUseCertificateAuthority: WordBool);
    function Get_UseCertificateAuthority: WordBool;
    function Get_CertificateExpiration: IDateTime;
    procedure Set_CertificateExpiration(const ppCertificateExpiration: IDateTime);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IAdministrationProcess);
    procedure Disconnect; override;
    function AddGroupMembers(const pGroup: WideString; Members: OleVariant): WideString;
    function AddInternetCertificateToUser(const pUser: WideString; const pKeyRingFile: WideString; 
                                          const pKeyRingPassword: WideString; 
                                          const Expiration: IDateTime): WideString;
    function AddServerToCluster(const pServer: WideString; const pCluster: WideString): WideString;
    function ApproveDeletePersonInDirectory(const pNoteid: WideString): WideString;
    function ApproveDeleteServerInDirectory(const pNoteid: WideString): WideString;
    function ApproveDesignElementDeletion(const pNoteid: WideString): WideString;
    function ApproveMailFileDeletion(const pNoteid: WideString): WideString;
    function ApproveMovedReplicaDeletion(const pNoteid: WideString): WideString;
    function ApproveNameChangeRetraction(const pNoteid: WideString): WideString;
    function ApproveRenamePersonInDirectory(const pNoteid: WideString): WideString;
    function ApproveRenameServerInDirectory(const pNoteid: WideString): WideString;
    function ApproveReplicaDeletion(const pNoteid: WideString): WideString;
    function ApproveResourceDeletion(const pNoteid: WideString): WideString;
    function ChangeHTTPPassword(const pUsername: WideString; const pOldPassword: WideString; 
                                const pNewPassword: WideString): WideString;
    function ConfigureMailAgent(const pUsername: WideString; const pAgentName: WideString; 
                                bActivatable: WordBool; bEnable: WordBool): WideString;
    function CreateReplica(const pSourceServer: WideString; const pSourceDBFile: WideString; 
                           const pDestServer: WideString; const pDestDBFile: WideString; 
                           bCopyACL: WordBool; bCreateFTIndex: WordBool): WideString;
    function MoveReplica(const pSourceServer: WideString; const pSourceDBFile: WideString; 
                         const pDestServer: WideString; const pDestDBFile: WideString; 
                         bCopyACL: WordBool; bCreateFTIndex: WordBool): WideString;
    function DeleteReplicas(const pServer: WideString; const pDbfile: WideString): WideString;
    function DeleteGroup(const pGroupName: WideString; bImmediate: WordBool; 
                         bDeleteWindowsGroup: WordBool): WideString;
    function DeleteServer(const pServerName: WideString; bImmediate: WordBool): WideString;
    function DeleteUser(const pUsername: WideString; bImmediate: WordBool; 
                        lMailFileAction: ADMP_MAILDEL; const pDenyGroup: WideString; 
                        bDeleteWindowsGroup: WordBool): WideString;
    function FindGroupInDomain(const pGroup: WideString): WideString;
    function FindServerInDomain(const pServer: WideString): WideString;
    function FindUserInDomain(const pUser: WideString): WideString;
    function MoveMailUser(const pUsername: WideString; const pNewHomeServer: WideString; 
                          const pNewHomeServerMailPath: WideString; bUseSCOS: WordBool; 
                          NewClusterReplicaArray: OleVariant; bDeleteOldClusterReplicas: WordBool): WideString;
    function MoveRoamingUser(const pUsername: WideString; const pDestServer: WideString; 
                             const pDestServerPath: WideString): WideString;
    function MoveUserInHierarchyRequest(const pUsername: WideString; 
                                        const pTargetCertifier: WideString; 
                                        bAllowPrimaryNameChange: WordBool): WideString;
    function MoveUserInHierarchyComplete(const pRequestNoteID: WideString; 
                                         const pLastName: WideString; const pFirstName: WideString; 
                                         const pMiddleInitial: WideString; 
                                         const pOrgUnit: WideString; 
                                         const pAltCommonName: WideString; 
                                         const pAltOrgUnit: WideString; 
                                         const pAltLanguage: WideString; 
                                         bRenameWindowsUser: WordBool): WideString;
    function RecertifyServer(const pServer: WideString): WideString;
    function RecertifyUser(const pUsername: WideString): WideString;
    function RemoveServerFromCluster(const pServer: WideString): WideString;
    function RenameGroup(const pGroup: WideString; const pNewGroup: WideString): WideString;
    function RenameNotesUser(const pUsername: WideString; const pLastName: WideString; 
                             const pFirstName: WideString; const pMiddleInitial: WideString; 
                             const pOrgUnit: WideString; const pAltCommonName: WideString; 
                             const pAltOrgUnit: WideString; const pAltLanguage: WideString; 
                             bRenameWindowsUser: WordBool): WideString;
    function RenameWebUser(const pUsername: WideString; const pNewUserName: WideString; 
                           const pNewLastName: WideString; const pNewFirstName: WideString; 
                           const pNewMiddleInitial: WideString; const pNewShortname: WideString; 
                           const pNewInternetAddress: WideString): WideString;
    function SetServerDirectoryAssistanceSettings(const pServer: WideString; 
                                                  const pDbfile: WideString): WideString;
    function SignDatabaseWithServerID(const pServer: WideString; const pDbfile: WideString; 
                                      bUpdateOnly: WordBool): WideString;
    function UpgradeUserToHierarchical(const pUsername: WideString; const pOrgUnit: WideString; 
                                       const pAltCommonName: WideString; 
                                       const pAltOrgUnit: WideString; const pAltLanguage: WideString): WideString;
    function SetUserPasswordSettings(const pUsername: WideString; 
                                     NotesPasswordCheckSetting: OleVariant; 
                                     NotesPasswordChangeInterval: OleVariant; 
                                     NotesPasswordGracePeriod: OleVariant; 
                                     InternetPasswordForceChange: OleVariant; NotUsed: ADMP_PWDCHK): WideString;
    function ApproveHostedOrgStorageDeletion(const pNoteid: WideString): WideString;
    property DefaultInterface: IAdministrationProcess read GetDefaultInterface;
    property IsCertificateAuthorityAvailable: WordBool read Get_IsCertificateAuthorityAvailable;
    property CertificateAuthorityOrg: WideString read Get_CertificateAuthorityOrg write Set_CertificateAuthorityOrg;
    property CertifierFile: WideString read Get_CertifierFile write Set_CertifierFile;
    property CertifierPassword: WideString read Get_CertifierPassword write Set_CertifierPassword;
    property UseCertificateAuthority: WordBool read Get_UseCertificateAuthority write Set_UseCertificateAuthority;
    property CertificateExpiration: IDateTime read Get_CertificateExpiration write Set_CertificateExpiration;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TNotesAdministrationProcessProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TNotesAdministrationProcess
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TNotesAdministrationProcessProperties = class(TPersistent)
  private
    FServer:    TNotesAdministrationProcess;
    function    GetDefaultInterface: IAdministrationProcess;
    constructor Create(AServer: TNotesAdministrationProcess);
  protected
    function Get_CertificateAuthorityOrg: WideString;
    procedure Set_CertificateAuthorityOrg(const ppCertificateAuthorityOrg: WideString);
    function Get_CertifierFile: WideString;
    procedure Set_CertifierFile(const ppCertifierFile: WideString);
    function Get_CertifierPassword: WideString;
    procedure Set_CertifierPassword(const ppCertifierPassword: WideString);
    function Get_IsCertificateAuthorityAvailable: WordBool;
    procedure Set_UseCertificateAuthority(pbUseCertificateAuthority: WordBool);
    function Get_UseCertificateAuthority: WordBool;
    function Get_CertificateExpiration: IDateTime;
    procedure Set_CertificateExpiration(const ppCertificateExpiration: IDateTime);
  public
    property DefaultInterface: IAdministrationProcess read GetDefaultInterface;
  published
    property CertificateAuthorityOrg: WideString read Get_CertificateAuthorityOrg write Set_CertificateAuthorityOrg;
    property CertifierFile: WideString read Get_CertifierFile write Set_CertifierFile;
    property CertifierPassword: WideString read Get_CertifierPassword write Set_CertifierPassword;
    property UseCertificateAuthority: WordBool read Get_UseCertificateAuthority write Set_UseCertificateAuthority;
    property CertificateExpiration: IDateTime read Get_CertificateExpiration write Set_CertificateExpiration;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoNotesReplicationEntry provides a Create and CreateRemote method to          
// create instances of the default interface IReplicationEntry exposed by              
// the CoClass NotesReplicationEntry. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoNotesReplicationEntry = class
    class function Create: IReplicationEntry;
    class function CreateRemote(const MachineName: string): IReplicationEntry;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TNotesReplicationEntry
// Help String      : 
// Default Interface: IReplicationEntry
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TNotesReplicationEntryProperties= class;
{$ENDIF}
  TNotesReplicationEntry = class(TOleServer)
  private
    FIntf:        IReplicationEntry;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TNotesReplicationEntryProperties;
    function      GetServerProperties: TNotesReplicationEntryProperties;
{$ENDIF}
    function      GetDefaultInterface: IReplicationEntry;
  protected
    procedure InitServerData; override;
    function Get_Source: WideString;
    function Get_Destination: WideString;
    function Get_Formula: WideString;
    procedure Set_Formula(const ppFormula: WideString);
    function Get_Views: WideString;
    procedure Set_Views(const ppViews: WideString);
    function Get_IsIncludeForms: WordBool;
    procedure Set_IsIncludeForms(pbIsIncludeForms: WordBool);
    function Get_IsIncludeAgents: WordBool;
    procedure Set_IsIncludeAgents(pbIsIncludeAgents: WordBool);
    function Get_IsIncludeFormulas: WordBool;
    procedure Set_IsIncludeFormulas(pbIsIncludeFormulas: WordBool);
    function Get_IsIncludeDocuments: WordBool;
    procedure Set_IsIncludeDocuments(pbIsIncludeDocuments: WordBool);
    function Get_IsIncludeACL: WordBool;
    procedure Set_IsIncludeACL(pbIsIncludeACL: WordBool);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IReplicationEntry);
    procedure Disconnect; override;
    function Remove: Integer;
    function Save: Integer;
    property DefaultInterface: IReplicationEntry read GetDefaultInterface;
    property Source: WideString read Get_Source;
    property Destination: WideString read Get_Destination;
    property Formula: WideString read Get_Formula write Set_Formula;
    property Views: WideString read Get_Views write Set_Views;
    property IsIncludeForms: WordBool read Get_IsIncludeForms write Set_IsIncludeForms;
    property IsIncludeAgents: WordBool read Get_IsIncludeAgents write Set_IsIncludeAgents;
    property IsIncludeFormulas: WordBool read Get_IsIncludeFormulas write Set_IsIncludeFormulas;
    property IsIncludeDocuments: WordBool read Get_IsIncludeDocuments write Set_IsIncludeDocuments;
    property IsIncludeACL: WordBool read Get_IsIncludeACL write Set_IsIncludeACL;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TNotesReplicationEntryProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TNotesReplicationEntry
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TNotesReplicationEntryProperties = class(TPersistent)
  private
    FServer:    TNotesReplicationEntry;
    function    GetDefaultInterface: IReplicationEntry;
    constructor Create(AServer: TNotesReplicationEntry);
  protected
    function Get_Source: WideString;
    function Get_Destination: WideString;
    function Get_Formula: WideString;
    procedure Set_Formula(const ppFormula: WideString);
    function Get_Views: WideString;
    procedure Set_Views(const ppViews: WideString);
    function Get_IsIncludeForms: WordBool;
    procedure Set_IsIncludeForms(pbIsIncludeForms: WordBool);
    function Get_IsIncludeAgents: WordBool;
    procedure Set_IsIncludeAgents(pbIsIncludeAgents: WordBool);
    function Get_IsIncludeFormulas: WordBool;
    procedure Set_IsIncludeFormulas(pbIsIncludeFormulas: WordBool);
    function Get_IsIncludeDocuments: WordBool;
    procedure Set_IsIncludeDocuments(pbIsIncludeDocuments: WordBool);
    function Get_IsIncludeACL: WordBool;
    procedure Set_IsIncludeACL(pbIsIncludeACL: WordBool);
  public
    property DefaultInterface: IReplicationEntry read GetDefaultInterface;
  published
    property Formula: WideString read Get_Formula write Set_Formula;
    property Views: WideString read Get_Views write Set_Views;
    property IsIncludeForms: WordBool read Get_IsIncludeForms write Set_IsIncludeForms;
    property IsIncludeAgents: WordBool read Get_IsIncludeAgents write Set_IsIncludeAgents;
    property IsIncludeFormulas: WordBool read Get_IsIncludeFormulas write Set_IsIncludeFormulas;
    property IsIncludeDocuments: WordBool read Get_IsIncludeDocuments write Set_IsIncludeDocuments;
    property IsIncludeACL: WordBool read Get_IsIncludeACL write Set_IsIncludeACL;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoNotesColorObject provides a Create and CreateRemote method to          
// create instances of the default interface IColorObject exposed by              
// the CoClass NotesColorObject. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoNotesColorObject = class
    class function Create: IColorObject;
    class function CreateRemote(const MachineName: string): IColorObject;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TNotesColorObject
// Help String      : 
// Default Interface: IColorObject
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TNotesColorObjectProperties= class;
{$ENDIF}
  TNotesColorObject = class(TOleServer)
  private
    FIntf:        IColorObject;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TNotesColorObjectProperties;
    function      GetServerProperties: TNotesColorObjectProperties;
{$ENDIF}
    function      GetDefaultInterface: IColorObject;
  protected
    procedure InitServerData; override;
    function Get_Red: Integer;
    function Get_Green: Integer;
    function Get_Blue: Integer;
    function Get_Hue: Integer;
    function Get_Saturation: Integer;
    function Get_Luminance: Integer;
    function Get_NotesColor: Integer;
    procedure Set_NotesColor(pNotesColor: Integer);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IColorObject);
    procedure Disconnect; override;
    function SetRGB(Red: Integer; Green: Integer; Blue: Integer): Integer;
    function SetHSL(Hue: Integer; Saturation: Integer; Luminance: Integer): Integer;
    property DefaultInterface: IColorObject read GetDefaultInterface;
    property Red: Integer read Get_Red;
    property Green: Integer read Get_Green;
    property Blue: Integer read Get_Blue;
    property Hue: Integer read Get_Hue;
    property Saturation: Integer read Get_Saturation;
    property Luminance: Integer read Get_Luminance;
    property NotesColor: Integer read Get_NotesColor write Set_NotesColor;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TNotesColorObjectProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TNotesColorObject
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TNotesColorObjectProperties = class(TPersistent)
  private
    FServer:    TNotesColorObject;
    function    GetDefaultInterface: IColorObject;
    constructor Create(AServer: TNotesColorObject);
  protected
    function Get_Red: Integer;
    function Get_Green: Integer;
    function Get_Blue: Integer;
    function Get_Hue: Integer;
    function Get_Saturation: Integer;
    function Get_Luminance: Integer;
    function Get_NotesColor: Integer;
    procedure Set_NotesColor(pNotesColor: Integer);
  public
    property DefaultInterface: IColorObject read GetDefaultInterface;
  published
    property NotesColor: Integer read Get_NotesColor write Set_NotesColor;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoNotesRichTextNavigator provides a Create and CreateRemote method to          
// create instances of the default interface IRichTextNavigator exposed by              
// the CoClass NotesRichTextNavigator. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoNotesRichTextNavigator = class
    class function Create: IRichTextNavigator;
    class function CreateRemote(const MachineName: string): IRichTextNavigator;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TNotesRichTextNavigator
// Help String      : 
// Default Interface: IRichTextNavigator
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TNotesRichTextNavigatorProperties= class;
{$ENDIF}
  TNotesRichTextNavigator = class(TOleServer)
  private
    FIntf:        IRichTextNavigator;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TNotesRichTextNavigatorProperties;
    function      GetServerProperties: TNotesRichTextNavigatorProperties;
{$ENDIF}
    function      GetDefaultInterface: IRichTextNavigator;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IRichTextNavigator);
    procedure Disconnect; override;
    function FindNthElement(lType: RT_ELEM; lOccurrence: Integer): WordBool;
    function FindFirstElement(lType: RT_ELEM): WordBool;
    function FindNextElement(lType: RT_ELEM; lOccurrence: Integer): WordBool;
    function FindLastElement(lType: RT_ELEM): WordBool;
    function FindFirstString(const pTarget: WideString; lOptions: Integer): WordBool;
    function FindNextString(const pTarget: WideString; lOptions: Integer): WordBool;
    function GetElement: OleVariant;
    function GetFirstElement(lType: RT_ELEM): OleVariant;
    function GetNextElement(lType: RT_ELEM; lOccurrence: Integer): OleVariant;
    function GetNthElement(lType: RT_ELEM; lOccurrence: Integer): OleVariant;
    function GetLastElement(lType: RT_ELEM): OleVariant;
    procedure SetPosition(pIRTElement: OleVariant);
    procedure SetPositionAtEnd(pIRTElement: OleVariant);
    procedure SetCharOffset(lOffset: Integer);
    function Clone: IRichTextNavigator;
    property DefaultInterface: IRichTextNavigator read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TNotesRichTextNavigatorProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TNotesRichTextNavigator
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TNotesRichTextNavigatorProperties = class(TPersistent)
  private
    FServer:    TNotesRichTextNavigator;
    function    GetDefaultInterface: IRichTextNavigator;
    constructor Create(AServer: TNotesRichTextNavigator);
  protected
  public
    property DefaultInterface: IRichTextNavigator read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoNotesRichTextRange provides a Create and CreateRemote method to          
// create instances of the default interface IRichTextRange exposed by              
// the CoClass NotesRichTextRange. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoNotesRichTextRange = class
    class function Create: IRichTextRange;
    class function CreateRemote(const MachineName: string): IRichTextRange;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TNotesRichTextRange
// Help String      : 
// Default Interface: IRichTextRange
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TNotesRichTextRangeProperties= class;
{$ENDIF}
  TNotesRichTextRange = class(TOleServer)
  private
    FIntf:        IRichTextRange;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TNotesRichTextRangeProperties;
    function      GetServerProperties: TNotesRichTextRangeProperties;
{$ENDIF}
    function      GetDefaultInterface: IRichTextRange;
  protected
    procedure InitServerData; override;
    function Get_type_: RT_ELEM;
    function Get_TextRun: WideString;
    function Get_TextParagraph: WideString;
    function Get_Style: IRichTextStyle;
    function Get_Navigator: IRichTextNavigator;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IRichTextRange);
    procedure Disconnect; override;
    procedure SetStyle(const pIRTStyle: IRichTextStyle);
    procedure SetBegin(ppIRTElement: OleVariant);
    procedure SetEnd(ppIRTElement: OleVariant);
    procedure Reset(bBegin: WordBool; bEnd: WordBool);
    procedure Remove;
    function Clone: IRichTextRange;
    function FindandReplace(const pFindString: WideString; const pReplString: WideString;
                            lOptions: Integer): Integer;
    property DefaultInterface: IRichTextRange read GetDefaultInterface;
    property type_: RT_ELEM read Get_type_;
    property TextRun: WideString read Get_TextRun;
    property TextParagraph: WideString read Get_TextParagraph;
    property Style: IRichTextStyle read Get_Style;
    property Navigator: IRichTextNavigator read Get_Navigator;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TNotesRichTextRangeProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TNotesRichTextRange
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TNotesRichTextRangeProperties = class(TPersistent)
  private
    FServer:    TNotesRichTextRange;
    function    GetDefaultInterface: IRichTextRange;
    constructor Create(AServer: TNotesRichTextRange);
  protected
    function Get_type_: RT_ELEM;
    function Get_TextRun: WideString;
    function Get_TextParagraph: WideString;
    function Get_Style: IRichTextStyle;
    function Get_Navigator: IRichTextNavigator;
  public
    property DefaultInterface: IRichTextRange read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoNotesRichTextDoclink provides a Create and CreateRemote method to
// create instances of the default interface IRichTextDoclink exposed by
// the CoClass NotesRichTextDoclink. The functions are intended to be used by
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoNotesRichTextDoclink = class
    class function Create: IRichTextDoclink;
    class function CreateRemote(const MachineName: string): IRichTextDoclink;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TNotesRichTextDoclink
// Help String      : 
// Default Interface: IRichTextDoclink
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TNotesRichTextDoclinkProperties= class;
{$ENDIF}
  TNotesRichTextDoclink = class(TOleServer)
  private
    FIntf:        IRichTextDoclink;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TNotesRichTextDoclinkProperties;
    function      GetServerProperties: TNotesRichTextDoclinkProperties;
{$ENDIF}
    function      GetDefaultInterface: IRichTextDoclink;
  protected
    procedure InitServerData; override;
    function Get_DBReplicaID: WideString;
    procedure Set_DBReplicaID(const pDBReplicaID: WideString);
    function Get_ViewUNID: WideString;
    procedure Set_ViewUNID(const pViewUNID: WideString);
    function Get_DocUNID: WideString;
    procedure Set_DocUNID(const pDocUNID: WideString);
    function Get_DisplayComment: WideString;
    procedure Set_DisplayComment(const pDisplayComment: WideString);
    function Get_ServerHint: WideString;
    procedure Set_ServerHint(const pServerHint: WideString);
    function Get_HotSpotText: WideString;
    procedure Set_HotSpotText(const pHotspottext: WideString);
    function Get_HotSpotTextStyle: IRichTextStyle;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IRichTextDoclink);
    procedure Disconnect; override;
    procedure Remove;
    procedure SetHotSpotTextStyle(const pIRTStyle: IRichTextStyle);
    property DefaultInterface: IRichTextDoclink read GetDefaultInterface;
    property HotSpotTextStyle: IRichTextStyle read Get_HotSpotTextStyle;
    property DBReplicaID: WideString read Get_DBReplicaID write Set_DBReplicaID;
    property ViewUNID: WideString read Get_ViewUNID write Set_ViewUNID;
    property DocUNID: WideString read Get_DocUNID write Set_DocUNID;
    property DisplayComment: WideString read Get_DisplayComment write Set_DisplayComment;
    property ServerHint: WideString read Get_ServerHint write Set_ServerHint;
    property HotSpotText: WideString read Get_HotSpotText write Set_HotSpotText;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TNotesRichTextDoclinkProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TNotesRichTextDoclink
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TNotesRichTextDoclinkProperties = class(TPersistent)
  private
    FServer:    TNotesRichTextDoclink;
    function    GetDefaultInterface: IRichTextDoclink;
    constructor Create(AServer: TNotesRichTextDoclink);
  protected
    function Get_DBReplicaID: WideString;
    procedure Set_DBReplicaID(const pDBReplicaID: WideString);
    function Get_ViewUNID: WideString;
    procedure Set_ViewUNID(const pViewUNID: WideString);
    function Get_DocUNID: WideString;
    procedure Set_DocUNID(const pDocUNID: WideString);
    function Get_DisplayComment: WideString;
    procedure Set_DisplayComment(const pDisplayComment: WideString);
    function Get_ServerHint: WideString;
    procedure Set_ServerHint(const pServerHint: WideString);
    function Get_HotSpotText: WideString;
    procedure Set_HotSpotText(const pHotspottext: WideString);
    function Get_HotSpotTextStyle: IRichTextStyle;
  public
    property DefaultInterface: IRichTextDoclink read GetDefaultInterface;
  published
    property DBReplicaID: WideString read Get_DBReplicaID write Set_DBReplicaID;
    property ViewUNID: WideString read Get_ViewUNID write Set_ViewUNID;
    property DocUNID: WideString read Get_DocUNID write Set_DocUNID;
    property DisplayComment: WideString read Get_DisplayComment write Set_DisplayComment;
    property ServerHint: WideString read Get_ServerHint write Set_ServerHint;
    property HotSpotText: WideString read Get_HotSpotText write Set_HotSpotText;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoNotesRichTextSection provides a Create and CreateRemote method to          
// create instances of the default interface IRichTextSection exposed by              
// the CoClass NotesRichTextSection. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoNotesRichTextSection = class
    class function Create: IRichTextSection;
    class function CreateRemote(const MachineName: string): IRichTextSection;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TNotesRichTextSection
// Help String      : 
// Default Interface: IRichTextSection
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TNotesRichTextSectionProperties= class;
{$ENDIF}
  TNotesRichTextSection = class(TOleServer)
  private
    FIntf:        IRichTextSection;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TNotesRichTextSectionProperties;
    function      GetServerProperties: TNotesRichTextSectionProperties;
{$ENDIF}
    function      GetDefaultInterface: IRichTextSection;
  protected
    procedure InitServerData; override;
    function Get_Title: WideString;
    procedure Set_Title(const pTitle: WideString);
    function Get_IsExpanded: WordBool;
    procedure Set_IsExpanded(pbExpanded: WordBool);
    function Get_TitleStyle: IRichTextStyle;
    function Get_BarColor: IColorObject;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IRichTextSection);
    procedure Disconnect; override;
    procedure SetTitleStyle(const pIRTStyle: IRichTextStyle);
    procedure SetBarColor(const pIColorObj: IColorObject);
    procedure Remove;
    property DefaultInterface: IRichTextSection read GetDefaultInterface;
    property TitleStyle: IRichTextStyle read Get_TitleStyle;
    property BarColor: IColorObject read Get_BarColor;
    property Title: WideString read Get_Title write Set_Title;
    property IsExpanded: WordBool read Get_IsExpanded write Set_IsExpanded;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TNotesRichTextSectionProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TNotesRichTextSection
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TNotesRichTextSectionProperties = class(TPersistent)
  private
    FServer:    TNotesRichTextSection;
    function    GetDefaultInterface: IRichTextSection;
    constructor Create(AServer: TNotesRichTextSection);
  protected
    function Get_Title: WideString;
    procedure Set_Title(const pTitle: WideString);
    function Get_IsExpanded: WordBool;
    procedure Set_IsExpanded(pbExpanded: WordBool);
    function Get_TitleStyle: IRichTextStyle;
    function Get_BarColor: IColorObject;
  public
    property DefaultInterface: IRichTextSection read GetDefaultInterface;
  published
    property Title: WideString read Get_Title write Set_Title;
    property IsExpanded: WordBool read Get_IsExpanded write Set_IsExpanded;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoNotesRichTextTable provides a Create and CreateRemote method to          
// create instances of the default interface IRichTextTable exposed by              
// the CoClass NotesRichTextTable. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoNotesRichTextTable = class
    class function Create: IRichTextTable;
    class function CreateRemote(const MachineName: string): IRichTextTable;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TNotesRichTextTable
// Help String      : 
// Default Interface: IRichTextTable
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TNotesRichTextTableProperties= class;
{$ENDIF}
  TNotesRichTextTable = class(TOleServer)
  private
    FIntf:        IRichTextTable;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TNotesRichTextTableProperties;
    function      GetServerProperties: TNotesRichTextTableProperties;
{$ENDIF}
    function      GetDefaultInterface: IRichTextTable;
  protected
    procedure InitServerData; override;
    function Get_Style: RT_TBLSTYLE;
    function Get_RowCount: Integer;
    function Get_ColumnCount: Integer;
    function Get_RightToLeft: WordBool;
    procedure Set_RightToLeft(pbRightToLeft: WordBool);
    function Get_RowLabels: OleVariant;
    procedure Set_RowLabels(pRowLabels: OleVariant);
    function Get_Color: IColorObject;
    function Get_AlternateColor: IColorObject;
    procedure Set_Style(plStyle: RT_TBLSTYLE);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IRichTextTable);
    procedure Disconnect; override;
    procedure AddRow(lCount: Integer; lTargetRow: Integer);
    procedure RemoveRow(lCount: Integer; lTargetRow: Integer);
    procedure Remove;
    procedure SetColor(const pIColorObj: IColorObject);
    procedure SetAlternateColor(const pIColorObj: IColorObject);
    property DefaultInterface: IRichTextTable read GetDefaultInterface;
    property RowCount: Integer read Get_RowCount;
    property ColumnCount: Integer read Get_ColumnCount;
    property RowLabels: OleVariant read Get_RowLabels write Set_RowLabels;
    property Color: IColorObject read Get_Color;
    property AlternateColor: IColorObject read Get_AlternateColor;
    property Style: RT_TBLSTYLE read Get_Style write Set_Style;
    property RightToLeft: WordBool read Get_RightToLeft write Set_RightToLeft;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TNotesRichTextTableProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TNotesRichTextTable
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TNotesRichTextTableProperties = class(TPersistent)
  private
    FServer:    TNotesRichTextTable;
    function    GetDefaultInterface: IRichTextTable;
    constructor Create(AServer: TNotesRichTextTable);
  protected
    function Get_Style: RT_TBLSTYLE;
    function Get_RowCount: Integer;
    function Get_ColumnCount: Integer;
    function Get_RightToLeft: WordBool;
    procedure Set_RightToLeft(pbRightToLeft: WordBool);
    function Get_RowLabels: OleVariant;
    procedure Set_RowLabels(pRowLabels: OleVariant);
    function Get_Color: IColorObject;
    function Get_AlternateColor: IColorObject;
    procedure Set_Style(plStyle: RT_TBLSTYLE);
  public
    property DefaultInterface: IRichTextTable read GetDefaultInterface;
  published
    property Style: RT_TBLSTYLE read Get_Style write Set_Style;
    property RightToLeft: WordBool read Get_RightToLeft write Set_RightToLeft;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoNotesNoteCollection provides a Create and CreateRemote method to          
// create instances of the default interface INoteCollection exposed by              
// the CoClass NotesNoteCollection. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoNotesNoteCollection = class
    class function Create: INoteCollection;
    class function CreateRemote(const MachineName: string): INoteCollection;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TNotesNoteCollection
// Help String      : 
// Default Interface: INoteCollection
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TNotesNoteCollectionProperties= class;
{$ENDIF}
  TNotesNoteCollection = class(TOleServer)
  private
    FIntf:        INoteCollection;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TNotesNoteCollectionProperties;
    function      GetServerProperties: TNotesNoteCollectionProperties;
{$ENDIF}
    function      GetDefaultInterface: INoteCollection;
  protected
    procedure InitServerData; override;
    function Get_SelectDocuments: WordBool;
    procedure Set_SelectDocuments(pbFlag: WordBool);
    function Get_SelectProfiles: WordBool;
    procedure Set_SelectProfiles(pbFlag: WordBool);
    function Get_SelectForms: WordBool;
    procedure Set_SelectForms(pbFlag: WordBool);
    function Get_SelectSubforms: WordBool;
    procedure Set_SelectSubforms(pbFlag: WordBool);
    function Get_SelectActions: WordBool;
    procedure Set_SelectActions(pbFlag: WordBool);
    function Get_SelectFramesets: WordBool;
    procedure Set_SelectFramesets(pbFlag: WordBool);
    function Get_SelectPages: WordBool;
    procedure Set_SelectPages(pbFlag: WordBool);
    function Get_SelectImageResources: WordBool;
    procedure Set_SelectImageResources(pbFlag: WordBool);
    function Get_SelectStyleSheetResources: WordBool;
    procedure Set_SelectStyleSheetResources(pbFlag: WordBool);
    function Get_SelectJavaResources: WordBool;
    procedure Set_SelectJavaResources(pbFlag: WordBool);
    function Get_SelectMiscFormatElements: WordBool;
    procedure Set_SelectMiscFormatElements(pbFlag: WordBool);
    function Get_SelectViews: WordBool;
    procedure Set_SelectViews(pbFlag: WordBool);
    function Get_SelectFolders: WordBool;
    procedure Set_SelectFolders(pbFlag: WordBool);
    function Get_SelectNavigators: WordBool;
    procedure Set_SelectNavigators(pbFlag: WordBool);
    function Get_SelectMiscIndexElements: WordBool;
    procedure Set_SelectMiscIndexElements(pbFlag: WordBool);
    function Get_SelectIcon: WordBool;
    procedure Set_SelectIcon(pbFlag: WordBool);
    function Get_SelectAgents: WordBool;
    procedure Set_SelectAgents(pbFlag: WordBool);
    function Get_SelectOutlines: WordBool;
    procedure Set_SelectOutlines(pbFlag: WordBool);
    function Get_SelectDatabaseScript: WordBool;
    procedure Set_SelectDatabaseScript(pbFlag: WordBool);
    function Get_SelectScriptLibraries: WordBool;
    procedure Set_SelectScriptLibraries(pbFlag: WordBool);
    function Get_SelectDataConnections: WordBool;
    procedure Set_SelectDataConnections(pbFlag: WordBool);
    function Get_SelectMiscCodeElements: WordBool;
    procedure Set_SelectMiscCodeElements(pbFlag: WordBool);
    function Get_SelectSharedFields: WordBool;
    procedure Set_SelectSharedFields(pbFlag: WordBool);
    function Get_SelectHelpAbout: WordBool;
    procedure Set_SelectHelpAbout(pbFlag: WordBool);
    function Get_SelectHelpUsing: WordBool;
    procedure Set_SelectHelpUsing(pbFlag: WordBool);
    function Get_SelectHelpIndex: WordBool;
    procedure Set_SelectHelpIndex(pbFlag: WordBool);
    function Get_SelectReplicationFormulas: WordBool;
    procedure Set_SelectReplicationFormulas(pbFlag: WordBool);
    function Get_SelectACL: WordBool;
    procedure Set_SelectACL(pbFlag: WordBool);
    function Get_SelectionFormula: WideString;
    procedure Set_SelectionFormula(const ppSelectionFormula: WideString);
    function Get_SinceTime: OleVariant;
    procedure Set_SinceTime(pDate: OleVariant);
    function Get_LastBuildTime: OleVariant;
    function Get_Count: Integer;
    function Get_Parent: IDatabase;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: INoteCollection);
    procedure Disconnect; override;
    procedure SelectAllNotes(bFlag: WordBool);
    procedure SelectAllDataNotes(bFlag: WordBool);
    procedure SelectAllAdminNotes(bFlag: WordBool);
    procedure SelectAllDesignElements(bFlag: WordBool);
    procedure SelectAllFormatElements(bFlag: WordBool);
    procedure SelectAllIndexElements(bFlag: WordBool);
    procedure SelectAllCodeElements(bFlag: WordBool);
    procedure BuildCollection;
    procedure ClearCollection;
    procedure Add(NoteIds: OleVariant);
    procedure Remove(NoteIds: OleVariant);
    procedure Intersect(NoteIds: OleVariant);
    function GetFirstNoteId: WideString;
    function GetNextNoteId(const pNoteid: WideString): WideString;
    property DefaultInterface: INoteCollection read GetDefaultInterface;
    property SinceTime: OleVariant read Get_SinceTime write Set_SinceTime;
    property LastBuildTime: OleVariant read Get_LastBuildTime;
    property Count: Integer read Get_Count;
    property Parent: IDatabase read Get_Parent;
    property SelectDocuments: WordBool read Get_SelectDocuments write Set_SelectDocuments;
    property SelectProfiles: WordBool read Get_SelectProfiles write Set_SelectProfiles;
    property SelectForms: WordBool read Get_SelectForms write Set_SelectForms;
    property SelectSubforms: WordBool read Get_SelectSubforms write Set_SelectSubforms;
    property SelectActions: WordBool read Get_SelectActions write Set_SelectActions;
    property SelectFramesets: WordBool read Get_SelectFramesets write Set_SelectFramesets;
    property SelectPages: WordBool read Get_SelectPages write Set_SelectPages;
    property SelectImageResources: WordBool read Get_SelectImageResources write Set_SelectImageResources;
    property SelectStyleSheetResources: WordBool read Get_SelectStyleSheetResources write Set_SelectStyleSheetResources;
    property SelectJavaResources: WordBool read Get_SelectJavaResources write Set_SelectJavaResources;
    property SelectMiscFormatElements: WordBool read Get_SelectMiscFormatElements write Set_SelectMiscFormatElements;
    property SelectViews: WordBool read Get_SelectViews write Set_SelectViews;
    property SelectFolders: WordBool read Get_SelectFolders write Set_SelectFolders;
    property SelectNavigators: WordBool read Get_SelectNavigators write Set_SelectNavigators;
    property SelectMiscIndexElements: WordBool read Get_SelectMiscIndexElements write Set_SelectMiscIndexElements;
    property SelectIcon: WordBool read Get_SelectIcon write Set_SelectIcon;
    property SelectAgents: WordBool read Get_SelectAgents write Set_SelectAgents;
    property SelectOutlines: WordBool read Get_SelectOutlines write Set_SelectOutlines;
    property SelectDatabaseScript: WordBool read Get_SelectDatabaseScript write Set_SelectDatabaseScript;
    property SelectScriptLibraries: WordBool read Get_SelectScriptLibraries write Set_SelectScriptLibraries;
    property SelectDataConnections: WordBool read Get_SelectDataConnections write Set_SelectDataConnections;
    property SelectMiscCodeElements: WordBool read Get_SelectMiscCodeElements write Set_SelectMiscCodeElements;
    property SelectSharedFields: WordBool read Get_SelectSharedFields write Set_SelectSharedFields;
    property SelectHelpAbout: WordBool read Get_SelectHelpAbout write Set_SelectHelpAbout;
    property SelectHelpUsing: WordBool read Get_SelectHelpUsing write Set_SelectHelpUsing;
    property SelectHelpIndex: WordBool read Get_SelectHelpIndex write Set_SelectHelpIndex;
    property SelectReplicationFormulas: WordBool read Get_SelectReplicationFormulas write Set_SelectReplicationFormulas;
    property SelectACL: WordBool read Get_SelectACL write Set_SelectACL;
    property SelectionFormula: WideString read Get_SelectionFormula write Set_SelectionFormula;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TNotesNoteCollectionProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TNotesNoteCollection
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TNotesNoteCollectionProperties = class(TPersistent)
  private
    FServer:    TNotesNoteCollection;
    function    GetDefaultInterface: INoteCollection;
    constructor Create(AServer: TNotesNoteCollection);
  protected
    function Get_SelectDocuments: WordBool;
    procedure Set_SelectDocuments(pbFlag: WordBool);
    function Get_SelectProfiles: WordBool;
    procedure Set_SelectProfiles(pbFlag: WordBool);
    function Get_SelectForms: WordBool;
    procedure Set_SelectForms(pbFlag: WordBool);
    function Get_SelectSubforms: WordBool;
    procedure Set_SelectSubforms(pbFlag: WordBool);
    function Get_SelectActions: WordBool;
    procedure Set_SelectActions(pbFlag: WordBool);
    function Get_SelectFramesets: WordBool;
    procedure Set_SelectFramesets(pbFlag: WordBool);
    function Get_SelectPages: WordBool;
    procedure Set_SelectPages(pbFlag: WordBool);
    function Get_SelectImageResources: WordBool;
    procedure Set_SelectImageResources(pbFlag: WordBool);
    function Get_SelectStyleSheetResources: WordBool;
    procedure Set_SelectStyleSheetResources(pbFlag: WordBool);
    function Get_SelectJavaResources: WordBool;
    procedure Set_SelectJavaResources(pbFlag: WordBool);
    function Get_SelectMiscFormatElements: WordBool;
    procedure Set_SelectMiscFormatElements(pbFlag: WordBool);
    function Get_SelectViews: WordBool;
    procedure Set_SelectViews(pbFlag: WordBool);
    function Get_SelectFolders: WordBool;
    procedure Set_SelectFolders(pbFlag: WordBool);
    function Get_SelectNavigators: WordBool;
    procedure Set_SelectNavigators(pbFlag: WordBool);
    function Get_SelectMiscIndexElements: WordBool;
    procedure Set_SelectMiscIndexElements(pbFlag: WordBool);
    function Get_SelectIcon: WordBool;
    procedure Set_SelectIcon(pbFlag: WordBool);
    function Get_SelectAgents: WordBool;
    procedure Set_SelectAgents(pbFlag: WordBool);
    function Get_SelectOutlines: WordBool;
    procedure Set_SelectOutlines(pbFlag: WordBool);
    function Get_SelectDatabaseScript: WordBool;
    procedure Set_SelectDatabaseScript(pbFlag: WordBool);
    function Get_SelectScriptLibraries: WordBool;
    procedure Set_SelectScriptLibraries(pbFlag: WordBool);
    function Get_SelectDataConnections: WordBool;
    procedure Set_SelectDataConnections(pbFlag: WordBool);
    function Get_SelectMiscCodeElements: WordBool;
    procedure Set_SelectMiscCodeElements(pbFlag: WordBool);
    function Get_SelectSharedFields: WordBool;
    procedure Set_SelectSharedFields(pbFlag: WordBool);
    function Get_SelectHelpAbout: WordBool;
    procedure Set_SelectHelpAbout(pbFlag: WordBool);
    function Get_SelectHelpUsing: WordBool;
    procedure Set_SelectHelpUsing(pbFlag: WordBool);
    function Get_SelectHelpIndex: WordBool;
    procedure Set_SelectHelpIndex(pbFlag: WordBool);
    function Get_SelectReplicationFormulas: WordBool;
    procedure Set_SelectReplicationFormulas(pbFlag: WordBool);
    function Get_SelectACL: WordBool;
    procedure Set_SelectACL(pbFlag: WordBool);
    function Get_SelectionFormula: WideString;
    procedure Set_SelectionFormula(const ppSelectionFormula: WideString);
    function Get_SinceTime: OleVariant;
    procedure Set_SinceTime(pDate: OleVariant);
    function Get_LastBuildTime: OleVariant;
    function Get_Count: Integer;
    function Get_Parent: IDatabase;
  public
    property DefaultInterface: INoteCollection read GetDefaultInterface;
  published
    property SelectDocuments: WordBool read Get_SelectDocuments write Set_SelectDocuments;
    property SelectProfiles: WordBool read Get_SelectProfiles write Set_SelectProfiles;
    property SelectForms: WordBool read Get_SelectForms write Set_SelectForms;
    property SelectSubforms: WordBool read Get_SelectSubforms write Set_SelectSubforms;
    property SelectActions: WordBool read Get_SelectActions write Set_SelectActions;
    property SelectFramesets: WordBool read Get_SelectFramesets write Set_SelectFramesets;
    property SelectPages: WordBool read Get_SelectPages write Set_SelectPages;
    property SelectImageResources: WordBool read Get_SelectImageResources write Set_SelectImageResources;
    property SelectStyleSheetResources: WordBool read Get_SelectStyleSheetResources write Set_SelectStyleSheetResources;
    property SelectJavaResources: WordBool read Get_SelectJavaResources write Set_SelectJavaResources;
    property SelectMiscFormatElements: WordBool read Get_SelectMiscFormatElements write Set_SelectMiscFormatElements;
    property SelectViews: WordBool read Get_SelectViews write Set_SelectViews;
    property SelectFolders: WordBool read Get_SelectFolders write Set_SelectFolders;
    property SelectNavigators: WordBool read Get_SelectNavigators write Set_SelectNavigators;
    property SelectMiscIndexElements: WordBool read Get_SelectMiscIndexElements write Set_SelectMiscIndexElements;
    property SelectIcon: WordBool read Get_SelectIcon write Set_SelectIcon;
    property SelectAgents: WordBool read Get_SelectAgents write Set_SelectAgents;
    property SelectOutlines: WordBool read Get_SelectOutlines write Set_SelectOutlines;
    property SelectDatabaseScript: WordBool read Get_SelectDatabaseScript write Set_SelectDatabaseScript;
    property SelectScriptLibraries: WordBool read Get_SelectScriptLibraries write Set_SelectScriptLibraries;
    property SelectDataConnections: WordBool read Get_SelectDataConnections write Set_SelectDataConnections;
    property SelectMiscCodeElements: WordBool read Get_SelectMiscCodeElements write Set_SelectMiscCodeElements;
    property SelectSharedFields: WordBool read Get_SelectSharedFields write Set_SelectSharedFields;
    property SelectHelpAbout: WordBool read Get_SelectHelpAbout write Set_SelectHelpAbout;
    property SelectHelpUsing: WordBool read Get_SelectHelpUsing write Set_SelectHelpUsing;
    property SelectHelpIndex: WordBool read Get_SelectHelpIndex write Set_SelectHelpIndex;
    property SelectReplicationFormulas: WordBool read Get_SelectReplicationFormulas write Set_SelectReplicationFormulas;
    property SelectACL: WordBool read Get_SelectACL write Set_SelectACL;
    property SelectionFormula: WideString read Get_SelectionFormula write Set_SelectionFormula;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoNotesDXLExporter provides a Create and CreateRemote method to          
// create instances of the default interface IDXLExporter exposed by              
// the CoClass NotesDXLExporter. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoNotesDXLExporter = class
    class function Create: IDXLExporter;
    class function CreateRemote(const MachineName: string): IDXLExporter;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TNotesDXLExporter
// Help String      : 
// Default Interface: IDXLExporter
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TNotesDXLExporterProperties= class;
{$ENDIF}
  TNotesDXLExporter = class(TOleServer)
  private
    FIntf:        IDXLExporter;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TNotesDXLExporterProperties;
    function      GetServerProperties: TNotesDXLExporterProperties;
{$ENDIF}
    function      GetDefaultInterface: IDXLExporter;
  protected
    procedure InitServerData; override;
    function Get_Log: WideString;
    function Get_LogComment: WideString;
    procedure Set_LogComment(const ppLogComment: WideString);
    function Get_ExitOnFirstFatalError: WordBool;
    procedure Set_ExitOnFirstFatalError(pbFlag: WordBool);
    function Get_ForceNoteFormat: WordBool;
    procedure Set_ForceNoteFormat(pbFlag: WordBool);
    function Get_OutputDOCTYPE: WordBool;
    procedure Set_OutputDOCTYPE(pbFlag: WordBool);
    function Get_DoctypeSYSTEM: WideString;
    procedure Set_DoctypeSYSTEM(const ppTitle: WideString);
    function Get_ConvertNotesbitmapsToGIF: WordBool;
    procedure Set_ConvertNotesbitmapsToGIF(pbFlag: WordBool);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IDXLExporter);
    procedure Disconnect; override;
    function Export(Input: OleVariant): WideString;
    property DefaultInterface: IDXLExporter read GetDefaultInterface;
    property Log: WideString read Get_Log;
    property LogComment: WideString read Get_LogComment write Set_LogComment;
    property ExitOnFirstFatalError: WordBool read Get_ExitOnFirstFatalError write Set_ExitOnFirstFatalError;
    property ForceNoteFormat: WordBool read Get_ForceNoteFormat write Set_ForceNoteFormat;
    property OutputDOCTYPE: WordBool read Get_OutputDOCTYPE write Set_OutputDOCTYPE;
    property DoctypeSYSTEM: WideString read Get_DoctypeSYSTEM write Set_DoctypeSYSTEM;
    property ConvertNotesbitmapsToGIF: WordBool read Get_ConvertNotesbitmapsToGIF write Set_ConvertNotesbitmapsToGIF;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TNotesDXLExporterProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TNotesDXLExporter
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TNotesDXLExporterProperties = class(TPersistent)
  private
    FServer:    TNotesDXLExporter;
    function    GetDefaultInterface: IDXLExporter;
    constructor Create(AServer: TNotesDXLExporter);
  protected
    function Get_Log: WideString;
    function Get_LogComment: WideString;
    procedure Set_LogComment(const ppLogComment: WideString);
    function Get_ExitOnFirstFatalError: WordBool;
    procedure Set_ExitOnFirstFatalError(pbFlag: WordBool);
    function Get_ForceNoteFormat: WordBool;
    procedure Set_ForceNoteFormat(pbFlag: WordBool);
    function Get_OutputDOCTYPE: WordBool;
    procedure Set_OutputDOCTYPE(pbFlag: WordBool);
    function Get_DoctypeSYSTEM: WideString;
    procedure Set_DoctypeSYSTEM(const ppTitle: WideString);
    function Get_ConvertNotesbitmapsToGIF: WordBool;
    procedure Set_ConvertNotesbitmapsToGIF(pbFlag: WordBool);
  public
    property DefaultInterface: IDXLExporter read GetDefaultInterface;
  published
    property LogComment: WideString read Get_LogComment write Set_LogComment;
    property ExitOnFirstFatalError: WordBool read Get_ExitOnFirstFatalError write Set_ExitOnFirstFatalError;
    property ForceNoteFormat: WordBool read Get_ForceNoteFormat write Set_ForceNoteFormat;
    property OutputDOCTYPE: WordBool read Get_OutputDOCTYPE write Set_OutputDOCTYPE;
    property DoctypeSYSTEM: WideString read Get_DoctypeSYSTEM write Set_DoctypeSYSTEM;
    property ConvertNotesbitmapsToGIF: WordBool read Get_ConvertNotesbitmapsToGIF write Set_ConvertNotesbitmapsToGIF;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoNotesDXLImporter provides a Create and CreateRemote method to          
// create instances of the default interface IDXLImporter exposed by              
// the CoClass NotesDXLImporter. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoNotesDXLImporter = class
    class function Create: IDXLImporter;
    class function CreateRemote(const MachineName: string): IDXLImporter;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TNotesDXLImporter
// Help String      : 
// Default Interface: IDXLImporter
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TNotesDXLImporterProperties= class;
{$ENDIF}
  TNotesDXLImporter = class(TOleServer)
  private
    FIntf:        IDXLImporter;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TNotesDXLImporterProperties;
    function      GetServerProperties: TNotesDXLImporterProperties;
{$ENDIF}
    function      GetDefaultInterface: IDXLImporter;
  protected
    procedure InitServerData; override;
    function Get_Log: WideString;
    function Get_LogComment: WideString;
    procedure Set_LogComment(const ppLogComment: WideString);
    function Get_ExitOnFirstFatalError: WordBool;
    procedure Set_ExitOnFirstFatalError(pbFlag: WordBool);
    function Get_ACLImportOption: DXLIMPORTOPTION;
    procedure Set_ACLImportOption(pOption: DXLIMPORTOPTION);
    function Get_DesignImportOption: DXLIMPORTOPTION;
    procedure Set_DesignImportOption(pOption: DXLIMPORTOPTION);
    function Get_DocumentImportOption: DXLIMPORTOPTION;
    procedure Set_DocumentImportOption(pOption: DXLIMPORTOPTION);
    function Get_ReplaceDBProperties: WordBool;
    procedure Set_ReplaceDBProperties(pbFlag: WordBool);
    function Get_InputValidationOption: VALIDATIONOPTION;
    procedure Set_InputValidationOption(pOption: VALIDATIONOPTION);
    function Get_CreateFTIndex: WordBool;
    procedure Set_CreateFTIndex(pbFlag: WordBool);
    function Get_ImportedNoteCount: Integer;
    function Get_ReplicaRequiredForReplaceOrUpdate: WordBool;
    procedure Set_ReplicaRequiredForReplaceOrUpdate(pbFlag: WordBool);
    function Get_UnknownTokenLogOption: DXLLOGOPTION;
    procedure Set_UnknownTokenLogOption(pOption: DXLLOGOPTION);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IDXLImporter);
    procedure Disconnect; override;
    function GetFirstImportedNoteId: WideString;
    function GetNextImportedNoteId(const pNoteid: WideString): WideString;
    procedure Import(Input: OleVariant; importDB: OleVariant);
    property DefaultInterface: IDXLImporter read GetDefaultInterface;
    property Log: WideString read Get_Log;
    property ImportedNoteCount: Integer read Get_ImportedNoteCount;
    property LogComment: WideString read Get_LogComment write Set_LogComment;
    property ExitOnFirstFatalError: WordBool read Get_ExitOnFirstFatalError write Set_ExitOnFirstFatalError;
    property ACLImportOption: DXLIMPORTOPTION read Get_ACLImportOption write Set_ACLImportOption;
    property DesignImportOption: DXLIMPORTOPTION read Get_DesignImportOption write Set_DesignImportOption;
    property DocumentImportOption: DXLIMPORTOPTION read Get_DocumentImportOption write Set_DocumentImportOption;
    property ReplaceDBProperties: WordBool read Get_ReplaceDBProperties write Set_ReplaceDBProperties;
    property InputValidationOption: VALIDATIONOPTION read Get_InputValidationOption write Set_InputValidationOption;
    property CreateFTIndex: WordBool read Get_CreateFTIndex write Set_CreateFTIndex;
    property ReplicaRequiredForReplaceOrUpdate: WordBool read Get_ReplicaRequiredForReplaceOrUpdate write Set_ReplicaRequiredForReplaceOrUpdate;
    property UnknownTokenLogOption: DXLLOGOPTION read Get_UnknownTokenLogOption write Set_UnknownTokenLogOption;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TNotesDXLImporterProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TNotesDXLImporter
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TNotesDXLImporterProperties = class(TPersistent)
  private
    FServer:    TNotesDXLImporter;
    function    GetDefaultInterface: IDXLImporter;
    constructor Create(AServer: TNotesDXLImporter);
  protected
    function Get_Log: WideString;
    function Get_LogComment: WideString;
    procedure Set_LogComment(const ppLogComment: WideString);
    function Get_ExitOnFirstFatalError: WordBool;
    procedure Set_ExitOnFirstFatalError(pbFlag: WordBool);
    function Get_ACLImportOption: DXLIMPORTOPTION;
    procedure Set_ACLImportOption(pOption: DXLIMPORTOPTION);
    function Get_DesignImportOption: DXLIMPORTOPTION;
    procedure Set_DesignImportOption(pOption: DXLIMPORTOPTION);
    function Get_DocumentImportOption: DXLIMPORTOPTION;
    procedure Set_DocumentImportOption(pOption: DXLIMPORTOPTION);
    function Get_ReplaceDBProperties: WordBool;
    procedure Set_ReplaceDBProperties(pbFlag: WordBool);
    function Get_InputValidationOption: VALIDATIONOPTION;
    procedure Set_InputValidationOption(pOption: VALIDATIONOPTION);
    function Get_CreateFTIndex: WordBool;
    procedure Set_CreateFTIndex(pbFlag: WordBool);
    function Get_ImportedNoteCount: Integer;
    function Get_ReplicaRequiredForReplaceOrUpdate: WordBool;
    procedure Set_ReplicaRequiredForReplaceOrUpdate(pbFlag: WordBool);
    function Get_UnknownTokenLogOption: DXLLOGOPTION;
    procedure Set_UnknownTokenLogOption(pOption: DXLLOGOPTION);
  public
    property DefaultInterface: IDXLImporter read GetDefaultInterface;
  published
    property LogComment: WideString read Get_LogComment write Set_LogComment;
    property ExitOnFirstFatalError: WordBool read Get_ExitOnFirstFatalError write Set_ExitOnFirstFatalError;
    property ACLImportOption: DXLIMPORTOPTION read Get_ACLImportOption write Set_ACLImportOption;
    property DesignImportOption: DXLIMPORTOPTION read Get_DesignImportOption write Set_DesignImportOption;
    property DocumentImportOption: DXLIMPORTOPTION read Get_DocumentImportOption write Set_DocumentImportOption;
    property ReplaceDBProperties: WordBool read Get_ReplaceDBProperties write Set_ReplaceDBProperties;
    property InputValidationOption: VALIDATIONOPTION read Get_InputValidationOption write Set_InputValidationOption;
    property CreateFTIndex: WordBool read Get_CreateFTIndex write Set_CreateFTIndex;
    property ReplicaRequiredForReplaceOrUpdate: WordBool read Get_ReplicaRequiredForReplaceOrUpdate write Set_ReplicaRequiredForReplaceOrUpdate;
    property UnknownTokenLogOption: DXLLOGOPTION read Get_UnknownTokenLogOption write Set_UnknownTokenLogOption;
  end;
{$ENDIF}


procedure Register;

resourcestring
  dtlServerPage = 'ActiveX';

  dtlOcxPage = 'ActiveX';

var
  EmptyParam: OleVariant;

implementation

uses
  ComObj;

class function CoNotesACL.Create: IACL;
begin
  Result := CreateComObject(CLASS_NotesACL) as IACL;
end;

class function CoNotesACL.CreateRemote(const MachineName: string): IACL;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NotesACL) as IACL;
end;

procedure TNotesACL.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{29131521-2EED-1069-BF5D-00DD011186B7}';
    IntfIID:   '{29131560-2EED-1069-BF5D-00DD011186B7}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TNotesACL.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as IACL;
  end;
end;

procedure TNotesACL.ConnectTo(svrIntf: IACL);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TNotesACL.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TNotesACL.GetDefaultInterface: IACL;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TNotesACL.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TNotesACLProperties.Create(Self);
{$ENDIF}
end;

destructor TNotesACL.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TNotesACL.GetServerProperties: TNotesACLProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TNotesACL.Get_InternetLevel: ACLLEVEL;
begin
    Result := DefaultInterface.InternetLevel;
end;

procedure TNotesACL.Set_InternetLevel(plLevel: ACLLEVEL);
begin
  DefaultInterface.Set_InternetLevel(plLevel);
end;

function TNotesACL.Get_Parent: IDatabase;
begin
    Result := DefaultInterface.Parent;
end;

function TNotesACL.Get_Roles: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.Roles;
end;

procedure TNotesACL.Set_UniformAccess(pbFlag: WordBool);
begin
  DefaultInterface.Set_UniformAccess(pbFlag);
end;

function TNotesACL.Get_UniformAccess: WordBool;
begin
    Result := DefaultInterface.UniformAccess;
end;

procedure TNotesACL.Set_AdministrationServer(const ppName: WideString);
  { Warning: The property AdministrationServer has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.AdministrationServer := ppName;
end;

function TNotesACL.Get_AdministrationServer: WideString;
begin
    Result := DefaultInterface.AdministrationServer;
end;

procedure TNotesACL.Set_IsAdminNames(pbFlag: WordBool);
begin
  DefaultInterface.Set_IsAdminNames(pbFlag);
end;

function TNotesACL.Get_IsAdminNames: WordBool;
begin
    Result := DefaultInterface.IsAdminNames;
end;

procedure TNotesACL.Set_IsAdminReaderAuthor(pbFlag: WordBool);
begin
  DefaultInterface.Set_IsAdminReaderAuthor(pbFlag);
end;

function TNotesACL.Get_IsAdminReaderAuthor: WordBool;
begin
    Result := DefaultInterface.IsAdminReaderAuthor;
end;

procedure TNotesACL.Set_IsExtendedAccess(pbFlag: WordBool);
begin
  DefaultInterface.Set_IsExtendedAccess(pbFlag);
end;

function TNotesACL.Get_IsExtendedAccess: WordBool;
begin
    Result := DefaultInterface.IsExtendedAccess;
end;

procedure TNotesACL.AddRole(const pRole: WideString);
begin
  DefaultInterface.AddRole(pRole);
end;

function TNotesACL.CreateACLEntry(const pName: WideString; lLevel: ACLLEVEL): IACLEntry;
begin
  Result := DefaultInterface.CreateACLEntry(pName, lLevel);
end;

procedure TNotesACL.DeleteRole(const pRole: WideString);
begin
  DefaultInterface.DeleteRole(pRole);
end;

function TNotesACL.GetEntry(const pEname: WideString): IACLEntry;
begin
  Result := DefaultInterface.GetEntry(pEname);
end;

function TNotesACL.GetFirstEntry: IACLEntry;
begin
  Result := DefaultInterface.GetFirstEntry;
end;

function TNotesACL.GetNextEntry(const pIEntry: IACLEntry): IACLEntry;
begin
  Result := DefaultInterface.GetNextEntry(pIEntry);
end;

procedure TNotesACL.RenameRole(const pOldname: WideString; const pNewname: WideString);
begin
  DefaultInterface.RenameRole(pOldname, pNewname);
end;

procedure TNotesACL.RemoveACLEntry(const pName: WideString);
begin
  DefaultInterface.RemoveACLEntry(pName);
end;

procedure TNotesACL.Save;
begin
  DefaultInterface.Save;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TNotesACLProperties.Create(AServer: TNotesACL);
begin
  inherited Create;
  FServer := AServer;
end;

function TNotesACLProperties.GetDefaultInterface: IACL;
begin
  Result := FServer.DefaultInterface;
end;

function TNotesACLProperties.Get_InternetLevel: ACLLEVEL;
begin
    Result := DefaultInterface.InternetLevel;
end;

procedure TNotesACLProperties.Set_InternetLevel(plLevel: ACLLEVEL);
begin
  DefaultInterface.Set_InternetLevel(plLevel);
end;

function TNotesACLProperties.Get_Parent: IDatabase;
begin
    Result := DefaultInterface.Parent;
end;

function TNotesACLProperties.Get_Roles: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.Roles;
end;

procedure TNotesACLProperties.Set_UniformAccess(pbFlag: WordBool);
begin
  DefaultInterface.Set_UniformAccess(pbFlag);
end;

function TNotesACLProperties.Get_UniformAccess: WordBool;
begin
    Result := DefaultInterface.UniformAccess;
end;

procedure TNotesACLProperties.Set_AdministrationServer(const ppName: WideString);
  { Warning: The property AdministrationServer has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.AdministrationServer := ppName;
end;

function TNotesACLProperties.Get_AdministrationServer: WideString;
begin
    Result := DefaultInterface.AdministrationServer;
end;

procedure TNotesACLProperties.Set_IsAdminNames(pbFlag: WordBool);
begin
  DefaultInterface.Set_IsAdminNames(pbFlag);
end;

function TNotesACLProperties.Get_IsAdminNames: WordBool;
begin
    Result := DefaultInterface.IsAdminNames;
end;

procedure TNotesACLProperties.Set_IsAdminReaderAuthor(pbFlag: WordBool);
begin
  DefaultInterface.Set_IsAdminReaderAuthor(pbFlag);
end;

function TNotesACLProperties.Get_IsAdminReaderAuthor: WordBool;
begin
    Result := DefaultInterface.IsAdminReaderAuthor;
end;

procedure TNotesACLProperties.Set_IsExtendedAccess(pbFlag: WordBool);
begin
  DefaultInterface.Set_IsExtendedAccess(pbFlag);
end;

function TNotesACLProperties.Get_IsExtendedAccess: WordBool;
begin
    Result := DefaultInterface.IsExtendedAccess;
end;

{$ENDIF}

class function CoNotesACLEntry.Create: IACLEntry;
begin
  Result := CreateComObject(CLASS_NotesACLEntry) as IACLEntry;
end;

class function CoNotesACLEntry.CreateRemote(const MachineName: string): IACLEntry;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NotesACLEntry) as IACLEntry;
end;

procedure TNotesACLEntry.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{29131522-2EED-1069-BF5D-00DD011186B7}';
    IntfIID:   '{29131561-2EED-1069-BF5D-00DD011186B7}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TNotesACLEntry.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as IACLEntry;
  end;
end;

procedure TNotesACLEntry.ConnectTo(svrIntf: IACLEntry);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TNotesACLEntry.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TNotesACLEntry.GetDefaultInterface: IACLEntry;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TNotesACLEntry.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TNotesACLEntryProperties.Create(Self);
{$ENDIF}
end;

destructor TNotesACLEntry.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TNotesACLEntry.GetServerProperties: TNotesACLEntryProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TNotesACLEntry.Set_CanCreateDocuments(pbFlag: WordBool);
begin
  DefaultInterface.Set_CanCreateDocuments(pbFlag);
end;

function TNotesACLEntry.Get_CanCreateDocuments: WordBool;
begin
    Result := DefaultInterface.CanCreateDocuments;
end;

procedure TNotesACLEntry.Set_CanCreateLSOrJavaAgent(pbFlag: WordBool);
begin
  DefaultInterface.Set_CanCreateLSOrJavaAgent(pbFlag);
end;

function TNotesACLEntry.Get_CanCreateLSOrJavaAgent: WordBool;
begin
    Result := DefaultInterface.CanCreateLSOrJavaAgent;
end;

procedure TNotesACLEntry.Set_CanCreatePersonalAgent(pbFlag: WordBool);
begin
  DefaultInterface.Set_CanCreatePersonalAgent(pbFlag);
end;

function TNotesACLEntry.Get_CanCreatePersonalAgent: WordBool;
begin
    Result := DefaultInterface.CanCreatePersonalAgent;
end;

procedure TNotesACLEntry.Set_CanCreatePersonalFolder(pbFlag: WordBool);
begin
  DefaultInterface.Set_CanCreatePersonalFolder(pbFlag);
end;

function TNotesACLEntry.Get_CanCreatePersonalFolder: WordBool;
begin
    Result := DefaultInterface.CanCreatePersonalFolder;
end;

procedure TNotesACLEntry.Set_CanCreateSharedFolder(pbFlag: WordBool);
begin
  DefaultInterface.Set_CanCreateSharedFolder(pbFlag);
end;

function TNotesACLEntry.Get_CanCreateSharedFolder: WordBool;
begin
    Result := DefaultInterface.CanCreateSharedFolder;
end;

procedure TNotesACLEntry.Set_CanDeleteDocuments(pbFlag: WordBool);
begin
  DefaultInterface.Set_CanDeleteDocuments(pbFlag);
end;

function TNotesACLEntry.Get_CanDeleteDocuments: WordBool;
begin
    Result := DefaultInterface.CanDeleteDocuments;
end;

procedure TNotesACLEntry.Set_IsAdminReaderAuthor(pbFlag: WordBool);
begin
  DefaultInterface.Set_IsAdminReaderAuthor(pbFlag);
end;

function TNotesACLEntry.Get_IsAdminReaderAuthor: WordBool;
begin
    Result := DefaultInterface.IsAdminReaderAuthor;
end;

procedure TNotesACLEntry.Set_IsAdminServer(pbFlag: WordBool);
begin
  DefaultInterface.Set_IsAdminServer(pbFlag);
end;

function TNotesACLEntry.Get_IsAdminServer: WordBool;
begin
    Result := DefaultInterface.IsAdminServer;
end;

procedure TNotesACLEntry.Set_IsGroup(pbFlag: WordBool);
begin
  DefaultInterface.Set_IsGroup(pbFlag);
end;

function TNotesACLEntry.Get_IsGroup: WordBool;
begin
    Result := DefaultInterface.IsGroup;
end;

procedure TNotesACLEntry.Set_IsPerson(pbFlag: WordBool);
begin
  DefaultInterface.Set_IsPerson(pbFlag);
end;

function TNotesACLEntry.Get_IsPerson: WordBool;
begin
    Result := DefaultInterface.IsPerson;
end;

procedure TNotesACLEntry.Set_IsPublicReader(pbFlag: WordBool);
begin
  DefaultInterface.Set_IsPublicReader(pbFlag);
end;

function TNotesACLEntry.Get_IsPublicReader: WordBool;
begin
    Result := DefaultInterface.IsPublicReader;
end;

procedure TNotesACLEntry.Set_IsPublicWriter(pbFlag: WordBool);
begin
  DefaultInterface.Set_IsPublicWriter(pbFlag);
end;

function TNotesACLEntry.Get_IsPublicWriter: WordBool;
begin
    Result := DefaultInterface.IsPublicWriter;
end;

procedure TNotesACLEntry.Set_IsServer(pbFlag: WordBool);
begin
  DefaultInterface.Set_IsServer(pbFlag);
end;

function TNotesACLEntry.Get_IsServer: WordBool;
begin
    Result := DefaultInterface.IsServer;
end;

function TNotesACLEntry.Get_Level: ACLLEVEL;
begin
    Result := DefaultInterface.Level;
end;

procedure TNotesACLEntry.Set_Level(plLevel: ACLLEVEL);
begin
  DefaultInterface.Set_Level(plLevel);
end;

function TNotesACLEntry.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TNotesACLEntry.Set_Name(const ppName: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := ppName;
end;

function TNotesACLEntry.Get_NameObject: IName;
begin
    Result := DefaultInterface.NameObject;
end;

function TNotesACLEntry.Get_Parent: IACL;
begin
    Result := DefaultInterface.Parent;
end;

function TNotesACLEntry.Get_Roles: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.Roles;
end;

function TNotesACLEntry.Get_UserType: LSXBE_ACLTYPE;
begin
    Result := DefaultInterface.UserType;
end;

procedure TNotesACLEntry.Set_UserType(plType: LSXBE_ACLTYPE);
begin
  DefaultInterface.Set_UserType(plType);
end;

procedure TNotesACLEntry.Set_CanReplicateOrCopyDocuments(pbFlag: WordBool);
begin
  DefaultInterface.Set_CanReplicateOrCopyDocuments(pbFlag);
end;

function TNotesACLEntry.Get_CanReplicateOrCopyDocuments: WordBool;
begin
    Result := DefaultInterface.CanReplicateOrCopyDocuments;
end;

procedure TNotesACLEntry.DisableRole(const pRole: WideString);
begin
  DefaultInterface.DisableRole(pRole);
end;

procedure TNotesACLEntry.EnableRole(const pRole: WideString);
begin
  DefaultInterface.EnableRole(pRole);
end;

function TNotesACLEntry.IsRoleEnabled(const pRole: WideString): WordBool;
begin
  Result := DefaultInterface.IsRoleEnabled(pRole);
end;

procedure TNotesACLEntry.Remove;
begin
  DefaultInterface.Remove;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TNotesACLEntryProperties.Create(AServer: TNotesACLEntry);
begin
  inherited Create;
  FServer := AServer;
end;

function TNotesACLEntryProperties.GetDefaultInterface: IACLEntry;
begin
  Result := FServer.DefaultInterface;
end;

procedure TNotesACLEntryProperties.Set_CanCreateDocuments(pbFlag: WordBool);
begin
  DefaultInterface.Set_CanCreateDocuments(pbFlag);
end;

function TNotesACLEntryProperties.Get_CanCreateDocuments: WordBool;
begin
    Result := DefaultInterface.CanCreateDocuments;
end;

procedure TNotesACLEntryProperties.Set_CanCreateLSOrJavaAgent(pbFlag: WordBool);
begin
  DefaultInterface.Set_CanCreateLSOrJavaAgent(pbFlag);
end;

function TNotesACLEntryProperties.Get_CanCreateLSOrJavaAgent: WordBool;
begin
    Result := DefaultInterface.CanCreateLSOrJavaAgent;
end;

procedure TNotesACLEntryProperties.Set_CanCreatePersonalAgent(pbFlag: WordBool);
begin
  DefaultInterface.Set_CanCreatePersonalAgent(pbFlag);
end;

function TNotesACLEntryProperties.Get_CanCreatePersonalAgent: WordBool;
begin
    Result := DefaultInterface.CanCreatePersonalAgent;
end;

procedure TNotesACLEntryProperties.Set_CanCreatePersonalFolder(pbFlag: WordBool);
begin
  DefaultInterface.Set_CanCreatePersonalFolder(pbFlag);
end;

function TNotesACLEntryProperties.Get_CanCreatePersonalFolder: WordBool;
begin
    Result := DefaultInterface.CanCreatePersonalFolder;
end;

procedure TNotesACLEntryProperties.Set_CanCreateSharedFolder(pbFlag: WordBool);
begin
  DefaultInterface.Set_CanCreateSharedFolder(pbFlag);
end;

function TNotesACLEntryProperties.Get_CanCreateSharedFolder: WordBool;
begin
    Result := DefaultInterface.CanCreateSharedFolder;
end;

procedure TNotesACLEntryProperties.Set_CanDeleteDocuments(pbFlag: WordBool);
begin
  DefaultInterface.Set_CanDeleteDocuments(pbFlag);
end;

function TNotesACLEntryProperties.Get_CanDeleteDocuments: WordBool;
begin
    Result := DefaultInterface.CanDeleteDocuments;
end;

procedure TNotesACLEntryProperties.Set_IsAdminReaderAuthor(pbFlag: WordBool);
begin
  DefaultInterface.Set_IsAdminReaderAuthor(pbFlag);
end;

function TNotesACLEntryProperties.Get_IsAdminReaderAuthor: WordBool;
begin
    Result := DefaultInterface.IsAdminReaderAuthor;
end;

procedure TNotesACLEntryProperties.Set_IsAdminServer(pbFlag: WordBool);
begin
  DefaultInterface.Set_IsAdminServer(pbFlag);
end;

function TNotesACLEntryProperties.Get_IsAdminServer: WordBool;
begin
    Result := DefaultInterface.IsAdminServer;
end;

procedure TNotesACLEntryProperties.Set_IsGroup(pbFlag: WordBool);
begin
  DefaultInterface.Set_IsGroup(pbFlag);
end;

function TNotesACLEntryProperties.Get_IsGroup: WordBool;
begin
    Result := DefaultInterface.IsGroup;
end;

procedure TNotesACLEntryProperties.Set_IsPerson(pbFlag: WordBool);
begin
  DefaultInterface.Set_IsPerson(pbFlag);
end;

function TNotesACLEntryProperties.Get_IsPerson: WordBool;
begin
    Result := DefaultInterface.IsPerson;
end;

procedure TNotesACLEntryProperties.Set_IsPublicReader(pbFlag: WordBool);
begin
  DefaultInterface.Set_IsPublicReader(pbFlag);
end;

function TNotesACLEntryProperties.Get_IsPublicReader: WordBool;
begin
    Result := DefaultInterface.IsPublicReader;
end;

procedure TNotesACLEntryProperties.Set_IsPublicWriter(pbFlag: WordBool);
begin
  DefaultInterface.Set_IsPublicWriter(pbFlag);
end;

function TNotesACLEntryProperties.Get_IsPublicWriter: WordBool;
begin
    Result := DefaultInterface.IsPublicWriter;
end;

procedure TNotesACLEntryProperties.Set_IsServer(pbFlag: WordBool);
begin
  DefaultInterface.Set_IsServer(pbFlag);
end;

function TNotesACLEntryProperties.Get_IsServer: WordBool;
begin
    Result := DefaultInterface.IsServer;
end;

function TNotesACLEntryProperties.Get_Level: ACLLEVEL;
begin
    Result := DefaultInterface.Level;
end;

procedure TNotesACLEntryProperties.Set_Level(plLevel: ACLLEVEL);
begin
  DefaultInterface.Set_Level(plLevel);
end;

function TNotesACLEntryProperties.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TNotesACLEntryProperties.Set_Name(const ppName: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := ppName;
end;

function TNotesACLEntryProperties.Get_NameObject: IName;
begin
    Result := DefaultInterface.NameObject;
end;

function TNotesACLEntryProperties.Get_Parent: IACL;
begin
    Result := DefaultInterface.Parent;
end;

function TNotesACLEntryProperties.Get_Roles: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.Roles;
end;

function TNotesACLEntryProperties.Get_UserType: LSXBE_ACLTYPE;
begin
    Result := DefaultInterface.UserType;
end;

procedure TNotesACLEntryProperties.Set_UserType(plType: LSXBE_ACLTYPE);
begin
  DefaultInterface.Set_UserType(plType);
end;

procedure TNotesACLEntryProperties.Set_CanReplicateOrCopyDocuments(pbFlag: WordBool);
begin
  DefaultInterface.Set_CanReplicateOrCopyDocuments(pbFlag);
end;

function TNotesACLEntryProperties.Get_CanReplicateOrCopyDocuments: WordBool;
begin
    Result := DefaultInterface.CanReplicateOrCopyDocuments;
end;

{$ENDIF}

class function CoNotesAgent.Create: IAgent;
begin
  Result := CreateComObject(CLASS_NotesAgent) as IAgent;
end;

class function CoNotesAgent.CreateRemote(const MachineName: string): IAgent;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NotesAgent) as IAgent;
end;

procedure TNotesAgent.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{29131523-2EED-1069-BF5D-00DD011186B7}';
    IntfIID:   '{29131562-2EED-1069-BF5D-00DD011186B7}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TNotesAgent.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as IAgent;
  end;
end;

procedure TNotesAgent.ConnectTo(svrIntf: IAgent);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TNotesAgent.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TNotesAgent.GetDefaultInterface: IAgent;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TNotesAgent.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TNotesAgentProperties.Create(Self);
{$ENDIF}
end;

destructor TNotesAgent.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TNotesAgent.GetServerProperties: TNotesAgentProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TNotesAgent.Get_Comment: WideString;
begin
    Result := DefaultInterface.Comment;
end;

function TNotesAgent.Get_CommonOwner: WideString;
begin
    Result := DefaultInterface.CommonOwner;
end;

function TNotesAgent.Get_HasRunSinceModified: WordBool;
begin
    Result := DefaultInterface.HasRunSinceModified;
end;

function TNotesAgent.Get_HttpURL: WideString;
begin
    Result := DefaultInterface.HttpURL;
end;

function TNotesAgent.Get_IsEnabled: WordBool;
begin
    Result := DefaultInterface.IsEnabled;
end;

procedure TNotesAgent.Set_IsEnabled(pbFlag: WordBool);
begin
  DefaultInterface.Set_IsEnabled(pbFlag);
end;

function TNotesAgent.Get_IsNotesAgent: WordBool;
begin
    Result := DefaultInterface.IsNotesAgent;
end;

function TNotesAgent.Get_IsPublic: WordBool;
begin
    Result := DefaultInterface.IsPublic;
end;

function TNotesAgent.Get_IsWebAgent: WordBool;
begin
    Result := DefaultInterface.IsWebAgent;
end;

function TNotesAgent.Get_LastRun: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.LastRun;
end;

function TNotesAgent.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

function TNotesAgent.Get_NotesURL: WideString;
begin
    Result := DefaultInterface.NotesURL;
end;

function TNotesAgent.Get_Owner: WideString;
begin
    Result := DefaultInterface.Owner;
end;

function TNotesAgent.Get_ParameterDocID: WideString;
begin
    Result := DefaultInterface.ParameterDocID;
end;

function TNotesAgent.Get_Parent: IDatabase;
begin
    Result := DefaultInterface.Parent;
end;

function TNotesAgent.Get_Query: WideString;
begin
    Result := DefaultInterface.Query;
end;

function TNotesAgent.Get_ServerName: WideString;
begin
    Result := DefaultInterface.ServerName;
end;

procedure TNotesAgent.Set_ServerName(const ppName: WideString);
  { Warning: The property ServerName has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ServerName := ppName;
end;

function TNotesAgent.Get_Target: AG_TARGET;
begin
    Result := DefaultInterface.Target;
end;

function TNotesAgent.Get_Trigger: AG_TRIGGER;
begin
    Result := DefaultInterface.Trigger;
end;

function TNotesAgent.Get_OnBehalfOf: WideString;
begin
    Result := DefaultInterface.OnBehalfOf;
end;

function TNotesAgent.Get_LockHolders: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.LockHolders;
end;

function TNotesAgent.Get_IsActivatable: WordBool;
begin
    Result := DefaultInterface.IsActivatable;
end;

procedure TNotesAgent.Remove;
begin
  DefaultInterface.Remove;
end;

procedure TNotesAgent.Run(const pNoteid: WideString);
begin
  DefaultInterface.Run(pNoteid);
end;

procedure TNotesAgent.RunOnServer(const pNoteid: WideString);
begin
  DefaultInterface.RunOnServer(pNoteid);
end;

procedure TNotesAgent.Save;
begin
  DefaultInterface.Save;
end;

function TNotesAgent.Lock(var pName: OleVariant; bProvisionalOK: WordBool): WordBool;
begin
  Result := DefaultInterface.Lock(pName, bProvisionalOK);
end;

function TNotesAgent.LockProvisional: WordBool;
begin
  Result := DefaultInterface.LockProvisional(EmptyParam);
end;

function TNotesAgent.LockProvisional(var pName: OleVariant): WordBool;
begin
  Result := DefaultInterface.LockProvisional(pName);
end;

procedure TNotesAgent.Unlock;
begin
  DefaultInterface.Unlock;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TNotesAgentProperties.Create(AServer: TNotesAgent);
begin
  inherited Create;
  FServer := AServer;
end;

function TNotesAgentProperties.GetDefaultInterface: IAgent;
begin
  Result := FServer.DefaultInterface;
end;

function TNotesAgentProperties.Get_Comment: WideString;
begin
    Result := DefaultInterface.Comment;
end;

function TNotesAgentProperties.Get_CommonOwner: WideString;
begin
    Result := DefaultInterface.CommonOwner;
end;

function TNotesAgentProperties.Get_HasRunSinceModified: WordBool;
begin
    Result := DefaultInterface.HasRunSinceModified;
end;

function TNotesAgentProperties.Get_HttpURL: WideString;
begin
    Result := DefaultInterface.HttpURL;
end;

function TNotesAgentProperties.Get_IsEnabled: WordBool;
begin
    Result := DefaultInterface.IsEnabled;
end;

procedure TNotesAgentProperties.Set_IsEnabled(pbFlag: WordBool);
begin
  DefaultInterface.Set_IsEnabled(pbFlag);
end;

function TNotesAgentProperties.Get_IsNotesAgent: WordBool;
begin
    Result := DefaultInterface.IsNotesAgent;
end;

function TNotesAgentProperties.Get_IsPublic: WordBool;
begin
    Result := DefaultInterface.IsPublic;
end;

function TNotesAgentProperties.Get_IsWebAgent: WordBool;
begin
    Result := DefaultInterface.IsWebAgent;
end;

function TNotesAgentProperties.Get_LastRun: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.LastRun;
end;

function TNotesAgentProperties.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

function TNotesAgentProperties.Get_NotesURL: WideString;
begin
    Result := DefaultInterface.NotesURL;
end;

function TNotesAgentProperties.Get_Owner: WideString;
begin
    Result := DefaultInterface.Owner;
end;

function TNotesAgentProperties.Get_ParameterDocID: WideString;
begin
    Result := DefaultInterface.ParameterDocID;
end;

function TNotesAgentProperties.Get_Parent: IDatabase;
begin
    Result := DefaultInterface.Parent;
end;

function TNotesAgentProperties.Get_Query: WideString;
begin
    Result := DefaultInterface.Query;
end;

function TNotesAgentProperties.Get_ServerName: WideString;
begin
    Result := DefaultInterface.ServerName;
end;

procedure TNotesAgentProperties.Set_ServerName(const ppName: WideString);
  { Warning: The property ServerName has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ServerName := ppName;
end;

function TNotesAgentProperties.Get_Target: AG_TARGET;
begin
    Result := DefaultInterface.Target;
end;

function TNotesAgentProperties.Get_Trigger: AG_TRIGGER;
begin
    Result := DefaultInterface.Trigger;
end;

function TNotesAgentProperties.Get_OnBehalfOf: WideString;
begin
    Result := DefaultInterface.OnBehalfOf;
end;

function TNotesAgentProperties.Get_LockHolders: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.LockHolders;
end;

function TNotesAgentProperties.Get_IsActivatable: WordBool;
begin
    Result := DefaultInterface.IsActivatable;
end;

{$ENDIF}

class function CoNotesDatabase.Create: IDatabase;
begin
  Result := CreateComObject(CLASS_NotesDatabase) as IDatabase;
end;

class function CoNotesDatabase.CreateRemote(const MachineName: string): IDatabase;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NotesDatabase) as IDatabase;
end;

procedure TNotesDatabase.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{29131524-2EED-1069-BF5D-00DD011186B7}';
    IntfIID:   '{29131563-2EED-1069-BF5D-00DD011186B7}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TNotesDatabase.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as IDatabase;
  end;
end;

procedure TNotesDatabase.ConnectTo(svrIntf: IDatabase);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TNotesDatabase.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TNotesDatabase.GetDefaultInterface: IDatabase;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TNotesDatabase.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TNotesDatabaseProperties.Create(Self);
{$ENDIF}
end;

destructor TNotesDatabase.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TNotesDatabase.GetServerProperties: TNotesDatabaseProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TNotesDatabase.Get_ACL: IACL;
begin
    Result := DefaultInterface.ACL;
end;

function TNotesDatabase.Get_AllDocuments: IDocumentCollection;
begin
    Result := DefaultInterface.AllDocuments;
end;

function TNotesDatabase.Get_Agents: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.Agents;
end;

function TNotesDatabase.Get_Categories: WideString;
begin
    Result := DefaultInterface.Categories;
end;

procedure TNotesDatabase.Set_Categories(const ppCategories: WideString);
  { Warning: The property Categories has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Categories := ppCategories;
end;

function TNotesDatabase.Get_Created: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.Created;
end;

function TNotesDatabase.Get_CurrentAccessLevel: Integer;
begin
    Result := DefaultInterface.CurrentAccessLevel;
end;

function TNotesDatabase.Get_DelayUpdates: WordBool;
begin
    Result := DefaultInterface.DelayUpdates;
end;

procedure TNotesDatabase.Set_DelayUpdates(pbFlag: WordBool);
begin
  DefaultInterface.Set_DelayUpdates(pbFlag);
end;

function TNotesDatabase.Get_DesignTemplateName: WideString;
begin
    Result := DefaultInterface.DesignTemplateName;
end;

function TNotesDatabase.Get_FileName: WideString;
begin
    Result := DefaultInterface.FileName;
end;

function TNotesDatabase.Get_FilePath: WideString;
begin
    Result := DefaultInterface.FilePath;
end;

function TNotesDatabase.Get_FolderReferencesEnabled: WordBool;
begin
    Result := DefaultInterface.FolderReferencesEnabled;
end;

procedure TNotesDatabase.Set_FolderReferencesEnabled(pbEnable: WordBool);
begin
  DefaultInterface.Set_FolderReferencesEnabled(pbEnable);
end;

function TNotesDatabase.Get_Forms: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.Forms;
end;

function TNotesDatabase.Get_HttpURL: WideString;
begin
    Result := DefaultInterface.HttpURL;
end;

function TNotesDatabase.Get_IsDirectoryCatalog: WordBool;
begin
    Result := DefaultInterface.IsDirectoryCatalog;
end;

function TNotesDatabase.Get_IsFTIndexed: WordBool;
begin
    Result := DefaultInterface.IsFTIndexed;
end;

function TNotesDatabase.Get_IsMultiDbSearch: WordBool;
begin
    Result := DefaultInterface.IsMultiDbSearch;
end;

function TNotesDatabase.Get_IsOpen: WordBool;
begin
    Result := DefaultInterface.IsOpen;
end;

function TNotesDatabase.Get_IsPublicAddressBook: WordBool;
begin
    Result := DefaultInterface.IsPublicAddressBook;
end;

function TNotesDatabase.Get_IsPrivateAddressBook: WordBool;
begin
    Result := DefaultInterface.IsPrivateAddressBook;
end;

function TNotesDatabase.Get_LastFTIndexed: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.LastFTIndexed;
end;

function TNotesDatabase.Get_LastModified: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.LastModified;
end;

function TNotesDatabase.Get_Managers: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.Managers;
end;

function TNotesDatabase.Get_MaxSize: Double;
begin
    Result := DefaultInterface.MaxSize;
end;

function TNotesDatabase.Get_NotesURL: WideString;
begin
    Result := DefaultInterface.NotesURL;
end;

function TNotesDatabase.Get_Parent: ISession;
begin
    Result := DefaultInterface.Parent;
end;

function TNotesDatabase.Get_PercentUsed: Double;
begin
    Result := DefaultInterface.PercentUsed;
end;

function TNotesDatabase.Get_ReplicaID: WideString;
begin
    Result := DefaultInterface.ReplicaID;
end;

function TNotesDatabase.Get_ReplicationInfo: IReplication;
begin
    Result := DefaultInterface.ReplicationInfo;
end;

function TNotesDatabase.Get_Server: WideString;
begin
    Result := DefaultInterface.Server;
end;

function TNotesDatabase.Get_Size: Double;
begin
    Result := DefaultInterface.Size;
end;

function TNotesDatabase.Get_SizeQuota: Integer;
begin
    Result := DefaultInterface.SizeQuota;
end;

procedure TNotesDatabase.Set_SizeQuota(plQuota: Integer);
begin
  DefaultInterface.Set_SizeQuota(plQuota);
end;

function TNotesDatabase.Get_TemplateName: WideString;
begin
    Result := DefaultInterface.TemplateName;
end;

function TNotesDatabase.Get_Title: WideString;
begin
    Result := DefaultInterface.Title;
end;

procedure TNotesDatabase.Set_Title(const ppTitle: WideString);
  { Warning: The property Title has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Title := ppTitle;
end;

function TNotesDatabase.Get_UnprocessedDocuments: IDocumentCollection;
begin
    Result := DefaultInterface.UnprocessedDocuments;
end;

function TNotesDatabase.Get_Views: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.Views;
end;

function TNotesDatabase.Get_ACLActivityLog: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.ACLActivityLog;
end;

function TNotesDatabase.Get_FTIndexFrequency: FTINDEX_FREQUENCY;
begin
    Result := DefaultInterface.FTIndexFrequency;
end;

procedure TNotesDatabase.Set_FTIndexFrequency(pFtiFreq: FTINDEX_FREQUENCY);
begin
  DefaultInterface.Set_FTIndexFrequency(pFtiFreq);
end;

function TNotesDatabase.Get_IsCurrentAccessPublicReader: WordBool;
begin
    Result := DefaultInterface.IsCurrentAccessPublicReader;
end;

function TNotesDatabase.Get_IsCurrentAccessPublicWriter: WordBool;
begin
    Result := DefaultInterface.IsCurrentAccessPublicWriter;
end;

function TNotesDatabase.Get_IsInMultiDbIndexing: WordBool;
begin
    Result := DefaultInterface.IsInMultiDbIndexing;
end;

procedure TNotesDatabase.Set_IsInMultiDbIndexing(pbFlag: WordBool);
begin
  DefaultInterface.Set_IsInMultiDbIndexing(pbFlag);
end;

function TNotesDatabase.Get_IsLink: WordBool;
begin
    Result := DefaultInterface.IsLink;
end;

function TNotesDatabase.Get_type_: DATABASE_TYPES;
begin
    Result := DefaultInterface.type_;
end;

function TNotesDatabase.Get_IsDocumentLockingEnabled: WordBool;
begin
    Result := DefaultInterface.IsDocumentLockingEnabled;
end;

procedure TNotesDatabase.Set_IsDocumentLockingEnabled(pbFlag: WordBool);
begin
  DefaultInterface.Set_IsDocumentLockingEnabled(pbFlag);
end;

function TNotesDatabase.Get_IsDesignLockingEnabled: WordBool;
begin
    Result := DefaultInterface.IsDesignLockingEnabled;
end;

procedure TNotesDatabase.Set_IsDesignLockingEnabled(pbFlag: WordBool);
begin
  DefaultInterface.Set_IsDesignLockingEnabled(pbFlag);
end;

function TNotesDatabase.Get_IsInService: WordBool;
begin
    Result := DefaultInterface.IsInService;
end;

function TNotesDatabase.Get_IsPendingDelete: WordBool;
begin
    Result := DefaultInterface.IsPendingDelete;
end;

function TNotesDatabase.Get_IsConfigurationDirectory: WordBool;
begin
    Result := DefaultInterface.IsConfigurationDirectory;
end;

function TNotesDatabase.Get_IsClusterReplication: WordBool;
begin
    Result := DefaultInterface.IsClusterReplication;
end;

function TNotesDatabase.Get_ListInDbCatalog: WordBool;
begin
    Result := DefaultInterface.ListInDbCatalog;
end;

function TNotesDatabase.Get_LastFixup: IDateTime;
begin
    Result := DefaultInterface.LastFixup;
end;

function TNotesDatabase.Get_LimitRevisions: Double;
begin
    Result := DefaultInterface.LimitRevisions;
end;

function TNotesDatabase.Get_LimitUpdatedBy: Double;
begin
    Result := DefaultInterface.LimitUpdatedBy;
end;

function TNotesDatabase.Get_FileFormat: Integer;
begin
    Result := DefaultInterface.FileFormat;
end;

function TNotesDatabase.Get_UndeleteExpireTime: Integer;
begin
    Result := DefaultInterface.UndeleteExpireTime;
end;

function TNotesDatabase.Get_SizeWarning: Integer;
begin
    Result := DefaultInterface.SizeWarning;
end;

procedure TNotesDatabase.Set_LimitRevisions(pD: Double);
begin
  DefaultInterface.Set_LimitRevisions(pD);
end;

procedure TNotesDatabase.Set_LimitUpdatedBy(pD: Double);
begin
  DefaultInterface.Set_LimitUpdatedBy(pD);
end;

procedure TNotesDatabase.Set_SizeWarning(plValue: Integer);
begin
  DefaultInterface.Set_SizeWarning(plValue);
end;

procedure TNotesDatabase.Set_UndeleteExpireTime(plValue: Integer);
begin
  DefaultInterface.Set_UndeleteExpireTime(plValue);
end;

procedure TNotesDatabase.Set_InService(Param1: WordBool);
begin
  DefaultInterface.Set_InService(Param1);
end;

procedure TNotesDatabase.Set_ListInDbCatalog(bValue: WordBool);
begin
  DefaultInterface.Set_ListInDbCatalog(bValue);
end;

procedure TNotesDatabase.Set_IsInService(bValue: WordBool);
begin
  DefaultInterface.Set_IsInService(bValue);
end;

function TNotesDatabase.Compact: Integer;
begin
  Result := DefaultInterface.Compact;
end;

function TNotesDatabase.CreateCopy(const pServer: WideString; const pFile: WideString; 
                                   lMaxsize: Integer): IDatabase;
begin
  Result := DefaultInterface.CreateCopy(pServer, pFile, lMaxsize);
end;

function TNotesDatabase.CreateDocument: IDocument;
begin
  Result := DefaultInterface.CreateDocument;
end;

function TNotesDatabase.CreateFromTemplate(const pServer: WideString; const pFile: WideString; 
                                           bInherit: WordBool; lMaxsize: Integer): IDatabase;
begin
  Result := DefaultInterface.CreateFromTemplate(pServer, pFile, bInherit, lMaxsize);
end;

function TNotesDatabase.CreateOutline(const pName: WideString; bGenDefault: WordBool): IOutline;
begin
  Result := DefaultInterface.CreateOutline(pName, bGenDefault);
end;

function TNotesDatabase.CreateReplica(const pServer: WideString; const pFile: WideString): IDatabase;
begin
  Result := DefaultInterface.CreateReplica(pServer, pFile);
end;

procedure TNotesDatabase.EnableFolder(const pName: WideString);
begin
  DefaultInterface.EnableFolder(pName);
end;

function TNotesDatabase.FTDomainSearch(const pQuery: WideString; lMax: Integer; lSortopt: FT_TYPES; 
                                       lOtheropt: FT_TYPES; lStart: Integer; lCount: Integer; 
                                       const pEntryForm: WideString): IDocument;
begin
  Result := DefaultInterface.FTDomainSearch(pQuery, lMax, lSortopt, lOtheropt, lStart, lCount, 
                                            pEntryForm);
end;

function TNotesDatabase.FTSearch(const pQuery: WideString; lMax: Integer; lSortopt: FT_TYPES; 
                                 lOtheropt: FT_TYPES): IDocumentCollection;
begin
  Result := DefaultInterface.FTSearch(pQuery, lMax, lSortopt, lOtheropt);
end;

function TNotesDatabase.GetAgent(const pName: WideString): IAgent;
begin
  Result := DefaultInterface.GetAgent(pName);
end;

function TNotesDatabase.GetDocumentByID(const pNoteid: WideString): IDocument;
begin
  Result := DefaultInterface.GetDocumentByID(pNoteid);
end;

function TNotesDatabase.GetDocumentByUNID(const pUnid: WideString): IDocument;
begin
  Result := DefaultInterface.GetDocumentByUNID(pUnid);
end;

function TNotesDatabase.GetDocumentByURL(const pURL: WideString; lReload: Integer; 
                                         bUrllist: WordBool; const pCharset: WideString; 
                                         const pWebuser: WideString; const pWebpasswd: WideString; 
                                         const pProxyuser: WideString; 
                                         const pProxypasswd: WideString; bNowait: WordBool): IDocument;
begin
  Result := DefaultInterface.GetDocumentByURL(pURL, lReload, bUrllist, pCharset, pWebuser, 
                                              pWebpasswd, pProxyuser, pProxypasswd, bNowait);
end;

function TNotesDatabase.GetForm(const pName: WideString): IForm;
begin
  Result := DefaultInterface.GetForm(pName);
end;

function TNotesDatabase.GetOutline(const pName: WideString): IOutline;
begin
  Result := DefaultInterface.GetOutline(pName);
end;

function TNotesDatabase.GetProfileDocument(const pProfile: WideString; 
                                           const pProfileuser: WideString): IDocument;
begin
  Result := DefaultInterface.GetProfileDocument(pProfile, pProfileuser);
end;

function TNotesDatabase.GetProfileDocCollection(const pProfileName: WideString): IDocumentCollection;
begin
  Result := DefaultInterface.GetProfileDocCollection(pProfileName);
end;

function TNotesDatabase.GetURLHeaderInfo(const pURL: WideString; const pHeader: WideString; 
                                         const pWebuser: WideString; const pWebpasswd: WideString; 
                                         const pProxyuser: WideString; 
                                         const pProxypasswd: WideString): WideString;
begin
  Result := DefaultInterface.GetURLHeaderInfo(pURL, pHeader, pWebuser, pWebpasswd, pProxyuser, 
                                              pProxypasswd);
end;

function TNotesDatabase.GetView(const pName: WideString): IView;
begin
  Result := DefaultInterface.GetView(pName);
end;

procedure TNotesDatabase.GrantAccess(const pName: WideString; lLevel: ACLLEVEL);
begin
  DefaultInterface.GrantAccess(pName, lLevel);
end;

procedure TNotesDatabase.Open;
begin
  DefaultInterface.Open;
end;

function TNotesDatabase.QueryAccess(const pName: WideString): ACLLEVEL;
begin
  Result := DefaultInterface.QueryAccess(pName);
end;

procedure TNotesDatabase.Remove;
begin
  DefaultInterface.Remove;
end;

function TNotesDatabase.Replicate(const pServer: WideString): WordBool;
begin
  Result := DefaultInterface.Replicate(pServer);
end;

procedure TNotesDatabase.RevokeAccess(const pName: WideString);
begin
  DefaultInterface.RevokeAccess(pName);
end;

function TNotesDatabase.Search(const pFormula: WideString; const pIDt: IDateTime; lMax: Integer): IDocumentCollection;
begin
  Result := DefaultInterface.Search(pFormula, pIDt, lMax);
end;

function TNotesDatabase.UnprocessedFTSearch(const pQuery: WideString; lMax: Integer; 
                                            lSortopt: FT_TYPES; lOtheropt: FT_TYPES): IDocumentCollection;
begin
  Result := DefaultInterface.UnprocessedFTSearch(pQuery, lMax, lSortopt, lOtheropt);
end;

function TNotesDatabase.UnprocessedSearch(const pFormula: WideString; const pDt: IDateTime; 
                                          lMax: Integer): IDocumentCollection;
begin
  Result := DefaultInterface.UnprocessedSearch(pFormula, pDt, lMax);
end;

procedure TNotesDatabase.UpdateFTIndex(bCreate: WordBool);
begin
  DefaultInterface.UpdateFTIndex(bCreate);
end;

function TNotesDatabase.CompactWithOptions(cmpcFlags: OleVariant; 
                                           const pSpacethreshhold: WideString; 
                                           unused: COMPACT_OPTIONS): Integer;
begin
  Result := DefaultInterface.CompactWithOptions(cmpcFlags, pSpacethreshhold, unused);
end;

procedure TNotesDatabase.CreateFTIndex(ftiFlags: FTINDEX_OPTIONS; bRecreate: WordBool);
begin
  DefaultInterface.CreateFTIndex(ftiFlags, bRecreate);
end;

function TNotesDatabase.FTSearchRange(const pQuery: WideString; lMax: Integer; lSortopt: FT_TYPES; 
                                      lOtheropt: FT_TYPES; start: Integer): IDocumentCollection;
begin
  Result := DefaultInterface.FTSearchRange(pQuery, lMax, lSortopt, lOtheropt, start);
end;

function TNotesDatabase.OpenByReplicaID(const pServer: WideString; const pReplicaID: WideString): WordBool;
begin
  Result := DefaultInterface.OpenByReplicaID(pServer, pReplicaID);
end;

function TNotesDatabase.OpenIfModified(const pServer: WideString; const pDbfile: WideString; 
                                       const pITimeModifiedSince: IDateTime): WordBool;
begin
  Result := DefaultInterface.OpenIfModified(pServer, pDbfile, pITimeModifiedSince);
end;

function TNotesDatabase.OpenWithFailover(const pServer: WideString; const pDbfile: WideString): WordBool;
begin
  Result := DefaultInterface.OpenWithFailover(pServer, pDbfile);
end;

function TNotesDatabase.QueryAccessPrivileges(const pName: WideString): ACCESS_PRIVILEGES;
begin
  Result := DefaultInterface.QueryAccessPrivileges(pName);
end;

procedure TNotesDatabase.RemoveFTIndex;
begin
  DefaultInterface.RemoveFTIndex;
end;

function TNotesDatabase.UnprocessedFTSearchRange(const pQuery: WideString; lMax: Integer; 
                                                 lSortopt: FT_TYPES; lOtheropt: FT_TYPES; 
                                                 start: Integer): IDocumentCollection;
begin
  Result := DefaultInterface.UnprocessedFTSearchRange(pQuery, lMax, lSortopt, lOtheropt, start);
end;

function TNotesDatabase.CreateView(const Title: WideString; const Formula: WideString; 
                                   const templateView: IView; noRefresh: WordBool): IView;
begin
  Result := DefaultInterface.CreateView(Title, Formula, templateView, noRefresh);
end;

procedure TNotesDatabase.Fixup(opts: DBFIXUP_TYPES);
begin
  DefaultInterface.Fixup(opts);
end;

procedure TNotesDatabase.MarkForDelete;
begin
  DefaultInterface.MarkForDelete;
end;

function TNotesDatabase.GetOption(bit: DB_OPTIONS): WordBool;
begin
  Result := DefaultInterface.GetOption(bit);
end;

procedure TNotesDatabase.SetOption(bit: DB_OPTIONS; bValue: WordBool);
begin
  DefaultInterface.SetOption(bit, bValue);
end;

function TNotesDatabase.CreateNoteCollection(bSelectAll: WordBool): INoteCollection;
begin
  Result := DefaultInterface.CreateNoteCollection(bSelectAll);
end;

procedure TNotesDatabase.Sign(lDocumentType: DBSIGN_TYPES; bExistingSigsOnly: WordBool; 
                              const pNameStr: WideString; bNameStrIsNoteID: WordBool);
begin
  DefaultInterface.Sign(lDocumentType, bExistingSigsOnly, pNameStr, bNameStrIsNoteID);
end;

function TNotesDatabase.QueryAccessRoles(const pName: WideString): OleVariant;
begin
  Result := DefaultInterface.QueryAccessRoles(pName);
end;

function TNotesDatabase.GetModifiedDocuments(const pDTSince: IDateTime; noteClass: DBMOD_TYPES): IDocumentCollection;
begin
  Result := DefaultInterface.GetModifiedDocuments(pDTSince, noteClass);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TNotesDatabaseProperties.Create(AServer: TNotesDatabase);
begin
  inherited Create;
  FServer := AServer;
end;

function TNotesDatabaseProperties.GetDefaultInterface: IDatabase;
begin
  Result := FServer.DefaultInterface;
end;

function TNotesDatabaseProperties.Get_ACL: IACL;
begin
    Result := DefaultInterface.ACL;
end;

function TNotesDatabaseProperties.Get_AllDocuments: IDocumentCollection;
begin
    Result := DefaultInterface.AllDocuments;
end;

function TNotesDatabaseProperties.Get_Agents: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.Agents;
end;

function TNotesDatabaseProperties.Get_Categories: WideString;
begin
    Result := DefaultInterface.Categories;
end;

procedure TNotesDatabaseProperties.Set_Categories(const ppCategories: WideString);
  { Warning: The property Categories has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Categories := ppCategories;
end;

function TNotesDatabaseProperties.Get_Created: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.Created;
end;

function TNotesDatabaseProperties.Get_CurrentAccessLevel: Integer;
begin
    Result := DefaultInterface.CurrentAccessLevel;
end;

function TNotesDatabaseProperties.Get_DelayUpdates: WordBool;
begin
    Result := DefaultInterface.DelayUpdates;
end;

procedure TNotesDatabaseProperties.Set_DelayUpdates(pbFlag: WordBool);
begin
  DefaultInterface.Set_DelayUpdates(pbFlag);
end;

function TNotesDatabaseProperties.Get_DesignTemplateName: WideString;
begin
    Result := DefaultInterface.DesignTemplateName;
end;

function TNotesDatabaseProperties.Get_FileName: WideString;
begin
    Result := DefaultInterface.FileName;
end;

function TNotesDatabaseProperties.Get_FilePath: WideString;
begin
    Result := DefaultInterface.FilePath;
end;

function TNotesDatabaseProperties.Get_FolderReferencesEnabled: WordBool;
begin
    Result := DefaultInterface.FolderReferencesEnabled;
end;

procedure TNotesDatabaseProperties.Set_FolderReferencesEnabled(pbEnable: WordBool);
begin
  DefaultInterface.Set_FolderReferencesEnabled(pbEnable);
end;

function TNotesDatabaseProperties.Get_Forms: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.Forms;
end;

function TNotesDatabaseProperties.Get_HttpURL: WideString;
begin
    Result := DefaultInterface.HttpURL;
end;

function TNotesDatabaseProperties.Get_IsDirectoryCatalog: WordBool;
begin
    Result := DefaultInterface.IsDirectoryCatalog;
end;

function TNotesDatabaseProperties.Get_IsFTIndexed: WordBool;
begin
    Result := DefaultInterface.IsFTIndexed;
end;

function TNotesDatabaseProperties.Get_IsMultiDbSearch: WordBool;
begin
    Result := DefaultInterface.IsMultiDbSearch;
end;

function TNotesDatabaseProperties.Get_IsOpen: WordBool;
begin
    Result := DefaultInterface.IsOpen;
end;

function TNotesDatabaseProperties.Get_IsPublicAddressBook: WordBool;
begin
    Result := DefaultInterface.IsPublicAddressBook;
end;

function TNotesDatabaseProperties.Get_IsPrivateAddressBook: WordBool;
begin
    Result := DefaultInterface.IsPrivateAddressBook;
end;

function TNotesDatabaseProperties.Get_LastFTIndexed: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.LastFTIndexed;
end;

function TNotesDatabaseProperties.Get_LastModified: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.LastModified;
end;

function TNotesDatabaseProperties.Get_Managers: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.Managers;
end;

function TNotesDatabaseProperties.Get_MaxSize: Double;
begin
    Result := DefaultInterface.MaxSize;
end;

function TNotesDatabaseProperties.Get_NotesURL: WideString;
begin
    Result := DefaultInterface.NotesURL;
end;

function TNotesDatabaseProperties.Get_Parent: ISession;
begin
    Result := DefaultInterface.Parent;
end;

function TNotesDatabaseProperties.Get_PercentUsed: Double;
begin
    Result := DefaultInterface.PercentUsed;
end;

function TNotesDatabaseProperties.Get_ReplicaID: WideString;
begin
    Result := DefaultInterface.ReplicaID;
end;

function TNotesDatabaseProperties.Get_ReplicationInfo: IReplication;
begin
    Result := DefaultInterface.ReplicationInfo;
end;

function TNotesDatabaseProperties.Get_Server: WideString;
begin
    Result := DefaultInterface.Server;
end;

function TNotesDatabaseProperties.Get_Size: Double;
begin
    Result := DefaultInterface.Size;
end;

function TNotesDatabaseProperties.Get_SizeQuota: Integer;
begin
    Result := DefaultInterface.SizeQuota;
end;

procedure TNotesDatabaseProperties.Set_SizeQuota(plQuota: Integer);
begin
  DefaultInterface.Set_SizeQuota(plQuota);
end;

function TNotesDatabaseProperties.Get_TemplateName: WideString;
begin
    Result := DefaultInterface.TemplateName;
end;

function TNotesDatabaseProperties.Get_Title: WideString;
begin
    Result := DefaultInterface.Title;
end;

procedure TNotesDatabaseProperties.Set_Title(const ppTitle: WideString);
  { Warning: The property Title has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Title := ppTitle;
end;

function TNotesDatabaseProperties.Get_UnprocessedDocuments: IDocumentCollection;
begin
    Result := DefaultInterface.UnprocessedDocuments;
end;

function TNotesDatabaseProperties.Get_Views: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.Views;
end;

function TNotesDatabaseProperties.Get_ACLActivityLog: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.ACLActivityLog;
end;

function TNotesDatabaseProperties.Get_FTIndexFrequency: FTINDEX_FREQUENCY;
begin
    Result := DefaultInterface.FTIndexFrequency;
end;

procedure TNotesDatabaseProperties.Set_FTIndexFrequency(pFtiFreq: FTINDEX_FREQUENCY);
begin
  DefaultInterface.Set_FTIndexFrequency(pFtiFreq);
end;

function TNotesDatabaseProperties.Get_IsCurrentAccessPublicReader: WordBool;
begin
    Result := DefaultInterface.IsCurrentAccessPublicReader;
end;

function TNotesDatabaseProperties.Get_IsCurrentAccessPublicWriter: WordBool;
begin
    Result := DefaultInterface.IsCurrentAccessPublicWriter;
end;

function TNotesDatabaseProperties.Get_IsInMultiDbIndexing: WordBool;
begin
    Result := DefaultInterface.IsInMultiDbIndexing;
end;

procedure TNotesDatabaseProperties.Set_IsInMultiDbIndexing(pbFlag: WordBool);
begin
  DefaultInterface.Set_IsInMultiDbIndexing(pbFlag);
end;

function TNotesDatabaseProperties.Get_IsLink: WordBool;
begin
    Result := DefaultInterface.IsLink;
end;

function TNotesDatabaseProperties.Get_type_: DATABASE_TYPES;
begin
    Result := DefaultInterface.type_;
end;

function TNotesDatabaseProperties.Get_IsDocumentLockingEnabled: WordBool;
begin
    Result := DefaultInterface.IsDocumentLockingEnabled;
end;

procedure TNotesDatabaseProperties.Set_IsDocumentLockingEnabled(pbFlag: WordBool);
begin
  DefaultInterface.Set_IsDocumentLockingEnabled(pbFlag);
end;

function TNotesDatabaseProperties.Get_IsDesignLockingEnabled: WordBool;
begin
    Result := DefaultInterface.IsDesignLockingEnabled;
end;

procedure TNotesDatabaseProperties.Set_IsDesignLockingEnabled(pbFlag: WordBool);
begin
  DefaultInterface.Set_IsDesignLockingEnabled(pbFlag);
end;

function TNotesDatabaseProperties.Get_IsInService: WordBool;
begin
    Result := DefaultInterface.IsInService;
end;

function TNotesDatabaseProperties.Get_IsPendingDelete: WordBool;
begin
    Result := DefaultInterface.IsPendingDelete;
end;

function TNotesDatabaseProperties.Get_IsConfigurationDirectory: WordBool;
begin
    Result := DefaultInterface.IsConfigurationDirectory;
end;

function TNotesDatabaseProperties.Get_IsClusterReplication: WordBool;
begin
    Result := DefaultInterface.IsClusterReplication;
end;

function TNotesDatabaseProperties.Get_ListInDbCatalog: WordBool;
begin
    Result := DefaultInterface.ListInDbCatalog;
end;

function TNotesDatabaseProperties.Get_LastFixup: IDateTime;
begin
    Result := DefaultInterface.LastFixup;
end;

function TNotesDatabaseProperties.Get_LimitRevisions: Double;
begin
    Result := DefaultInterface.LimitRevisions;
end;

function TNotesDatabaseProperties.Get_LimitUpdatedBy: Double;
begin
    Result := DefaultInterface.LimitUpdatedBy;
end;

function TNotesDatabaseProperties.Get_FileFormat: Integer;
begin
    Result := DefaultInterface.FileFormat;
end;

function TNotesDatabaseProperties.Get_UndeleteExpireTime: Integer;
begin
    Result := DefaultInterface.UndeleteExpireTime;
end;

function TNotesDatabaseProperties.Get_SizeWarning: Integer;
begin
    Result := DefaultInterface.SizeWarning;
end;

procedure TNotesDatabaseProperties.Set_LimitRevisions(pD: Double);
begin
  DefaultInterface.Set_LimitRevisions(pD);
end;

procedure TNotesDatabaseProperties.Set_LimitUpdatedBy(pD: Double);
begin
  DefaultInterface.Set_LimitUpdatedBy(pD);
end;

procedure TNotesDatabaseProperties.Set_SizeWarning(plValue: Integer);
begin
  DefaultInterface.Set_SizeWarning(plValue);
end;

procedure TNotesDatabaseProperties.Set_UndeleteExpireTime(plValue: Integer);
begin
  DefaultInterface.Set_UndeleteExpireTime(plValue);
end;

procedure TNotesDatabaseProperties.Set_InService(Param1: WordBool);
begin
  DefaultInterface.Set_InService(Param1);
end;

procedure TNotesDatabaseProperties.Set_ListInDbCatalog(bValue: WordBool);
begin
  DefaultInterface.Set_ListInDbCatalog(bValue);
end;

procedure TNotesDatabaseProperties.Set_IsInService(bValue: WordBool);
begin
  DefaultInterface.Set_IsInService(bValue);
end;

{$ENDIF}

class function CoNotesDateRange.Create: IDateRange;
begin
  Result := CreateComObject(CLASS_NotesDateRange) as IDateRange;
end;

class function CoNotesDateRange.CreateRemote(const MachineName: string): IDateRange;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NotesDateRange) as IDateRange;
end;

procedure TNotesDateRange.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{29131525-2EED-1069-BF5D-00DD011186B7}';
    IntfIID:   '{29131565-2EED-1069-BF5D-00DD011186B7}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TNotesDateRange.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as IDateRange;
  end;
end;

procedure TNotesDateRange.ConnectTo(svrIntf: IDateRange);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TNotesDateRange.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TNotesDateRange.GetDefaultInterface: IDateRange;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TNotesDateRange.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TNotesDateRangeProperties.Create(Self);
{$ENDIF}
end;

destructor TNotesDateRange.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TNotesDateRange.GetServerProperties: TNotesDateRangeProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TNotesDateRange.Get_EndDateTime: IDateTime;
begin
    Result := DefaultInterface.EndDateTime;
end;

procedure TNotesDateRange.Set_EndDateTime(const ppITime: IDateTime);
begin
  DefaultInterface.Set_EndDateTime(ppITime);
end;

function TNotesDateRange.Get_Parent: ISession;
begin
    Result := DefaultInterface.Parent;
end;

function TNotesDateRange.Get_StartDateTime: IDateTime;
begin
    Result := DefaultInterface.StartDateTime;
end;

procedure TNotesDateRange.Set_StartDateTime(const ppITime: IDateTime);
begin
  DefaultInterface.Set_StartDateTime(ppITime);
end;

function TNotesDateRange.Get_Text: WideString;
begin
    Result := DefaultInterface.Text;
end;

procedure TNotesDateRange.Set_Text(const ppRange: WideString);
  { Warning: The property Text has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Text := ppRange;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TNotesDateRangeProperties.Create(AServer: TNotesDateRange);
begin
  inherited Create;
  FServer := AServer;
end;

function TNotesDateRangeProperties.GetDefaultInterface: IDateRange;
begin
  Result := FServer.DefaultInterface;
end;

function TNotesDateRangeProperties.Get_EndDateTime: IDateTime;
begin
    Result := DefaultInterface.EndDateTime;
end;

procedure TNotesDateRangeProperties.Set_EndDateTime(const ppITime: IDateTime);
begin
  DefaultInterface.Set_EndDateTime(ppITime);
end;

function TNotesDateRangeProperties.Get_Parent: ISession;
begin
    Result := DefaultInterface.Parent;
end;

function TNotesDateRangeProperties.Get_StartDateTime: IDateTime;
begin
    Result := DefaultInterface.StartDateTime;
end;

procedure TNotesDateRangeProperties.Set_StartDateTime(const ppITime: IDateTime);
begin
  DefaultInterface.Set_StartDateTime(ppITime);
end;

function TNotesDateRangeProperties.Get_Text: WideString;
begin
    Result := DefaultInterface.Text;
end;

procedure TNotesDateRangeProperties.Set_Text(const ppRange: WideString);
  { Warning: The property Text has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Text := ppRange;
end;

{$ENDIF}

class function CoNotesDateTime.Create: IDateTime;
begin
  Result := CreateComObject(CLASS_NotesDateTime) as IDateTime;
end;

class function CoNotesDateTime.CreateRemote(const MachineName: string): IDateTime;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NotesDateTime) as IDateTime;
end;

procedure TNotesDateTime.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{29131526-2EED-1069-BF5D-00DD011186B7}';
    IntfIID:   '{29131564-2EED-1069-BF5D-00DD011186B7}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TNotesDateTime.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as IDateTime;
  end;
end;

procedure TNotesDateTime.ConnectTo(svrIntf: IDateTime);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TNotesDateTime.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TNotesDateTime.GetDefaultInterface: IDateTime;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TNotesDateTime.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TNotesDateTimeProperties.Create(Self);
{$ENDIF}
end;

destructor TNotesDateTime.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TNotesDateTime.GetServerProperties: TNotesDateTimeProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TNotesDateTime.Get_DateOnly: WideString;
begin
    Result := DefaultInterface.DateOnly;
end;

function TNotesDateTime.Get_GMTTime: WideString;
begin
    Result := DefaultInterface.GMTTime;
end;

function TNotesDateTime.Get_IsDST: WordBool;
begin
    Result := DefaultInterface.IsDST;
end;

function TNotesDateTime.Get_IsValidDate: WordBool;
begin
    Result := DefaultInterface.IsValidDate;
end;

function TNotesDateTime.Get_LocalTime: WideString;
begin
    Result := DefaultInterface.LocalTime;
end;

procedure TNotesDateTime.Set_LocalTime(const ppTime: WideString);
  { Warning: The property LocalTime has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.LocalTime := ppTime;
end;

function TNotesDateTime.Get_LSGMTTime: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.LSGMTTime;
end;

function TNotesDateTime.Get_LSLocalTime: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.LSLocalTime;
end;

procedure TNotesDateTime.Set_LSLocalTime(pTime: OleVariant);
begin
  DefaultInterface.Set_LSLocalTime(pTime);
end;

function TNotesDateTime.Get_Parent: ISession;
begin
    Result := DefaultInterface.Parent;
end;

function TNotesDateTime.Get_TimeOnly: WideString;
begin
    Result := DefaultInterface.TimeOnly;
end;

function TNotesDateTime.Get_TimeZone: Integer;
begin
    Result := DefaultInterface.TimeZone;
end;

function TNotesDateTime.Get_ZoneTime: WideString;
begin
    Result := DefaultInterface.ZoneTime;
end;

procedure TNotesDateTime.AdjustDay(lAdjust: Integer; bPreserveLocalTime: WordBool);
begin
  DefaultInterface.AdjustDay(lAdjust, bPreserveLocalTime);
end;

procedure TNotesDateTime.AdjustHour(lAdjust: Integer; bPreserveLocalTime: WordBool);
begin
  DefaultInterface.AdjustHour(lAdjust, bPreserveLocalTime);
end;

procedure TNotesDateTime.AdjustMinute(lAdjust: Integer; bPreserveLocalTime: WordBool);
begin
  DefaultInterface.AdjustMinute(lAdjust, bPreserveLocalTime);
end;

procedure TNotesDateTime.AdjustMonth(lAdjust: Integer; bPreserveLocalTime: WordBool);
begin
  DefaultInterface.AdjustMonth(lAdjust, bPreserveLocalTime);
end;

procedure TNotesDateTime.AdjustSecond(lAdjust: Integer; bPreserveLocalTime: WordBool);
begin
  DefaultInterface.AdjustSecond(lAdjust, bPreserveLocalTime);
end;

procedure TNotesDateTime.AdjustYear(lAdjust: Integer; bPreserveLocalTime: WordBool);
begin
  DefaultInterface.AdjustYear(lAdjust, bPreserveLocalTime);
end;

procedure TNotesDateTime.ConvertToZone(lNewzone: Integer; bDst: WordBool);
begin
  DefaultInterface.ConvertToZone(lNewzone, bDst);
end;

procedure TNotesDateTime.SetAnyDate;
begin
  DefaultInterface.SetAnyDate;
end;

procedure TNotesDateTime.SetAnyTime;
begin
  DefaultInterface.SetAnyTime;
end;

procedure TNotesDateTime.SetNow;
begin
  DefaultInterface.SetNow;
end;

function TNotesDateTime.TimeDifference(const pIDt: IDateTime): Integer;
begin
  Result := DefaultInterface.TimeDifference(pIDt);
end;

function TNotesDateTime.TimeDifferenceDouble(const pIDt: IDateTime): Double;
begin
  Result := DefaultInterface.TimeDifferenceDouble(pIDt);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TNotesDateTimeProperties.Create(AServer: TNotesDateTime);
begin
  inherited Create;
  FServer := AServer;
end;

function TNotesDateTimeProperties.GetDefaultInterface: IDateTime;
begin
  Result := FServer.DefaultInterface;
end;

function TNotesDateTimeProperties.Get_DateOnly: WideString;
begin
    Result := DefaultInterface.DateOnly;
end;

function TNotesDateTimeProperties.Get_GMTTime: WideString;
begin
    Result := DefaultInterface.GMTTime;
end;

function TNotesDateTimeProperties.Get_IsDST: WordBool;
begin
    Result := DefaultInterface.IsDST;
end;

function TNotesDateTimeProperties.Get_IsValidDate: WordBool;
begin
    Result := DefaultInterface.IsValidDate;
end;

function TNotesDateTimeProperties.Get_LocalTime: WideString;
begin
    Result := DefaultInterface.LocalTime;
end;

procedure TNotesDateTimeProperties.Set_LocalTime(const ppTime: WideString);
  { Warning: The property LocalTime has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.LocalTime := ppTime;
end;

function TNotesDateTimeProperties.Get_LSGMTTime: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.LSGMTTime;
end;

function TNotesDateTimeProperties.Get_LSLocalTime: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.LSLocalTime;
end;

procedure TNotesDateTimeProperties.Set_LSLocalTime(pTime: OleVariant);
begin
  DefaultInterface.Set_LSLocalTime(pTime);
end;

function TNotesDateTimeProperties.Get_Parent: ISession;
begin
    Result := DefaultInterface.Parent;
end;

function TNotesDateTimeProperties.Get_TimeOnly: WideString;
begin
    Result := DefaultInterface.TimeOnly;
end;

function TNotesDateTimeProperties.Get_TimeZone: Integer;
begin
    Result := DefaultInterface.TimeZone;
end;

function TNotesDateTimeProperties.Get_ZoneTime: WideString;
begin
    Result := DefaultInterface.ZoneTime;
end;

{$ENDIF}

class function CoNotesDbDirectory.Create: IDbDirectory;
begin
  Result := CreateComObject(CLASS_NotesDbDirectory) as IDbDirectory;
end;

class function CoNotesDbDirectory.CreateRemote(const MachineName: string): IDbDirectory;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NotesDbDirectory) as IDbDirectory;
end;

procedure TNotesDbDirectory.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{29131527-2EED-1069-BF5D-00DD011186B7}';
    IntfIID:   '{29131566-2EED-1069-BF5D-00DD011186B7}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TNotesDbDirectory.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as IDbDirectory;
  end;
end;

procedure TNotesDbDirectory.ConnectTo(svrIntf: IDbDirectory);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TNotesDbDirectory.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TNotesDbDirectory.GetDefaultInterface: IDbDirectory;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TNotesDbDirectory.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TNotesDbDirectoryProperties.Create(Self);
{$ENDIF}
end;

destructor TNotesDbDirectory.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TNotesDbDirectory.GetServerProperties: TNotesDbDirectoryProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TNotesDbDirectory.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

function TNotesDbDirectory.Get_Parent: ISession;
begin
    Result := DefaultInterface.Parent;
end;

function TNotesDbDirectory.CreateDatabase(const pDbfile: WideString; bOpen: WordBool): IDatabase;
begin
  Result := DefaultInterface.CreateDatabase(pDbfile, bOpen);
end;

function TNotesDbDirectory.GetFirstDatabase(lFiletype: DB_TYPES): IDatabase;
begin
  Result := DefaultInterface.GetFirstDatabase(lFiletype);
end;

function TNotesDbDirectory.GetNextDatabase: IDatabase;
begin
  Result := DefaultInterface.GetNextDatabase;
end;

function TNotesDbDirectory.OpenDatabase(const pDbfile: WideString; bFailover: WordBool): IDatabase;
begin
  Result := DefaultInterface.OpenDatabase(pDbfile, bFailover);
end;

function TNotesDbDirectory.OpenDatabaseIfModified(const pDbfile: WideString; const pITime: IDateTime): IDatabase;
begin
  Result := DefaultInterface.OpenDatabaseIfModified(pDbfile, pITime);
end;

function TNotesDbDirectory.OpenMailDatabase: IDatabase;
begin
  Result := DefaultInterface.OpenMailDatabase;
end;

function TNotesDbDirectory.OpenDatabaseByReplicaID(const pRid: WideString): IDatabase;
begin
  Result := DefaultInterface.OpenDatabaseByReplicaID(pRid);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TNotesDbDirectoryProperties.Create(AServer: TNotesDbDirectory);
begin
  inherited Create;
  FServer := AServer;
end;

function TNotesDbDirectoryProperties.GetDefaultInterface: IDbDirectory;
begin
  Result := FServer.DefaultInterface;
end;

function TNotesDbDirectoryProperties.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

function TNotesDbDirectoryProperties.Get_Parent: ISession;
begin
    Result := DefaultInterface.Parent;
end;

{$ENDIF}

class function CoNotesDocument.Create: IDocument;
begin
  Result := CreateComObject(CLASS_NotesDocument) as IDocument;
end;

class function CoNotesDocument.CreateRemote(const MachineName: string): IDocument;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NotesDocument) as IDocument;
end;

procedure TNotesDocument.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{29131528-2EED-1069-BF5D-00DD011186B7}';
    IntfIID:   '{29131567-2EED-1069-BF5D-00DD011186B7}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TNotesDocument.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as IDocument;
  end;
end;

procedure TNotesDocument.ConnectTo(svrIntf: IDocument);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TNotesDocument.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TNotesDocument.GetDefaultInterface: IDocument;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TNotesDocument.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TNotesDocumentProperties.Create(Self);
{$ENDIF}
end;

destructor TNotesDocument.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TNotesDocument.GetServerProperties: TNotesDocumentProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TNotesDocument.Get_Authors: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.Authors;
end;

function TNotesDocument.Get_ColumnValues: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.ColumnValues;
end;

function TNotesDocument.Get_Created: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.Created;
end;

function TNotesDocument.Get_EmbeddedObjects: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.EmbeddedObjects;
end;

function TNotesDocument.Get_EncryptionKeys: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.EncryptionKeys;
end;

procedure TNotesDocument.Set_EncryptionKeys(pKeys: OleVariant);
begin
  DefaultInterface.Set_EncryptionKeys(pKeys);
end;

procedure TNotesDocument.Set_EncryptOnSend(pbFlag: WordBool);
begin
  DefaultInterface.Set_EncryptOnSend(pbFlag);
end;

function TNotesDocument.Get_EncryptOnSend: WordBool;
begin
    Result := DefaultInterface.EncryptOnSend;
end;

function TNotesDocument.Get_FolderReferences: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.FolderReferences;
end;

function TNotesDocument.Get_FTSearchScore: Integer;
begin
    Result := DefaultInterface.FTSearchScore;
end;

function TNotesDocument.Get_HasEmbedded: WordBool;
begin
    Result := DefaultInterface.HasEmbedded;
end;

function TNotesDocument.Get_HttpURL: WideString;
begin
    Result := DefaultInterface.HttpURL;
end;

function TNotesDocument.Get_IsDeleted: WordBool;
begin
    Result := DefaultInterface.IsDeleted;
end;

function TNotesDocument.Get_IsNewNote: WordBool;
begin
    Result := DefaultInterface.IsNewNote;
end;

function TNotesDocument.Get_IsProfile: WordBool;
begin
    Result := DefaultInterface.IsProfile;
end;

function TNotesDocument.Get_IsResponse: WordBool;
begin
    Result := DefaultInterface.IsResponse;
end;

function TNotesDocument.Get_IsSigned: WordBool;
begin
    Result := DefaultInterface.IsSigned;
end;

function TNotesDocument.Get_IsUIDocOpen: WordBool;
begin
    Result := DefaultInterface.IsUIDocOpen;
end;

function TNotesDocument.Get_IsValid: WordBool;
begin
    Result := DefaultInterface.IsValid;
end;

function TNotesDocument.Get_Items: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.Items;
end;

function TNotesDocument.Get_Key: WideString;
begin
    Result := DefaultInterface.Key;
end;

function TNotesDocument.Get_LastAccessed: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.LastAccessed;
end;

function TNotesDocument.Get_LastModified: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.LastModified;
end;

function TNotesDocument.Get_NameOfProfile: WideString;
begin
    Result := DefaultInterface.NameOfProfile;
end;

function TNotesDocument.Get_NoteID: WideString;
begin
    Result := DefaultInterface.NoteID;
end;

function TNotesDocument.Get_NotesURL: WideString;
begin
    Result := DefaultInterface.NotesURL;
end;

function TNotesDocument.Get_ParentDatabase: IDatabase;
begin
    Result := DefaultInterface.ParentDatabase;
end;

function TNotesDocument.Get_ParentDocumentUNID: WideString;
begin
    Result := DefaultInterface.ParentDocumentUNID;
end;

function TNotesDocument.Get_ParentView: IView;
begin
    Result := DefaultInterface.ParentView;
end;

function TNotesDocument.Get_Responses: IDocumentCollection;
begin
    Result := DefaultInterface.Responses;
end;

function TNotesDocument.Get_SaveMessageOnSend: WordBool;
begin
    Result := DefaultInterface.SaveMessageOnSend;
end;

procedure TNotesDocument.Set_SaveMessageOnSend(pbFlag: WordBool);
begin
  DefaultInterface.Set_SaveMessageOnSend(pbFlag);
end;

function TNotesDocument.Get_SentByAgent: WordBool;
begin
    Result := DefaultInterface.SentByAgent;
end;

function TNotesDocument.Get_Signer: WideString;
begin
    Result := DefaultInterface.Signer;
end;

function TNotesDocument.Get_SignOnSend: WordBool;
begin
    Result := DefaultInterface.SignOnSend;
end;

procedure TNotesDocument.Set_SignOnSend(pbFlag: WordBool);
begin
  DefaultInterface.Set_SignOnSend(pbFlag);
end;

function TNotesDocument.Get_Size: Integer;
begin
    Result := DefaultInterface.Size;
end;

function TNotesDocument.Get_UniversalID: WideString;
begin
    Result := DefaultInterface.UniversalID;
end;

procedure TNotesDocument.Set_UniversalID(const ppId: WideString);
  { Warning: The property UniversalID has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.UniversalID := ppId;
end;

function TNotesDocument.Get_Verifier: WideString;
begin
    Result := DefaultInterface.Verifier;
end;

function TNotesDocument.Get_LockHolders: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.LockHolders;
end;

function TNotesDocument.Get_IsEncrypted: WordBool;
begin
    Result := DefaultInterface.IsEncrypted;
end;

function TNotesDocument.AppendItemValue(const pName: WideString; Value: OleVariant): IItem2;
begin
  Result := DefaultInterface.AppendItemValue(pName, Value);
end;

function TNotesDocument.ComputeWithForm(bDodatatypes: WordBool; bRaiseerror: WordBool): WordBool;
begin
  Result := DefaultInterface.ComputeWithForm(bDodatatypes, bRaiseerror);
end;

procedure TNotesDocument.CopyAllItems(const pIDoc: IDocument; bReplace: WordBool);
begin
  DefaultInterface.CopyAllItems(pIDoc, bReplace);
end;

function TNotesDocument.CopyItem(const pIItem: IItem2; const pNewname: WideString): IItem2;
begin
  Result := DefaultInterface.CopyItem(pIItem, pNewname);
end;

function TNotesDocument.CopyToDatabase(const pIDb: IDatabase): IDocument;
begin
  Result := DefaultInterface.CopyToDatabase(pIDb);
end;

function TNotesDocument.CreateReplyMessage(bToall: WordBool): IDocument;
begin
  Result := DefaultInterface.CreateReplyMessage(bToall);
end;

function TNotesDocument.CreateRichTextItem(const pName: WideString): IRichTextItem;
begin
  Result := DefaultInterface.CreateRichTextItem(pName);
end;

procedure TNotesDocument.Encrypt;
begin
  DefaultInterface.Encrypt;
end;

function TNotesDocument.GetAttachment(const pFilename: WideString): IEmbeddedObject;
begin
  Result := DefaultInterface.GetAttachment(pFilename);
end;

function TNotesDocument.GetFirstItem(const pName: WideString): IItem2;
begin
  Result := DefaultInterface.GetFirstItem(pName);
end;

function TNotesDocument.GetItemValue(const pName: WideString): OleVariant;
begin
  Result := DefaultInterface.GetItemValue(pName);
end;

function TNotesDocument.HasItem(const pName: WideString): WordBool;
begin
  Result := DefaultInterface.HasItem(pName);
end;

procedure TNotesDocument.MakeResponse(const pIDoc: IDocument);
begin
  DefaultInterface.MakeResponse(pIDoc);
end;

procedure TNotesDocument.PutInFolder(const pName: WideString; bCreateonfail: WordBool);
begin
  DefaultInterface.PutInFolder(pName, bCreateonfail);
end;

function TNotesDocument.Remove(bForce: WordBool): WordBool;
begin
  Result := DefaultInterface.Remove(bForce);
end;

procedure TNotesDocument.RemoveFromFolder(const pName: WideString);
begin
  DefaultInterface.RemoveFromFolder(pName);
end;

procedure TNotesDocument.RemoveItem(const pName: WideString);
begin
  DefaultInterface.RemoveItem(pName);
end;

function TNotesDocument.RenderToRTItem(const pIRTItem: IRichTextItem): WordBool;
begin
  Result := DefaultInterface.RenderToRTItem(pIRTItem);
end;

function TNotesDocument.ReplaceItemValue(const pName: WideString; Value: OleVariant): IItem2;
begin
  Result := DefaultInterface.ReplaceItemValue(pName, Value);
end;

function TNotesDocument.Save(bForce: WordBool; bMakeresponse: WordBool; bMarkread: WordBool): WordBool;
begin
  Result := DefaultInterface.Save(bForce, bMakeresponse, bMarkread);
end;

procedure TNotesDocument.Send(bAttachform: WordBool);
begin
  DefaultInterface.Send(bAttachform, EmptyParam);
end;

procedure TNotesDocument.Send(bAttachform: WordBool; var pRecipients: OleVariant);
begin
  DefaultInterface.Send(bAttachform, pRecipients);
end;

procedure TNotesDocument.Sign;
begin
  DefaultInterface.Sign;
end;

function TNotesDocument.CloseMIMEEntities(bSavechanges: WordBool; const pName: WideString): WordBool;
begin
  Result := DefaultInterface.CloseMIMEEntities(bSavechanges, pName);
end;

function TNotesDocument.CreateMIMEEntity(const pName: WideString): IMIMEEntity;
begin
  Result := DefaultInterface.CreateMIMEEntity(pName);
end;

function TNotesDocument.GetMIMEEntity(const pName: WideString): IMIMEEntity;
begin
  Result := DefaultInterface.GetMIMEEntity(pName);
end;

function TNotesDocument.GetItemValueCustomDataBytes(const pItemName: WideString; 
                                                    const pDatatypeName: WideString): OleVariant;
begin
  Result := DefaultInterface.GetItemValueCustomDataBytes(pItemName, pDatatypeName);
end;

function TNotesDocument.GetItemValueDateTimeArray(const pItemName: WideString): OleVariant;
begin
  Result := DefaultInterface.GetItemValueDateTimeArray(pItemName);
end;

function TNotesDocument.GetReceivedItemText: OleVariant;
begin
  Result := DefaultInterface.GetReceivedItemText;
end;

function TNotesDocument.ReplaceItemValueCustomDataBytes(const pItemName: WideString; 
                                                        const pDatatypeName: WideString; 
                                                        CustomData: OleVariant): IItem2;
begin
  Result := DefaultInterface.ReplaceItemValueCustomDataBytes(pItemName, pDatatypeName, CustomData);
end;

function TNotesDocument.RemovePermanently(bForce: WordBool): WordBool;
begin
  Result := DefaultInterface.RemovePermanently(bForce);
end;

function TNotesDocument.Lock(var pName: OleVariant; bProvisionalOK: WordBool): WordBool;
begin
  Result := DefaultInterface.Lock(pName, bProvisionalOK);
end;

function TNotesDocument.LockProvisional: WordBool;
begin
  Result := DefaultInterface.LockProvisional(EmptyParam);
end;

function TNotesDocument.LockProvisional(var pName: OleVariant): WordBool;
begin
  Result := DefaultInterface.LockProvisional(pName);
end;

procedure TNotesDocument.Unlock;
begin
  DefaultInterface.Unlock;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TNotesDocumentProperties.Create(AServer: TNotesDocument);
begin
  inherited Create;
  FServer := AServer;
end;

function TNotesDocumentProperties.GetDefaultInterface: IDocument;
begin
  Result := FServer.DefaultInterface;
end;

function TNotesDocumentProperties.Get_Authors: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.Authors;
end;

function TNotesDocumentProperties.Get_ColumnValues: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.ColumnValues;
end;

function TNotesDocumentProperties.Get_Created: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.Created;
end;

function TNotesDocumentProperties.Get_EmbeddedObjects: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.EmbeddedObjects;
end;

function TNotesDocumentProperties.Get_EncryptionKeys: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.EncryptionKeys;
end;

procedure TNotesDocumentProperties.Set_EncryptionKeys(pKeys: OleVariant);
begin
  DefaultInterface.Set_EncryptionKeys(pKeys);
end;

procedure TNotesDocumentProperties.Set_EncryptOnSend(pbFlag: WordBool);
begin
  DefaultInterface.Set_EncryptOnSend(pbFlag);
end;

function TNotesDocumentProperties.Get_EncryptOnSend: WordBool;
begin
    Result := DefaultInterface.EncryptOnSend;
end;

function TNotesDocumentProperties.Get_FolderReferences: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.FolderReferences;
end;

function TNotesDocumentProperties.Get_FTSearchScore: Integer;
begin
    Result := DefaultInterface.FTSearchScore;
end;

function TNotesDocumentProperties.Get_HasEmbedded: WordBool;
begin
    Result := DefaultInterface.HasEmbedded;
end;

function TNotesDocumentProperties.Get_HttpURL: WideString;
begin
    Result := DefaultInterface.HttpURL;
end;

function TNotesDocumentProperties.Get_IsDeleted: WordBool;
begin
    Result := DefaultInterface.IsDeleted;
end;

function TNotesDocumentProperties.Get_IsNewNote: WordBool;
begin
    Result := DefaultInterface.IsNewNote;
end;

function TNotesDocumentProperties.Get_IsProfile: WordBool;
begin
    Result := DefaultInterface.IsProfile;
end;

function TNotesDocumentProperties.Get_IsResponse: WordBool;
begin
    Result := DefaultInterface.IsResponse;
end;

function TNotesDocumentProperties.Get_IsSigned: WordBool;
begin
    Result := DefaultInterface.IsSigned;
end;

function TNotesDocumentProperties.Get_IsUIDocOpen: WordBool;
begin
    Result := DefaultInterface.IsUIDocOpen;
end;

function TNotesDocumentProperties.Get_IsValid: WordBool;
begin
    Result := DefaultInterface.IsValid;
end;

function TNotesDocumentProperties.Get_Items: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.Items;
end;

function TNotesDocumentProperties.Get_Key: WideString;
begin
    Result := DefaultInterface.Key;
end;

function TNotesDocumentProperties.Get_LastAccessed: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.LastAccessed;
end;

function TNotesDocumentProperties.Get_LastModified: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.LastModified;
end;

function TNotesDocumentProperties.Get_NameOfProfile: WideString;
begin
    Result := DefaultInterface.NameOfProfile;
end;

function TNotesDocumentProperties.Get_NoteID: WideString;
begin
    Result := DefaultInterface.NoteID;
end;

function TNotesDocumentProperties.Get_NotesURL: WideString;
begin
    Result := DefaultInterface.NotesURL;
end;

function TNotesDocumentProperties.Get_ParentDatabase: IDatabase;
begin
    Result := DefaultInterface.ParentDatabase;
end;

function TNotesDocumentProperties.Get_ParentDocumentUNID: WideString;
begin
    Result := DefaultInterface.ParentDocumentUNID;
end;

function TNotesDocumentProperties.Get_ParentView: IView;
begin
    Result := DefaultInterface.ParentView;
end;

function TNotesDocumentProperties.Get_Responses: IDocumentCollection;
begin
    Result := DefaultInterface.Responses;
end;

function TNotesDocumentProperties.Get_SaveMessageOnSend: WordBool;
begin
    Result := DefaultInterface.SaveMessageOnSend;
end;

procedure TNotesDocumentProperties.Set_SaveMessageOnSend(pbFlag: WordBool);
begin
  DefaultInterface.Set_SaveMessageOnSend(pbFlag);
end;

function TNotesDocumentProperties.Get_SentByAgent: WordBool;
begin
    Result := DefaultInterface.SentByAgent;
end;

function TNotesDocumentProperties.Get_Signer: WideString;
begin
    Result := DefaultInterface.Signer;
end;

function TNotesDocumentProperties.Get_SignOnSend: WordBool;
begin
    Result := DefaultInterface.SignOnSend;
end;

procedure TNotesDocumentProperties.Set_SignOnSend(pbFlag: WordBool);
begin
  DefaultInterface.Set_SignOnSend(pbFlag);
end;

function TNotesDocumentProperties.Get_Size: Integer;
begin
    Result := DefaultInterface.Size;
end;

function TNotesDocumentProperties.Get_UniversalID: WideString;
begin
    Result := DefaultInterface.UniversalID;
end;

procedure TNotesDocumentProperties.Set_UniversalID(const ppId: WideString);
  { Warning: The property UniversalID has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.UniversalID := ppId;
end;

function TNotesDocumentProperties.Get_Verifier: WideString;
begin
    Result := DefaultInterface.Verifier;
end;

function TNotesDocumentProperties.Get_LockHolders: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.LockHolders;
end;

function TNotesDocumentProperties.Get_IsEncrypted: WordBool;
begin
    Result := DefaultInterface.IsEncrypted;
end;

{$ENDIF}

class function CoNotesDocumentCollection.Create: IDocumentCollection;
begin
  Result := CreateComObject(CLASS_NotesDocumentCollection) as IDocumentCollection;
end;

class function CoNotesDocumentCollection.CreateRemote(const MachineName: string): IDocumentCollection;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NotesDocumentCollection) as IDocumentCollection;
end;

procedure TNotesDocumentCollection.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{29131529-2EED-1069-BF5D-00DD011186B7}';
    IntfIID:   '{29131568-2EED-1069-BF5D-00DD011186B7}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TNotesDocumentCollection.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as IDocumentCollection;
  end;
end;

procedure TNotesDocumentCollection.ConnectTo(svrIntf: IDocumentCollection);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TNotesDocumentCollection.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TNotesDocumentCollection.GetDefaultInterface: IDocumentCollection;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TNotesDocumentCollection.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TNotesDocumentCollectionProperties.Create(Self);
{$ENDIF}
end;

destructor TNotesDocumentCollection.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TNotesDocumentCollection.GetServerProperties: TNotesDocumentCollectionProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TNotesDocumentCollection.Get_Count: Integer;
begin
    Result := DefaultInterface.Count;
end;

function TNotesDocumentCollection.Get_IsSorted: WordBool;
begin
    Result := DefaultInterface.IsSorted;
end;

function TNotesDocumentCollection.Get_Parent: IDatabase;
begin
    Result := DefaultInterface.Parent;
end;

function TNotesDocumentCollection.Get_Query: WideString;
begin
    Result := DefaultInterface.Query;
end;

function TNotesDocumentCollection.Get_UntilTime: IDateTime;
begin
    Result := DefaultInterface.UntilTime;
end;

procedure TNotesDocumentCollection.AddDocument(const pIDoc: IDocument; bReserved: WordBool);
begin
  DefaultInterface.AddDocument(pIDoc, bReserved);
end;

procedure TNotesDocumentCollection.DeleteDocument(const pIDoc: IDocument);
begin
  DefaultInterface.DeleteDocument(pIDoc);
end;

procedure TNotesDocumentCollection.FTSearch(const pQuery: WideString; lMaxDocs: Integer);
begin
  DefaultInterface.FTSearch(pQuery, lMaxDocs);
end;

function TNotesDocumentCollection.GetDocument(const pIIndoc: IDocument): IDocument;
begin
  Result := DefaultInterface.GetDocument(pIIndoc);
end;

function TNotesDocumentCollection.GetFirstDocument: IDocument;
begin
  Result := DefaultInterface.GetFirstDocument;
end;

function TNotesDocumentCollection.GetLastDocument: IDocument;
begin
  Result := DefaultInterface.GetLastDocument;
end;

function TNotesDocumentCollection.GetNextDocument(const pICurrent: IDocument): IDocument;
begin
  Result := DefaultInterface.GetNextDocument(pICurrent);
end;

function TNotesDocumentCollection.GetPrevDocument(const pICurrent: IDocument): IDocument;
begin
  Result := DefaultInterface.GetPrevDocument(pICurrent);
end;

function TNotesDocumentCollection.GetNthDocument(lN: Integer): IDocument;
begin
  Result := DefaultInterface.GetNthDocument(lN);
end;

procedure TNotesDocumentCollection.PutAllInFolder(const pFolderName: WideString; 
                                                  bCreateonfail: WordBool);
begin
  DefaultInterface.PutAllInFolder(pFolderName, bCreateonfail);
end;

procedure TNotesDocumentCollection.RemoveAll(bForce: WordBool);
begin
  DefaultInterface.RemoveAll(bForce);
end;

procedure TNotesDocumentCollection.RemoveAllFromFolder(const pFolderName: WideString);
begin
  DefaultInterface.RemoveAllFromFolder(pFolderName);
end;

procedure TNotesDocumentCollection.StampAll(const pItemName: WideString; Value: OleVariant);
begin
  DefaultInterface.StampAll(pItemName, Value);
end;

procedure TNotesDocumentCollection.UpdateAll;
begin
  DefaultInterface.UpdateAll;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TNotesDocumentCollectionProperties.Create(AServer: TNotesDocumentCollection);
begin
  inherited Create;
  FServer := AServer;
end;

function TNotesDocumentCollectionProperties.GetDefaultInterface: IDocumentCollection;
begin
  Result := FServer.DefaultInterface;
end;

function TNotesDocumentCollectionProperties.Get_Count: Integer;
begin
    Result := DefaultInterface.Count;
end;

function TNotesDocumentCollectionProperties.Get_IsSorted: WordBool;
begin
    Result := DefaultInterface.IsSorted;
end;

function TNotesDocumentCollectionProperties.Get_Parent: IDatabase;
begin
    Result := DefaultInterface.Parent;
end;

function TNotesDocumentCollectionProperties.Get_Query: WideString;
begin
    Result := DefaultInterface.Query;
end;

function TNotesDocumentCollectionProperties.Get_UntilTime: IDateTime;
begin
    Result := DefaultInterface.UntilTime;
end;

{$ENDIF}

class function CoNotesEmbeddedObject.Create: IEmbeddedObject;
begin
  Result := CreateComObject(CLASS_NotesEmbeddedObject) as IEmbeddedObject;
end;

class function CoNotesEmbeddedObject.CreateRemote(const MachineName: string): IEmbeddedObject;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NotesEmbeddedObject) as IEmbeddedObject;
end;

procedure TNotesEmbeddedObject.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{2913152A-2EED-1069-BF5D-00DD011186B7}';
    IntfIID:   '{29131569-2EED-1069-BF5D-00DD011186B7}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TNotesEmbeddedObject.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as IEmbeddedObject;
  end;
end;

procedure TNotesEmbeddedObject.ConnectTo(svrIntf: IEmbeddedObject);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TNotesEmbeddedObject.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TNotesEmbeddedObject.GetDefaultInterface: IEmbeddedObject;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TNotesEmbeddedObject.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TNotesEmbeddedObjectProperties.Create(Self);
{$ENDIF}
end;

destructor TNotesEmbeddedObject.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TNotesEmbeddedObject.GetServerProperties: TNotesEmbeddedObjectProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TNotesEmbeddedObject.Get_Class_: WideString;
begin
    Result := DefaultInterface.Class_;
end;

function TNotesEmbeddedObject.Get_FileSize: Integer;
begin
    Result := DefaultInterface.FileSize;
end;

function TNotesEmbeddedObject.Get_FitBelowFields: WordBool;
begin
    Result := DefaultInterface.FitBelowFields;
end;

procedure TNotesEmbeddedObject.Set_FitBelowFields(pbFlag: WordBool);
begin
  DefaultInterface.Set_FitBelowFields(pbFlag);
end;

function TNotesEmbeddedObject.Get_FitToWindow: WordBool;
begin
    Result := DefaultInterface.FitToWindow;
end;

procedure TNotesEmbeddedObject.Set_FitToWindow(pbFlag: WordBool);
begin
  DefaultInterface.Set_FitToWindow(pbFlag);
end;

function TNotesEmbeddedObject.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

function TNotesEmbeddedObject.Get_Object_: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.Object_;
end;

function TNotesEmbeddedObject.Get_Parent: IRichTextItem;
begin
    Result := DefaultInterface.Parent;
end;

function TNotesEmbeddedObject.Get_RunReadOnly: WordBool;
begin
    Result := DefaultInterface.RunReadOnly;
end;

procedure TNotesEmbeddedObject.Set_RunReadOnly(pbFlag: WordBool);
begin
  DefaultInterface.Set_RunReadOnly(pbFlag);
end;

function TNotesEmbeddedObject.Get_Source: WideString;
begin
    Result := DefaultInterface.Source;
end;

function TNotesEmbeddedObject.Get_type_: EMBED_TYPE;
begin
    Result := DefaultInterface.type_;
end;

function TNotesEmbeddedObject.Get_Verbs: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.Verbs;
end;

function TNotesEmbeddedObject.Activate(bShow: WordBool): IDispatch;
begin
  Result := DefaultInterface.Activate(bShow);
end;

procedure TNotesEmbeddedObject.DoVerb(const pVerb: WideString);
begin
  DefaultInterface.DoVerb(pVerb);
end;

procedure TNotesEmbeddedObject.ExtractFile(const pPath: WideString);
begin
  DefaultInterface.ExtractFile(pPath);
end;

procedure TNotesEmbeddedObject.Remove;
begin
  DefaultInterface.Remove;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TNotesEmbeddedObjectProperties.Create(AServer: TNotesEmbeddedObject);
begin
  inherited Create;
  FServer := AServer;
end;

function TNotesEmbeddedObjectProperties.GetDefaultInterface: IEmbeddedObject;
begin
  Result := FServer.DefaultInterface;
end;

function TNotesEmbeddedObjectProperties.Get_Class_: WideString;
begin
    Result := DefaultInterface.Class_;
end;

function TNotesEmbeddedObjectProperties.Get_FileSize: Integer;
begin
    Result := DefaultInterface.FileSize;
end;

function TNotesEmbeddedObjectProperties.Get_FitBelowFields: WordBool;
begin
    Result := DefaultInterface.FitBelowFields;
end;

procedure TNotesEmbeddedObjectProperties.Set_FitBelowFields(pbFlag: WordBool);
begin
  DefaultInterface.Set_FitBelowFields(pbFlag);
end;

function TNotesEmbeddedObjectProperties.Get_FitToWindow: WordBool;
begin
    Result := DefaultInterface.FitToWindow;
end;

procedure TNotesEmbeddedObjectProperties.Set_FitToWindow(pbFlag: WordBool);
begin
  DefaultInterface.Set_FitToWindow(pbFlag);
end;

function TNotesEmbeddedObjectProperties.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

function TNotesEmbeddedObjectProperties.Get_Object_: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.Object_;
end;

function TNotesEmbeddedObjectProperties.Get_Parent: IRichTextItem;
begin
    Result := DefaultInterface.Parent;
end;

function TNotesEmbeddedObjectProperties.Get_RunReadOnly: WordBool;
begin
    Result := DefaultInterface.RunReadOnly;
end;

procedure TNotesEmbeddedObjectProperties.Set_RunReadOnly(pbFlag: WordBool);
begin
  DefaultInterface.Set_RunReadOnly(pbFlag);
end;

function TNotesEmbeddedObjectProperties.Get_Source: WideString;
begin
    Result := DefaultInterface.Source;
end;

function TNotesEmbeddedObjectProperties.Get_type_: EMBED_TYPE;
begin
    Result := DefaultInterface.type_;
end;

function TNotesEmbeddedObjectProperties.Get_Verbs: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.Verbs;
end;

{$ENDIF}

class function CoNotesForm.Create: IForm;
begin
  Result := CreateComObject(CLASS_NotesForm) as IForm;
end;

class function CoNotesForm.CreateRemote(const MachineName: string): IForm;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NotesForm) as IForm;
end;

procedure TNotesForm.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{2913152B-2EED-1069-BF5D-00DD011186B7}';
    IntfIID:   '{2913156A-2EED-1069-BF5D-00DD011186B7}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TNotesForm.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as IForm;
  end;
end;

procedure TNotesForm.ConnectTo(svrIntf: IForm);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TNotesForm.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TNotesForm.GetDefaultInterface: IForm;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TNotesForm.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TNotesFormProperties.Create(Self);
{$ENDIF}
end;

destructor TNotesForm.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TNotesForm.GetServerProperties: TNotesFormProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TNotesForm.Get_Aliases: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.Aliases;
end;

function TNotesForm.Get_Fields: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.Fields;
end;

function TNotesForm.Get_FormUsers: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.FormUsers;
end;

procedure TNotesForm.Set_FormUsers(pUsers: OleVariant);
begin
  DefaultInterface.Set_FormUsers(pUsers);
end;

function TNotesForm.Get_HttpURL: WideString;
begin
    Result := DefaultInterface.HttpURL;
end;

function TNotesForm.Get_IsSubForm: WordBool;
begin
    Result := DefaultInterface.IsSubForm;
end;

function TNotesForm.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

function TNotesForm.Get_NotesURL: WideString;
begin
    Result := DefaultInterface.NotesURL;
end;

function TNotesForm.Get_Parent: IDatabase;
begin
    Result := DefaultInterface.Parent;
end;

function TNotesForm.Get_ProtectReaders: WordBool;
begin
    Result := DefaultInterface.ProtectReaders;
end;

procedure TNotesForm.Set_ProtectReaders(pbFlag: WordBool);
begin
  DefaultInterface.Set_ProtectReaders(pbFlag);
end;

function TNotesForm.Get_ProtectUsers: WordBool;
begin
    Result := DefaultInterface.ProtectUsers;
end;

procedure TNotesForm.Set_ProtectUsers(pbFlag: WordBool);
begin
  DefaultInterface.Set_ProtectUsers(pbFlag);
end;

function TNotesForm.Get_Readers: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.Readers;
end;

procedure TNotesForm.Set_Readers(pReaders: OleVariant);
begin
  DefaultInterface.Set_Readers(pReaders);
end;

function TNotesForm.Get_LockHolders: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.LockHolders;
end;

function TNotesForm.GetFieldType(const pName: WideString): FIELD_TYPE;
begin
  Result := DefaultInterface.GetFieldType(pName);
end;

procedure TNotesForm.Remove;
begin
  DefaultInterface.Remove;
end;

function TNotesForm.Lock(var pName: OleVariant; bProvisionalOK: WordBool): WordBool;
begin
  Result := DefaultInterface.Lock(pName, bProvisionalOK);
end;

function TNotesForm.LockProvisional: WordBool;
begin
  Result := DefaultInterface.LockProvisional(EmptyParam);
end;

function TNotesForm.LockProvisional(var pName: OleVariant): WordBool;
begin
  Result := DefaultInterface.LockProvisional(pName);
end;

procedure TNotesForm.Unlock;
begin
  DefaultInterface.Unlock;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TNotesFormProperties.Create(AServer: TNotesForm);
begin
  inherited Create;
  FServer := AServer;
end;

function TNotesFormProperties.GetDefaultInterface: IForm;
begin
  Result := FServer.DefaultInterface;
end;

function TNotesFormProperties.Get_Aliases: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.Aliases;
end;

function TNotesFormProperties.Get_Fields: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.Fields;
end;

function TNotesFormProperties.Get_FormUsers: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.FormUsers;
end;

procedure TNotesFormProperties.Set_FormUsers(pUsers: OleVariant);
begin
  DefaultInterface.Set_FormUsers(pUsers);
end;

function TNotesFormProperties.Get_HttpURL: WideString;
begin
    Result := DefaultInterface.HttpURL;
end;

function TNotesFormProperties.Get_IsSubForm: WordBool;
begin
    Result := DefaultInterface.IsSubForm;
end;

function TNotesFormProperties.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

function TNotesFormProperties.Get_NotesURL: WideString;
begin
    Result := DefaultInterface.NotesURL;
end;

function TNotesFormProperties.Get_Parent: IDatabase;
begin
    Result := DefaultInterface.Parent;
end;

function TNotesFormProperties.Get_ProtectReaders: WordBool;
begin
    Result := DefaultInterface.ProtectReaders;
end;

procedure TNotesFormProperties.Set_ProtectReaders(pbFlag: WordBool);
begin
  DefaultInterface.Set_ProtectReaders(pbFlag);
end;

function TNotesFormProperties.Get_ProtectUsers: WordBool;
begin
    Result := DefaultInterface.ProtectUsers;
end;

procedure TNotesFormProperties.Set_ProtectUsers(pbFlag: WordBool);
begin
  DefaultInterface.Set_ProtectUsers(pbFlag);
end;

function TNotesFormProperties.Get_Readers: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.Readers;
end;

procedure TNotesFormProperties.Set_Readers(pReaders: OleVariant);
begin
  DefaultInterface.Set_Readers(pReaders);
end;

function TNotesFormProperties.Get_LockHolders: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.LockHolders;
end;

{$ENDIF}

class function CoNotesItem.Create: IItem2;
begin
  Result := CreateComObject(CLASS_NotesItem) as IItem2;
end;

class function CoNotesItem.CreateRemote(const MachineName: string): IItem2;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NotesItem) as IItem2;
end;

procedure TNotesItem.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{2913152C-2EED-1069-BF5D-00DD011186B7}';
    IntfIID:   '{2913158A-2EED-1069-BF5D-00DD011186B7}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TNotesItem.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as IItem2;
  end;
end;

procedure TNotesItem.ConnectTo(svrIntf: IItem2);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TNotesItem.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TNotesItem.GetDefaultInterface: IItem2;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TNotesItem.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TNotesItemProperties.Create(Self);
{$ENDIF}
end;

destructor TNotesItem.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TNotesItem.GetServerProperties: TNotesItemProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TNotesItem.Get_DateTimeValue: IDateTime;
begin
    Result := DefaultInterface.DateTimeValue;
end;

procedure TNotesItem.Set_DateTimeValue(const ppITime: IDateTime);
begin
  DefaultInterface.Set_DateTimeValue(ppITime);
end;

function TNotesItem.Get_IsAuthors: WordBool;
begin
    Result := DefaultInterface.IsAuthors;
end;

procedure TNotesItem.Set_IsAuthors(pbFlag: WordBool);
begin
  DefaultInterface.Set_IsAuthors(pbFlag);
end;

function TNotesItem.Get_IsEncrypted: WordBool;
begin
    Result := DefaultInterface.IsEncrypted;
end;

procedure TNotesItem.Set_IsEncrypted(pbFlag: WordBool);
begin
  DefaultInterface.Set_IsEncrypted(pbFlag);
end;

function TNotesItem.Get_IsNames: WordBool;
begin
    Result := DefaultInterface.IsNames;
end;

procedure TNotesItem.Set_IsNames(pbFlag: WordBool);
begin
  DefaultInterface.Set_IsNames(pbFlag);
end;

function TNotesItem.Get_IsProtected: WordBool;
begin
    Result := DefaultInterface.IsProtected;
end;

procedure TNotesItem.Set_IsProtected(pbFlag: WordBool);
begin
  DefaultInterface.Set_IsProtected(pbFlag);
end;

function TNotesItem.Get_IsReaders: WordBool;
begin
    Result := DefaultInterface.IsReaders;
end;

procedure TNotesItem.Set_IsReaders(pbFlag: WordBool);
begin
  DefaultInterface.Set_IsReaders(pbFlag);
end;

function TNotesItem.Get_IsSigned: WordBool;
begin
    Result := DefaultInterface.IsSigned;
end;

procedure TNotesItem.Set_IsSigned(pbFlag: WordBool);
begin
  DefaultInterface.Set_IsSigned(pbFlag);
end;

function TNotesItem.Get_IsSummary: WordBool;
begin
    Result := DefaultInterface.IsSummary;
end;

procedure TNotesItem.Set_IsSummary(pbFlag: WordBool);
begin
  DefaultInterface.Set_IsSummary(pbFlag);
end;

function TNotesItem.Get_LastModified: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.LastModified;
end;

function TNotesItem.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

function TNotesItem.Get_Parent: IDocument;
begin
    Result := DefaultInterface.Parent;
end;

function TNotesItem.Get_SaveToDisk: WordBool;
begin
    Result := DefaultInterface.SaveToDisk;
end;

procedure TNotesItem.Set_SaveToDisk(pbFlag: WordBool);
begin
  DefaultInterface.Set_SaveToDisk(pbFlag);
end;

function TNotesItem.Get_Text: WideString;
begin
    Result := DefaultInterface.Text;
end;

function TNotesItem.Get_type_: IT_TYPE;
begin
    Result := DefaultInterface.type_;
end;

function TNotesItem.Get_ValueLength: Integer;
begin
    Result := DefaultInterface.ValueLength;
end;

function TNotesItem.Get_Values: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.Values;
end;

procedure TNotesItem.Set_Values(pValue: OleVariant);
begin
  DefaultInterface.Set_Values(pValue);
end;

function TNotesItem.Abstract(lMaxlen: Integer; bDropvowels: WordBool; bUsedict: WordBool): WideString;
begin
  Result := DefaultInterface.Abstract(lMaxlen, bDropvowels, bUsedict);
end;

procedure TNotesItem.AppendToTextList(Values: OleVariant);
begin
  DefaultInterface.AppendToTextList(Values);
end;

function TNotesItem.Contains(Value: OleVariant): WordBool;
begin
  Result := DefaultInterface.Contains(Value);
end;

function TNotesItem.CopyItemToDocument(const pIDoc: IDocument; const pNewname: WideString): IItem2;
begin
  Result := DefaultInterface.CopyItemToDocument(pIDoc, pNewname);
end;

function TNotesItem.GetMIMEEntity: IMIMEEntity;
begin
  Result := DefaultInterface.GetMIMEEntity;
end;

procedure TNotesItem.Remove;
begin
  DefaultInterface.Remove;
end;

function TNotesItem.GetValueCustomDataBytes(const pDatatypeName: WideString): OleVariant;
begin
  Result := DefaultInterface.GetValueCustomDataBytes(pDatatypeName);
end;

function TNotesItem.GetValueDateTimeArray: OleVariant;
begin
  Result := DefaultInterface.GetValueDateTimeArray;
end;

procedure TNotesItem.SetValueCustomDataBytes(const pDatatypeName: WideString; CustomData: OleVariant);
begin
  DefaultInterface.SetValueCustomDataBytes(pDatatypeName, CustomData);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TNotesItemProperties.Create(AServer: TNotesItem);
begin
  inherited Create;
  FServer := AServer;
end;

function TNotesItemProperties.GetDefaultInterface: IItem2;
begin
  Result := FServer.DefaultInterface;
end;

function TNotesItemProperties.Get_DateTimeValue: IDateTime;
begin
    Result := DefaultInterface.DateTimeValue;
end;

procedure TNotesItemProperties.Set_DateTimeValue(const ppITime: IDateTime);
begin
  DefaultInterface.Set_DateTimeValue(ppITime);
end;

function TNotesItemProperties.Get_IsAuthors: WordBool;
begin
    Result := DefaultInterface.IsAuthors;
end;

procedure TNotesItemProperties.Set_IsAuthors(pbFlag: WordBool);
begin
  DefaultInterface.Set_IsAuthors(pbFlag);
end;

function TNotesItemProperties.Get_IsEncrypted: WordBool;
begin
    Result := DefaultInterface.IsEncrypted;
end;

procedure TNotesItemProperties.Set_IsEncrypted(pbFlag: WordBool);
begin
  DefaultInterface.Set_IsEncrypted(pbFlag);
end;

function TNotesItemProperties.Get_IsNames: WordBool;
begin
    Result := DefaultInterface.IsNames;
end;

procedure TNotesItemProperties.Set_IsNames(pbFlag: WordBool);
begin
  DefaultInterface.Set_IsNames(pbFlag);
end;

function TNotesItemProperties.Get_IsProtected: WordBool;
begin
    Result := DefaultInterface.IsProtected;
end;

procedure TNotesItemProperties.Set_IsProtected(pbFlag: WordBool);
begin
  DefaultInterface.Set_IsProtected(pbFlag);
end;

function TNotesItemProperties.Get_IsReaders: WordBool;
begin
    Result := DefaultInterface.IsReaders;
end;

procedure TNotesItemProperties.Set_IsReaders(pbFlag: WordBool);
begin
  DefaultInterface.Set_IsReaders(pbFlag);
end;

function TNotesItemProperties.Get_IsSigned: WordBool;
begin
    Result := DefaultInterface.IsSigned;
end;

procedure TNotesItemProperties.Set_IsSigned(pbFlag: WordBool);
begin
  DefaultInterface.Set_IsSigned(pbFlag);
end;

function TNotesItemProperties.Get_IsSummary: WordBool;
begin
    Result := DefaultInterface.IsSummary;
end;

procedure TNotesItemProperties.Set_IsSummary(pbFlag: WordBool);
begin
  DefaultInterface.Set_IsSummary(pbFlag);
end;

function TNotesItemProperties.Get_LastModified: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.LastModified;
end;

function TNotesItemProperties.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

function TNotesItemProperties.Get_Parent: IDocument;
begin
    Result := DefaultInterface.Parent;
end;

function TNotesItemProperties.Get_SaveToDisk: WordBool;
begin
    Result := DefaultInterface.SaveToDisk;
end;

procedure TNotesItemProperties.Set_SaveToDisk(pbFlag: WordBool);
begin
  DefaultInterface.Set_SaveToDisk(pbFlag);
end;

function TNotesItemProperties.Get_Text: WideString;
begin
    Result := DefaultInterface.Text;
end;

function TNotesItemProperties.Get_type_: IT_TYPE;
begin
    Result := DefaultInterface.type_;
end;

function TNotesItemProperties.Get_ValueLength: Integer;
begin
    Result := DefaultInterface.ValueLength;
end;

function TNotesItemProperties.Get_Values: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.Values;
end;

procedure TNotesItemProperties.Set_Values(pValue: OleVariant);
begin
  DefaultInterface.Set_Values(pValue);
end;

{$ENDIF}

class function CoNotesInternational.Create: IInternational;
begin
  Result := CreateComObject(CLASS_NotesInternational) as IInternational;
end;

class function CoNotesInternational.CreateRemote(const MachineName: string): IInternational;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NotesInternational) as IInternational;
end;

procedure TNotesInternational.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{2913152D-2EED-1069-BF5D-00DD011186B7}';
    IntfIID:   '{2913156C-2EED-1069-BF5D-00DD011186B7}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TNotesInternational.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as IInternational;
  end;
end;

procedure TNotesInternational.ConnectTo(svrIntf: IInternational);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TNotesInternational.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TNotesInternational.GetDefaultInterface: IInternational;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TNotesInternational.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TNotesInternationalProperties.Create(Self);
{$ENDIF}
end;

destructor TNotesInternational.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TNotesInternational.GetServerProperties: TNotesInternationalProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TNotesInternational.Get_AMString: WideString;
begin
    Result := DefaultInterface.AMString;
end;

function TNotesInternational.Get_CurrencyDigits: Integer;
begin
    Result := DefaultInterface.CurrencyDigits;
end;

function TNotesInternational.Get_CurrencySymbol: WideString;
begin
    Result := DefaultInterface.CurrencySymbol;
end;

function TNotesInternational.Get_DateSep: WideString;
begin
    Result := DefaultInterface.DateSep;
end;

function TNotesInternational.Get_DecimalSep: WideString;
begin
    Result := DefaultInterface.DecimalSep;
end;

function TNotesInternational.Get_IsCurrencySpace: WordBool;
begin
    Result := DefaultInterface.IsCurrencySpace;
end;

function TNotesInternational.Get_IsCurrencySuffix: WordBool;
begin
    Result := DefaultInterface.IsCurrencySuffix;
end;

function TNotesInternational.Get_IsCurrencyZero: WordBool;
begin
    Result := DefaultInterface.IsCurrencyZero;
end;

function TNotesInternational.Get_IsDateDMY: WordBool;
begin
    Result := DefaultInterface.IsDateDMY;
end;

function TNotesInternational.Get_IsDateMDY: WordBool;
begin
    Result := DefaultInterface.IsDateMDY;
end;

function TNotesInternational.Get_IsDateYMD: WordBool;
begin
    Result := DefaultInterface.IsDateYMD;
end;

function TNotesInternational.Get_IsDST: WordBool;
begin
    Result := DefaultInterface.IsDST;
end;

function TNotesInternational.Get_IsTime24Hour: WordBool;
begin
    Result := DefaultInterface.IsTime24Hour;
end;

function TNotesInternational.Get_Parent: ISession;
begin
    Result := DefaultInterface.Parent;
end;

function TNotesInternational.Get_PMString: WideString;
begin
    Result := DefaultInterface.PMString;
end;

function TNotesInternational.Get_ThousandsSep: WideString;
begin
    Result := DefaultInterface.ThousandsSep;
end;

function TNotesInternational.Get_TimeSep: WideString;
begin
    Result := DefaultInterface.TimeSep;
end;

function TNotesInternational.Get_TimeZone: Integer;
begin
    Result := DefaultInterface.TimeZone;
end;

function TNotesInternational.Get_Today: WideString;
begin
    Result := DefaultInterface.Today;
end;

function TNotesInternational.Get_Tomorrow: WideString;
begin
    Result := DefaultInterface.Tomorrow;
end;

function TNotesInternational.Get_Yesterday: WideString;
begin
    Result := DefaultInterface.Yesterday;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TNotesInternationalProperties.Create(AServer: TNotesInternational);
begin
  inherited Create;
  FServer := AServer;
end;

function TNotesInternationalProperties.GetDefaultInterface: IInternational;
begin
  Result := FServer.DefaultInterface;
end;

function TNotesInternationalProperties.Get_AMString: WideString;
begin
    Result := DefaultInterface.AMString;
end;

function TNotesInternationalProperties.Get_CurrencyDigits: Integer;
begin
    Result := DefaultInterface.CurrencyDigits;
end;

function TNotesInternationalProperties.Get_CurrencySymbol: WideString;
begin
    Result := DefaultInterface.CurrencySymbol;
end;

function TNotesInternationalProperties.Get_DateSep: WideString;
begin
    Result := DefaultInterface.DateSep;
end;

function TNotesInternationalProperties.Get_DecimalSep: WideString;
begin
    Result := DefaultInterface.DecimalSep;
end;

function TNotesInternationalProperties.Get_IsCurrencySpace: WordBool;
begin
    Result := DefaultInterface.IsCurrencySpace;
end;

function TNotesInternationalProperties.Get_IsCurrencySuffix: WordBool;
begin
    Result := DefaultInterface.IsCurrencySuffix;
end;

function TNotesInternationalProperties.Get_IsCurrencyZero: WordBool;
begin
    Result := DefaultInterface.IsCurrencyZero;
end;

function TNotesInternationalProperties.Get_IsDateDMY: WordBool;
begin
    Result := DefaultInterface.IsDateDMY;
end;

function TNotesInternationalProperties.Get_IsDateMDY: WordBool;
begin
    Result := DefaultInterface.IsDateMDY;
end;

function TNotesInternationalProperties.Get_IsDateYMD: WordBool;
begin
    Result := DefaultInterface.IsDateYMD;
end;

function TNotesInternationalProperties.Get_IsDST: WordBool;
begin
    Result := DefaultInterface.IsDST;
end;

function TNotesInternationalProperties.Get_IsTime24Hour: WordBool;
begin
    Result := DefaultInterface.IsTime24Hour;
end;

function TNotesInternationalProperties.Get_Parent: ISession;
begin
    Result := DefaultInterface.Parent;
end;

function TNotesInternationalProperties.Get_PMString: WideString;
begin
    Result := DefaultInterface.PMString;
end;

function TNotesInternationalProperties.Get_ThousandsSep: WideString;
begin
    Result := DefaultInterface.ThousandsSep;
end;

function TNotesInternationalProperties.Get_TimeSep: WideString;
begin
    Result := DefaultInterface.TimeSep;
end;

function TNotesInternationalProperties.Get_TimeZone: Integer;
begin
    Result := DefaultInterface.TimeZone;
end;

function TNotesInternationalProperties.Get_Today: WideString;
begin
    Result := DefaultInterface.Today;
end;

function TNotesInternationalProperties.Get_Tomorrow: WideString;
begin
    Result := DefaultInterface.Tomorrow;
end;

function TNotesInternationalProperties.Get_Yesterday: WideString;
begin
    Result := DefaultInterface.Yesterday;
end;

{$ENDIF}

class function CoNotesLog.Create: ILog;
begin
  Result := CreateComObject(CLASS_NotesLog) as ILog;
end;

class function CoNotesLog.CreateRemote(const MachineName: string): ILog;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NotesLog) as ILog;
end;

procedure TNotesLog.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{2913152E-2EED-1069-BF5D-00DD011186B7}';
    IntfIID:   '{2913156D-2EED-1069-BF5D-00DD011186B7}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TNotesLog.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ILog;
  end;
end;

procedure TNotesLog.ConnectTo(svrIntf: ILog);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TNotesLog.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TNotesLog.GetDefaultInterface: ILog;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TNotesLog.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TNotesLogProperties.Create(Self);
{$ENDIF}
end;

destructor TNotesLog.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TNotesLog.GetServerProperties: TNotesLogProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TNotesLog.Get_LogActions: WordBool;
begin
    Result := DefaultInterface.LogActions;
end;

procedure TNotesLog.Set_LogActions(pbFlag: WordBool);
begin
  DefaultInterface.Set_LogActions(pbFlag);
end;

function TNotesLog.Get_LogErrors: WordBool;
begin
    Result := DefaultInterface.LogErrors;
end;

procedure TNotesLog.Set_LogErrors(pbFlag: WordBool);
begin
  DefaultInterface.Set_LogErrors(pbFlag);
end;

function TNotesLog.Get_NumActions: Integer;
begin
    Result := DefaultInterface.NumActions;
end;

function TNotesLog.Get_NumErrors: Integer;
begin
    Result := DefaultInterface.NumErrors;
end;

function TNotesLog.Get_OverwriteFile: WordBool;
begin
    Result := DefaultInterface.OverwriteFile;
end;

procedure TNotesLog.Set_OverwriteFile(pbFlag: WordBool);
begin
  DefaultInterface.Set_OverwriteFile(pbFlag);
end;

function TNotesLog.Get_ProgramName: WideString;
begin
    Result := DefaultInterface.ProgramName;
end;

procedure TNotesLog.Set_ProgramName(const ppName: WideString);
  { Warning: The property ProgramName has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ProgramName := ppName;
end;

function TNotesLog.Get_Parent: ISession;
begin
    Result := DefaultInterface.Parent;
end;

procedure TNotesLog.Close;
begin
  DefaultInterface.Close;
end;

procedure TNotesLog.LogAction(const pAction: WideString);
begin
  DefaultInterface.LogAction(pAction);
end;

procedure TNotesLog.LogError(lCode: Integer; const pText: WideString);
begin
  DefaultInterface.LogError(lCode, pText);
end;

procedure TNotesLog.LogEvent(const pText: WideString; const pQueue: WideString; lEvent: LOG_EVENTS; 
                             lSeverity: LOG_SEVERITY);
begin
  DefaultInterface.LogEvent(pText, pQueue, lEvent, lSeverity);
end;

procedure TNotesLog.OpenAgentLog;
begin
  DefaultInterface.OpenAgentLog;
end;

procedure TNotesLog.OpenFileLog(const pFilepath: WideString);
begin
  DefaultInterface.OpenFileLog(pFilepath);
end;

procedure TNotesLog.OpenMailLog(Recipients: OleVariant; const pSubject: WideString);
begin
  DefaultInterface.OpenMailLog(Recipients, pSubject);
end;

procedure TNotesLog.OpenNotesLog(const pServer: WideString; const pDatabase: WideString);
begin
  DefaultInterface.OpenNotesLog(pServer, pDatabase);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TNotesLogProperties.Create(AServer: TNotesLog);
begin
  inherited Create;
  FServer := AServer;
end;

function TNotesLogProperties.GetDefaultInterface: ILog;
begin
  Result := FServer.DefaultInterface;
end;

function TNotesLogProperties.Get_LogActions: WordBool;
begin
    Result := DefaultInterface.LogActions;
end;

procedure TNotesLogProperties.Set_LogActions(pbFlag: WordBool);
begin
  DefaultInterface.Set_LogActions(pbFlag);
end;

function TNotesLogProperties.Get_LogErrors: WordBool;
begin
    Result := DefaultInterface.LogErrors;
end;

procedure TNotesLogProperties.Set_LogErrors(pbFlag: WordBool);
begin
  DefaultInterface.Set_LogErrors(pbFlag);
end;

function TNotesLogProperties.Get_NumActions: Integer;
begin
    Result := DefaultInterface.NumActions;
end;

function TNotesLogProperties.Get_NumErrors: Integer;
begin
    Result := DefaultInterface.NumErrors;
end;

function TNotesLogProperties.Get_OverwriteFile: WordBool;
begin
    Result := DefaultInterface.OverwriteFile;
end;

procedure TNotesLogProperties.Set_OverwriteFile(pbFlag: WordBool);
begin
  DefaultInterface.Set_OverwriteFile(pbFlag);
end;

function TNotesLogProperties.Get_ProgramName: WideString;
begin
    Result := DefaultInterface.ProgramName;
end;

procedure TNotesLogProperties.Set_ProgramName(const ppName: WideString);
  { Warning: The property ProgramName has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ProgramName := ppName;
end;

function TNotesLogProperties.Get_Parent: ISession;
begin
    Result := DefaultInterface.Parent;
end;

{$ENDIF}

class function CoNotesName.Create: IName;
begin
  Result := CreateComObject(CLASS_NotesName) as IName;
end;

class function CoNotesName.CreateRemote(const MachineName: string): IName;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NotesName) as IName;
end;

procedure TNotesName.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{2913152F-2EED-1069-BF5D-00DD011186B7}';
    IntfIID:   '{2913156E-2EED-1069-BF5D-00DD011186B7}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TNotesName.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as IName;
  end;
end;

procedure TNotesName.ConnectTo(svrIntf: IName);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TNotesName.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TNotesName.GetDefaultInterface: IName;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TNotesName.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TNotesNameProperties.Create(Self);
{$ENDIF}
end;

destructor TNotesName.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TNotesName.GetServerProperties: TNotesNameProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TNotesName.Get_Abbreviated: WideString;
begin
    Result := DefaultInterface.Abbreviated;
end;

function TNotesName.Get_Addr821: WideString;
begin
    Result := DefaultInterface.Addr821;
end;

function TNotesName.Get_Addr822Comment1: WideString;
begin
    Result := DefaultInterface.Addr822Comment1;
end;

function TNotesName.Get_Addr822Comment2: WideString;
begin
    Result := DefaultInterface.Addr822Comment2;
end;

function TNotesName.Get_Addr822Comment3: WideString;
begin
    Result := DefaultInterface.Addr822Comment3;
end;

function TNotesName.Get_Addr822LocalPart: WideString;
begin
    Result := DefaultInterface.Addr822LocalPart;
end;

function TNotesName.Get_Addr822Phrase: WideString;
begin
    Result := DefaultInterface.Addr822Phrase;
end;

function TNotesName.Get_ADMD: WideString;
begin
    Result := DefaultInterface.ADMD;
end;

function TNotesName.Get_Canonical: WideString;
begin
    Result := DefaultInterface.Canonical;
end;

function TNotesName.Get_Common: WideString;
begin
    Result := DefaultInterface.Common;
end;

function TNotesName.Get_Country: WideString;
begin
    Result := DefaultInterface.Country;
end;

function TNotesName.Get_Generation: WideString;
begin
    Result := DefaultInterface.Generation;
end;

function TNotesName.Get_Given: WideString;
begin
    Result := DefaultInterface.Given;
end;

function TNotesName.Get_Initials: WideString;
begin
    Result := DefaultInterface.Initials;
end;

function TNotesName.Get_IsHierarchical: WordBool;
begin
    Result := DefaultInterface.IsHierarchical;
end;

function TNotesName.Get_Keyword: WideString;
begin
    Result := DefaultInterface.Keyword;
end;

function TNotesName.Get_Language: WideString;
begin
    Result := DefaultInterface.Language;
end;

function TNotesName.Get_Organization: WideString;
begin
    Result := DefaultInterface.Organization;
end;

function TNotesName.Get_OrgUnit1: WideString;
begin
    Result := DefaultInterface.OrgUnit1;
end;

function TNotesName.Get_OrgUnit2: WideString;
begin
    Result := DefaultInterface.OrgUnit2;
end;

function TNotesName.Get_OrgUnit3: WideString;
begin
    Result := DefaultInterface.OrgUnit3;
end;

function TNotesName.Get_OrgUnit4: WideString;
begin
    Result := DefaultInterface.OrgUnit4;
end;

function TNotesName.Get_Parent: ISession;
begin
    Result := DefaultInterface.Parent;
end;

function TNotesName.Get_PRMD: WideString;
begin
    Result := DefaultInterface.PRMD;
end;

function TNotesName.Get_Surname: WideString;
begin
    Result := DefaultInterface.Surname;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TNotesNameProperties.Create(AServer: TNotesName);
begin
  inherited Create;
  FServer := AServer;
end;

function TNotesNameProperties.GetDefaultInterface: IName;
begin
  Result := FServer.DefaultInterface;
end;

function TNotesNameProperties.Get_Abbreviated: WideString;
begin
    Result := DefaultInterface.Abbreviated;
end;

function TNotesNameProperties.Get_Addr821: WideString;
begin
    Result := DefaultInterface.Addr821;
end;

function TNotesNameProperties.Get_Addr822Comment1: WideString;
begin
    Result := DefaultInterface.Addr822Comment1;
end;

function TNotesNameProperties.Get_Addr822Comment2: WideString;
begin
    Result := DefaultInterface.Addr822Comment2;
end;

function TNotesNameProperties.Get_Addr822Comment3: WideString;
begin
    Result := DefaultInterface.Addr822Comment3;
end;

function TNotesNameProperties.Get_Addr822LocalPart: WideString;
begin
    Result := DefaultInterface.Addr822LocalPart;
end;

function TNotesNameProperties.Get_Addr822Phrase: WideString;
begin
    Result := DefaultInterface.Addr822Phrase;
end;

function TNotesNameProperties.Get_ADMD: WideString;
begin
    Result := DefaultInterface.ADMD;
end;

function TNotesNameProperties.Get_Canonical: WideString;
begin
    Result := DefaultInterface.Canonical;
end;

function TNotesNameProperties.Get_Common: WideString;
begin
    Result := DefaultInterface.Common;
end;

function TNotesNameProperties.Get_Country: WideString;
begin
    Result := DefaultInterface.Country;
end;

function TNotesNameProperties.Get_Generation: WideString;
begin
    Result := DefaultInterface.Generation;
end;

function TNotesNameProperties.Get_Given: WideString;
begin
    Result := DefaultInterface.Given;
end;

function TNotesNameProperties.Get_Initials: WideString;
begin
    Result := DefaultInterface.Initials;
end;

function TNotesNameProperties.Get_IsHierarchical: WordBool;
begin
    Result := DefaultInterface.IsHierarchical;
end;

function TNotesNameProperties.Get_Keyword: WideString;
begin
    Result := DefaultInterface.Keyword;
end;

function TNotesNameProperties.Get_Language: WideString;
begin
    Result := DefaultInterface.Language;
end;

function TNotesNameProperties.Get_Organization: WideString;
begin
    Result := DefaultInterface.Organization;
end;

function TNotesNameProperties.Get_OrgUnit1: WideString;
begin
    Result := DefaultInterface.OrgUnit1;
end;

function TNotesNameProperties.Get_OrgUnit2: WideString;
begin
    Result := DefaultInterface.OrgUnit2;
end;

function TNotesNameProperties.Get_OrgUnit3: WideString;
begin
    Result := DefaultInterface.OrgUnit3;
end;

function TNotesNameProperties.Get_OrgUnit4: WideString;
begin
    Result := DefaultInterface.OrgUnit4;
end;

function TNotesNameProperties.Get_Parent: ISession;
begin
    Result := DefaultInterface.Parent;
end;

function TNotesNameProperties.Get_PRMD: WideString;
begin
    Result := DefaultInterface.PRMD;
end;

function TNotesNameProperties.Get_Surname: WideString;
begin
    Result := DefaultInterface.Surname;
end;

{$ENDIF}

class function CoNotesNewsletter.Create: INewsletter;
begin
  Result := CreateComObject(CLASS_NotesNewsletter) as INewsletter;
end;

class function CoNotesNewsletter.CreateRemote(const MachineName: string): INewsletter;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NotesNewsletter) as INewsletter;
end;

procedure TNotesNewsletter.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{29131530-2EED-1069-BF5D-00DD011186B7}';
    IntfIID:   '{2913156F-2EED-1069-BF5D-00DD011186B7}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TNotesNewsletter.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as INewsletter;
  end;
end;

procedure TNotesNewsletter.ConnectTo(svrIntf: INewsletter);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TNotesNewsletter.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TNotesNewsletter.GetDefaultInterface: INewsletter;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TNotesNewsletter.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TNotesNewsletterProperties.Create(Self);
{$ENDIF}
end;

destructor TNotesNewsletter.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TNotesNewsletter.GetServerProperties: TNotesNewsletterProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TNotesNewsletter.Get_DoScore: WordBool;
begin
    Result := DefaultInterface.DoScore;
end;

procedure TNotesNewsletter.Set_DoScore(pbFlag: WordBool);
begin
  DefaultInterface.Set_DoScore(pbFlag);
end;

function TNotesNewsletter.Get_DoSubject: WordBool;
begin
    Result := DefaultInterface.DoSubject;
end;

procedure TNotesNewsletter.Set_DoSubject(pbFlag: WordBool);
begin
  DefaultInterface.Set_DoSubject(pbFlag);
end;

function TNotesNewsletter.Get_Parent: ISession;
begin
    Result := DefaultInterface.Parent;
end;

function TNotesNewsletter.Get_SubjectItemName: WideString;
begin
    Result := DefaultInterface.SubjectItemName;
end;

procedure TNotesNewsletter.Set_SubjectItemName(const ppName: WideString);
  { Warning: The property SubjectItemName has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.SubjectItemName := ppName;
end;

function TNotesNewsletter.FormatDocument(const pIDb: IDatabase; lIndex: Integer): IDocument;
begin
  Result := DefaultInterface.FormatDocument(pIDb, lIndex);
end;

function TNotesNewsletter.FormatMsgWithDoclinks(const pIDb: IDatabase): IDocument;
begin
  Result := DefaultInterface.FormatMsgWithDoclinks(pIDb);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TNotesNewsletterProperties.Create(AServer: TNotesNewsletter);
begin
  inherited Create;
  FServer := AServer;
end;

function TNotesNewsletterProperties.GetDefaultInterface: INewsletter;
begin
  Result := FServer.DefaultInterface;
end;

function TNotesNewsletterProperties.Get_DoScore: WordBool;
begin
    Result := DefaultInterface.DoScore;
end;

procedure TNotesNewsletterProperties.Set_DoScore(pbFlag: WordBool);
begin
  DefaultInterface.Set_DoScore(pbFlag);
end;

function TNotesNewsletterProperties.Get_DoSubject: WordBool;
begin
    Result := DefaultInterface.DoSubject;
end;

procedure TNotesNewsletterProperties.Set_DoSubject(pbFlag: WordBool);
begin
  DefaultInterface.Set_DoSubject(pbFlag);
end;

function TNotesNewsletterProperties.Get_Parent: ISession;
begin
    Result := DefaultInterface.Parent;
end;

function TNotesNewsletterProperties.Get_SubjectItemName: WideString;
begin
    Result := DefaultInterface.SubjectItemName;
end;

procedure TNotesNewsletterProperties.Set_SubjectItemName(const ppName: WideString);
  { Warning: The property SubjectItemName has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.SubjectItemName := ppName;
end;

{$ENDIF}

class function CoNotesOutline.Create: IOutline;
begin
  Result := CreateComObject(CLASS_NotesOutline) as IOutline;
end;

class function CoNotesOutline.CreateRemote(const MachineName: string): IOutline;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NotesOutline) as IOutline;
end;

procedure TNotesOutline.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{29131531-2EED-1069-BF5D-00DD011186B7}';
    IntfIID:   '{29131570-2EED-1069-BF5D-00DD011186B7}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TNotesOutline.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as IOutline;
  end;
end;

procedure TNotesOutline.ConnectTo(svrIntf: IOutline);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TNotesOutline.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TNotesOutline.GetDefaultInterface: IOutline;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TNotesOutline.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TNotesOutlineProperties.Create(Self);
{$ENDIF}
end;

destructor TNotesOutline.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TNotesOutline.GetServerProperties: TNotesOutlineProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TNotesOutline.Get_Alias: WideString;
begin
    Result := DefaultInterface.Alias;
end;

procedure TNotesOutline.Set_Alias(const ppAlias: WideString);
  { Warning: The property Alias has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Alias := ppAlias;
end;

function TNotesOutline.Get_Comment: WideString;
begin
    Result := DefaultInterface.Comment;
end;

procedure TNotesOutline.Set_Comment(const ppComment: WideString);
  { Warning: The property Comment has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Comment := ppComment;
end;

function TNotesOutline.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TNotesOutline.Set_Name(const ppName: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := ppName;
end;

function TNotesOutline.Get_ParentDatabase: IDatabase;
begin
    Result := DefaultInterface.ParentDatabase;
end;

function TNotesOutline.CreateEntry(const pEntryName: WideString; const pRefEntry: IOutlineEntry; 
                                   bAfter: WordBool; bAsChild: WordBool): IOutlineEntry;
begin
  Result := DefaultInterface.CreateEntry(pEntryName, pRefEntry, bAfter, bAsChild);
end;

function TNotesOutline.CreateEntryFrom(const pFromEntry: IOutlineEntry; 
                                       const pRefEntry: IOutlineEntry; bAfter: WordBool; 
                                       bAsChild: WordBool): IOutlineEntry;
begin
  Result := DefaultInterface.CreateEntryFrom(pFromEntry, pRefEntry, bAfter, bAsChild);
end;

function TNotesOutline.GetFirst: IOutlineEntry;
begin
  Result := DefaultInterface.GetFirst;
end;

function TNotesOutline.GetLast: IOutlineEntry;
begin
  Result := DefaultInterface.GetLast;
end;

function TNotesOutline.GetParent(const pIEntry: IOutlineEntry): IOutlineEntry;
begin
  Result := DefaultInterface.GetParent(pIEntry);
end;

function TNotesOutline.GetNext(const pIEntry: IOutlineEntry): IOutlineEntry;
begin
  Result := DefaultInterface.GetNext(pIEntry);
end;

function TNotesOutline.GetNextSibling(const pIEntry: IOutlineEntry): IOutlineEntry;
begin
  Result := DefaultInterface.GetNextSibling(pIEntry);
end;

function TNotesOutline.GetPrev(const pIEntry: IOutlineEntry): IOutlineEntry;
begin
  Result := DefaultInterface.GetPrev(pIEntry);
end;

function TNotesOutline.GetPrevSibling(const pIEntry: IOutlineEntry): IOutlineEntry;
begin
  Result := DefaultInterface.GetPrevSibling(pIEntry);
end;

procedure TNotesOutline.MoveEntry(const pIEntry: IOutlineEntry; const pIRefEntry: IOutlineEntry; 
                                  bAfter: WordBool; bAsChild: WordBool);
begin
  DefaultInterface.MoveEntry(pIEntry, pIRefEntry, bAfter, bAsChild);
end;

procedure TNotesOutline.RemoveEntry(const pIEntry: IOutlineEntry);
begin
  DefaultInterface.RemoveEntry(pIEntry);
end;

procedure TNotesOutline.Save;
begin
  DefaultInterface.Save;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TNotesOutlineProperties.Create(AServer: TNotesOutline);
begin
  inherited Create;
  FServer := AServer;
end;

function TNotesOutlineProperties.GetDefaultInterface: IOutline;
begin
  Result := FServer.DefaultInterface;
end;

function TNotesOutlineProperties.Get_Alias: WideString;
begin
    Result := DefaultInterface.Alias;
end;

procedure TNotesOutlineProperties.Set_Alias(const ppAlias: WideString);
  { Warning: The property Alias has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Alias := ppAlias;
end;

function TNotesOutlineProperties.Get_Comment: WideString;
begin
    Result := DefaultInterface.Comment;
end;

procedure TNotesOutlineProperties.Set_Comment(const ppComment: WideString);
  { Warning: The property Comment has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Comment := ppComment;
end;

function TNotesOutlineProperties.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TNotesOutlineProperties.Set_Name(const ppName: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := ppName;
end;

function TNotesOutlineProperties.Get_ParentDatabase: IDatabase;
begin
    Result := DefaultInterface.ParentDatabase;
end;

{$ENDIF}

class function CoNotesOutlineEntry.Create: IOutlineEntry;
begin
  Result := CreateComObject(CLASS_NotesOutlineEntry) as IOutlineEntry;
end;

class function CoNotesOutlineEntry.CreateRemote(const MachineName: string): IOutlineEntry;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NotesOutlineEntry) as IOutlineEntry;
end;

procedure TNotesOutlineEntry.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{29131532-2EED-1069-BF5D-00DD011186B7}';
    IntfIID:   '{29131571-2EED-1069-BF5D-00DD011186B7}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TNotesOutlineEntry.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as IOutlineEntry;
  end;
end;

procedure TNotesOutlineEntry.ConnectTo(svrIntf: IOutlineEntry);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TNotesOutlineEntry.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TNotesOutlineEntry.GetDefaultInterface: IOutlineEntry;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TNotesOutlineEntry.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TNotesOutlineEntryProperties.Create(Self);
{$ENDIF}
end;

destructor TNotesOutlineEntry.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TNotesOutlineEntry.GetServerProperties: TNotesOutlineEntryProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TNotesOutlineEntry.Get_Alias: WideString;
begin
    Result := DefaultInterface.Alias;
end;

procedure TNotesOutlineEntry.Set_Alias(const ppAlias: WideString);
  { Warning: The property Alias has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Alias := ppAlias;
end;

function TNotesOutlineEntry.Get_DATABASE: IDatabase;
begin
    Result := DefaultInterface.DATABASE;
end;

function TNotesOutlineEntry.Get_Document: IDocument;
begin
    Result := DefaultInterface.Document;
end;

function TNotesOutlineEntry.Get_EntryClass: OE_CLASS;
begin
    Result := DefaultInterface.EntryClass;
end;

function TNotesOutlineEntry.Get_FrameText: WideString;
begin
    Result := DefaultInterface.FrameText;
end;

procedure TNotesOutlineEntry.Set_FrameText(const ppText: WideString);
  { Warning: The property FrameText has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.FrameText := ppText;
end;

function TNotesOutlineEntry.Get_Formula: WideString;
begin
    Result := DefaultInterface.Formula;
end;

function TNotesOutlineEntry.Get_HasChildren: WordBool;
begin
    Result := DefaultInterface.HasChildren;
end;

function TNotesOutlineEntry.Get_HideFormula: WideString;
begin
    Result := DefaultInterface.HideFormula;
end;

procedure TNotesOutlineEntry.Set_HideFormula(const ppFormula: WideString);
  { Warning: The property HideFormula has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.HideFormula := ppFormula;
end;

function TNotesOutlineEntry.Get_ImagesText: WideString;
begin
    Result := DefaultInterface.ImagesText;
end;

procedure TNotesOutlineEntry.Set_ImagesText(const ppText: WideString);
  { Warning: The property ImagesText has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ImagesText := ppText;
end;

function TNotesOutlineEntry.Get_IsHiddenFromNotes: WordBool;
begin
    Result := DefaultInterface.IsHiddenFromNotes;
end;

procedure TNotesOutlineEntry.Set_IsHiddenFromNotes(pbFlag: WordBool);
begin
  DefaultInterface.Set_IsHiddenFromNotes(pbFlag);
end;

function TNotesOutlineEntry.Get_IsHiddenFromWeb: WordBool;
begin
    Result := DefaultInterface.IsHiddenFromWeb;
end;

procedure TNotesOutlineEntry.Set_IsHiddenFromWeb(pbFlag: WordBool);
begin
  DefaultInterface.Set_IsHiddenFromWeb(pbFlag);
end;

function TNotesOutlineEntry.Get_IsInThisDB: WordBool;
begin
    Result := DefaultInterface.IsInThisDB;
end;

function TNotesOutlineEntry.Get_IsPrivate: WordBool;
begin
    Result := DefaultInterface.IsPrivate;
end;

function TNotesOutlineEntry.Get_KeepSelectionFocus: WordBool;
begin
    Result := DefaultInterface.KeepSelectionFocus;
end;

procedure TNotesOutlineEntry.Set_KeepSelectionFocus(pbFlag: WordBool);
begin
  DefaultInterface.Set_KeepSelectionFocus(pbFlag);
end;

function TNotesOutlineEntry.Get_Label_: WideString;
begin
    Result := DefaultInterface.Label_;
end;

procedure TNotesOutlineEntry.Set_Label_(const ppLabel: WideString);
  { Warning: The property Label_ has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Label_ := ppLabel;
end;

function TNotesOutlineEntry.Get_Level: Integer;
begin
    Result := DefaultInterface.Level;
end;

function TNotesOutlineEntry.Get_NamedElement: WideString;
begin
    Result := DefaultInterface.NamedElement;
end;

function TNotesOutlineEntry.Get_Parent: IOutline;
begin
    Result := DefaultInterface.Parent;
end;

function TNotesOutlineEntry.Get_type_: OE_TYPE;
begin
    Result := DefaultInterface.type_;
end;

function TNotesOutlineEntry.Get_URL: WideString;
begin
    Result := DefaultInterface.URL;
end;

function TNotesOutlineEntry.Get_UseHideFormula: WordBool;
begin
    Result := DefaultInterface.UseHideFormula;
end;

procedure TNotesOutlineEntry.Set_UseHideFormula(pbFlag: WordBool);
begin
  DefaultInterface.Set_UseHideFormula(pbFlag);
end;

function TNotesOutlineEntry.Get_View: IView;
begin
    Result := DefaultInterface.View;
end;

procedure TNotesOutlineEntry.SetAction(const pFormula: WideString);
begin
  DefaultInterface.SetAction(pFormula);
end;

procedure TNotesOutlineEntry.SetNamedElement(const pIDb: IDatabase; const pElementName: WideString; 
                                             lClass: OE_CLASS);
begin
  DefaultInterface.SetNamedElement(pIDb, pElementName, lClass);
end;

procedure TNotesOutlineEntry.SetNoteLink(const pIObj: IUnknown);
begin
  DefaultInterface.SetNoteLink(pIObj);
end;

procedure TNotesOutlineEntry.SetURL(const pURL: WideString);
begin
  DefaultInterface.SetURL(pURL);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TNotesOutlineEntryProperties.Create(AServer: TNotesOutlineEntry);
begin
  inherited Create;
  FServer := AServer;
end;

function TNotesOutlineEntryProperties.GetDefaultInterface: IOutlineEntry;
begin
  Result := FServer.DefaultInterface;
end;

function TNotesOutlineEntryProperties.Get_Alias: WideString;
begin
    Result := DefaultInterface.Alias;
end;

procedure TNotesOutlineEntryProperties.Set_Alias(const ppAlias: WideString);
  { Warning: The property Alias has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Alias := ppAlias;
end;

function TNotesOutlineEntryProperties.Get_DATABASE: IDatabase;
begin
    Result := DefaultInterface.DATABASE;
end;

function TNotesOutlineEntryProperties.Get_Document: IDocument;
begin
    Result := DefaultInterface.Document;
end;

function TNotesOutlineEntryProperties.Get_EntryClass: OE_CLASS;
begin
    Result := DefaultInterface.EntryClass;
end;

function TNotesOutlineEntryProperties.Get_FrameText: WideString;
begin
    Result := DefaultInterface.FrameText;
end;

procedure TNotesOutlineEntryProperties.Set_FrameText(const ppText: WideString);
  { Warning: The property FrameText has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.FrameText := ppText;
end;

function TNotesOutlineEntryProperties.Get_Formula: WideString;
begin
    Result := DefaultInterface.Formula;
end;

function TNotesOutlineEntryProperties.Get_HasChildren: WordBool;
begin
    Result := DefaultInterface.HasChildren;
end;

function TNotesOutlineEntryProperties.Get_HideFormula: WideString;
begin
    Result := DefaultInterface.HideFormula;
end;

procedure TNotesOutlineEntryProperties.Set_HideFormula(const ppFormula: WideString);
  { Warning: The property HideFormula has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.HideFormula := ppFormula;
end;

function TNotesOutlineEntryProperties.Get_ImagesText: WideString;
begin
    Result := DefaultInterface.ImagesText;
end;

procedure TNotesOutlineEntryProperties.Set_ImagesText(const ppText: WideString);
  { Warning: The property ImagesText has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ImagesText := ppText;
end;

function TNotesOutlineEntryProperties.Get_IsHiddenFromNotes: WordBool;
begin
    Result := DefaultInterface.IsHiddenFromNotes;
end;

procedure TNotesOutlineEntryProperties.Set_IsHiddenFromNotes(pbFlag: WordBool);
begin
  DefaultInterface.Set_IsHiddenFromNotes(pbFlag);
end;

function TNotesOutlineEntryProperties.Get_IsHiddenFromWeb: WordBool;
begin
    Result := DefaultInterface.IsHiddenFromWeb;
end;

procedure TNotesOutlineEntryProperties.Set_IsHiddenFromWeb(pbFlag: WordBool);
begin
  DefaultInterface.Set_IsHiddenFromWeb(pbFlag);
end;

function TNotesOutlineEntryProperties.Get_IsInThisDB: WordBool;
begin
    Result := DefaultInterface.IsInThisDB;
end;

function TNotesOutlineEntryProperties.Get_IsPrivate: WordBool;
begin
    Result := DefaultInterface.IsPrivate;
end;

function TNotesOutlineEntryProperties.Get_KeepSelectionFocus: WordBool;
begin
    Result := DefaultInterface.KeepSelectionFocus;
end;

procedure TNotesOutlineEntryProperties.Set_KeepSelectionFocus(pbFlag: WordBool);
begin
  DefaultInterface.Set_KeepSelectionFocus(pbFlag);
end;

function TNotesOutlineEntryProperties.Get_Label_: WideString;
begin
    Result := DefaultInterface.Label_;
end;

procedure TNotesOutlineEntryProperties.Set_Label_(const ppLabel: WideString);
  { Warning: The property Label_ has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Label_ := ppLabel;
end;

function TNotesOutlineEntryProperties.Get_Level: Integer;
begin
    Result := DefaultInterface.Level;
end;

function TNotesOutlineEntryProperties.Get_NamedElement: WideString;
begin
    Result := DefaultInterface.NamedElement;
end;

function TNotesOutlineEntryProperties.Get_Parent: IOutline;
begin
    Result := DefaultInterface.Parent;
end;

function TNotesOutlineEntryProperties.Get_type_: OE_TYPE;
begin
    Result := DefaultInterface.type_;
end;

function TNotesOutlineEntryProperties.Get_URL: WideString;
begin
    Result := DefaultInterface.URL;
end;

function TNotesOutlineEntryProperties.Get_UseHideFormula: WordBool;
begin
    Result := DefaultInterface.UseHideFormula;
end;

procedure TNotesOutlineEntryProperties.Set_UseHideFormula(pbFlag: WordBool);
begin
  DefaultInterface.Set_UseHideFormula(pbFlag);
end;

function TNotesOutlineEntryProperties.Get_View: IView;
begin
    Result := DefaultInterface.View;
end;

{$ENDIF}

class function CoNotesRichTextItem.Create: IRichTextItem;
begin
  Result := CreateComObject(CLASS_NotesRichTextItem) as IRichTextItem;
end;

class function CoNotesRichTextItem.CreateRemote(const MachineName: string): IRichTextItem;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NotesRichTextItem) as IRichTextItem;
end;

procedure TNotesRichTextItem.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{29131533-2EED-1069-BF5D-00DD011186B7}';
    IntfIID:   '{29131574-2EED-1069-BF5D-00DD011186B7}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TNotesRichTextItem.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as IRichTextItem;
  end;
end;

procedure TNotesRichTextItem.ConnectTo(svrIntf: IRichTextItem);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TNotesRichTextItem.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TNotesRichTextItem.GetDefaultInterface: IRichTextItem;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TNotesRichTextItem.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TNotesRichTextItemProperties.Create(Self);
{$ENDIF}
end;

destructor TNotesRichTextItem.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TNotesRichTextItem.GetServerProperties: TNotesRichTextItemProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TNotesRichTextItem.Get_DateTimeValue: IDateTime;
begin
    Result := DefaultInterface.DateTimeValue;
end;

procedure TNotesRichTextItem.Set_DateTimeValue(const ppITime: IDateTime);
begin
  DefaultInterface.Set_DateTimeValue(ppITime);
end;

function TNotesRichTextItem.Get_IsAuthors: WordBool;
begin
    Result := DefaultInterface.IsAuthors;
end;

procedure TNotesRichTextItem.Set_IsAuthors(pbFlag: WordBool);
begin
  DefaultInterface.Set_IsAuthors(pbFlag);
end;

function TNotesRichTextItem.Get_IsEncrypted: WordBool;
begin
    Result := DefaultInterface.IsEncrypted;
end;

procedure TNotesRichTextItem.Set_IsEncrypted(pbFlag: WordBool);
begin
  DefaultInterface.Set_IsEncrypted(pbFlag);
end;

function TNotesRichTextItem.Get_IsNames: WordBool;
begin
    Result := DefaultInterface.IsNames;
end;

procedure TNotesRichTextItem.Set_IsNames(pbFlag: WordBool);
begin
  DefaultInterface.Set_IsNames(pbFlag);
end;

function TNotesRichTextItem.Get_IsProtected: WordBool;
begin
    Result := DefaultInterface.IsProtected;
end;

procedure TNotesRichTextItem.Set_IsProtected(pbFlag: WordBool);
begin
  DefaultInterface.Set_IsProtected(pbFlag);
end;

function TNotesRichTextItem.Get_IsReaders: WordBool;
begin
    Result := DefaultInterface.IsReaders;
end;

procedure TNotesRichTextItem.Set_IsReaders(pbFlag: WordBool);
begin
  DefaultInterface.Set_IsReaders(pbFlag);
end;

function TNotesRichTextItem.Get_IsSigned: WordBool;
begin
    Result := DefaultInterface.IsSigned;
end;

procedure TNotesRichTextItem.Set_IsSigned(pbFlag: WordBool);
begin
  DefaultInterface.Set_IsSigned(pbFlag);
end;

function TNotesRichTextItem.Get_IsSummary: WordBool;
begin
    Result := DefaultInterface.IsSummary;
end;

procedure TNotesRichTextItem.Set_IsSummary(pbFlag: WordBool);
begin
  DefaultInterface.Set_IsSummary(pbFlag);
end;

function TNotesRichTextItem.Get_LastModified: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.LastModified;
end;

function TNotesRichTextItem.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

function TNotesRichTextItem.Get_Parent: IDocument;
begin
    Result := DefaultInterface.Parent;
end;

function TNotesRichTextItem.Get_SaveToDisk: WordBool;
begin
    Result := DefaultInterface.SaveToDisk;
end;

procedure TNotesRichTextItem.Set_SaveToDisk(pbFlag: WordBool);
begin
  DefaultInterface.Set_SaveToDisk(pbFlag);
end;

function TNotesRichTextItem.Get_Text: WideString;
begin
    Result := DefaultInterface.Text;
end;

function TNotesRichTextItem.Get_type_: IT_TYPE;
begin
    Result := DefaultInterface.type_;
end;

function TNotesRichTextItem.Get_ValueLength: Integer;
begin
    Result := DefaultInterface.ValueLength;
end;

function TNotesRichTextItem.Get_Values: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.Values;
end;

procedure TNotesRichTextItem.Set_Values(pValue: OleVariant);
begin
  DefaultInterface.Set_Values(pValue);
end;

function TNotesRichTextItem.Get_EmbeddedObjects: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.EmbeddedObjects;
end;

function TNotesRichTextItem.Abstract(lMaxlen: Integer; bDropvowels: WordBool; bUsedict: WordBool): WideString;
begin
  Result := DefaultInterface.Abstract(lMaxlen, bDropvowels, bUsedict);
end;

procedure TNotesRichTextItem.AppendToTextList(Values: OleVariant);
begin
  DefaultInterface.AppendToTextList(Values);
end;

function TNotesRichTextItem.Contains(Value: OleVariant): WordBool;
begin
  Result := DefaultInterface.Contains(Value);
end;

function TNotesRichTextItem.CopyItemToDocument(const pIDoc: IDocument; const pNewname: WideString): IItem2;
begin
  Result := DefaultInterface.CopyItemToDocument(pIDoc, pNewname);
end;

function TNotesRichTextItem.GetMIMEEntity: IMIMEEntity;
begin
  Result := DefaultInterface.GetMIMEEntity;
end;

procedure TNotesRichTextItem.Remove;
begin
  DefaultInterface.Remove;
end;

procedure TNotesRichTextItem.AddNewLine(lCount: Integer; bNewparagraph: WordBool);
begin
  DefaultInterface.AddNewLine(lCount, bNewparagraph);
end;

procedure TNotesRichTextItem.AddPageBreak(const pIStyle: IRichTextParagraphStyle);
begin
  DefaultInterface.AddPageBreak(pIStyle);
end;

procedure TNotesRichTextItem.AddTab(lCount: Integer);
begin
  DefaultInterface.AddTab(lCount);
end;

procedure TNotesRichTextItem.AppendDocLink(const pIObj: IUnknown; const pComment: WideString; 
                                           const pHotspottext: WideString);
begin
  DefaultInterface.AppendDocLink(pIObj, pComment, pHotspottext);
end;

procedure TNotesRichTextItem.AppendParagraphStyle(const pIStyle: IRichTextParagraphStyle);
begin
  DefaultInterface.AppendParagraphStyle(pIStyle);
end;

procedure TNotesRichTextItem.AppendRTItem(const pIRTItem: IRichTextItem);
begin
  DefaultInterface.AppendRTItem(pIRTItem);
end;

procedure TNotesRichTextItem.AppendStyle(const pIStyle: IRichTextStyle);
begin
  DefaultInterface.AppendStyle(pIStyle);
end;

procedure TNotesRichTextItem.AppendText(const pText: WideString);
begin
  DefaultInterface.AppendText(pText);
end;

function TNotesRichTextItem.EmbedObject(lType: EMBED_TYPE; const pClass: WideString; 
                                        const pSource: WideString; const pName: WideString): IEmbeddedObject;
begin
  Result := DefaultInterface.EmbedObject(lType, pClass, pSource, pName);
end;

function TNotesRichTextItem.GetEmbeddedObject(const pName: WideString): IEmbeddedObject;
begin
  Result := DefaultInterface.GetEmbeddedObject(pName);
end;

function TNotesRichTextItem.GetFormattedText(bTabstrip: WordBool; lLinelen: Integer): WideString;
begin
  Result := DefaultInterface.GetFormattedText(bTabstrip, lLinelen);
end;

function TNotesRichTextItem.CreateNavigator: IRichTextNavigator;
begin
  Result := DefaultInterface.CreateNavigator;
end;

function TNotesRichTextItem.CreateRange: IRichTextRange;
begin
  Result := DefaultInterface.CreateRange;
end;

procedure TNotesRichTextItem.AppendTable(lRowCount: Integer; lColumnCount: Integer; 
                                         var pRowLabels: OleVariant; lLeftMargin: Integer; 
                                         var pRTPStyleArray: OleVariant);
begin
  DefaultInterface.AppendTable(lRowCount, lColumnCount, pRowLabels, lLeftMargin, pRTPStyleArray);
end;

procedure TNotesRichTextItem.BeginInsert(var pElement: OleVariant; bAfter: WordBool);
begin
  DefaultInterface.BeginInsert(pElement, bAfter);
end;

procedure TNotesRichTextItem.EndInsert;
begin
  DefaultInterface.EndInsert;
end;

procedure TNotesRichTextItem.BeginSection(const pTitle: WideString; 
                                          const pTitleStyle: IRichTextStyle; 
                                          const pBarColor: IColorObject; bExpand: WordBool);
begin
  DefaultInterface.BeginSection(pTitle, pTitleStyle, pBarColor, bExpand);
end;

procedure TNotesRichTextItem.EndSection;
begin
  DefaultInterface.EndSection;
end;

function TNotesRichTextItem.GetNotesFont(const pFaceName: WideString; bAddOnFail: WordBool): Integer;
begin
  Result := DefaultInterface.GetNotesFont(pFaceName, bAddOnFail);
end;

procedure TNotesRichTextItem.Update;
begin
  DefaultInterface.Update;
end;

procedure TNotesRichTextItem.Compact;
begin
  DefaultInterface.Compact;
end;

function TNotesRichTextItem.GetUnformattedText: WideString;
begin
  Result := DefaultInterface.GetUnformattedText;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TNotesRichTextItemProperties.Create(AServer: TNotesRichTextItem);
begin
  inherited Create;
  FServer := AServer;
end;

function TNotesRichTextItemProperties.GetDefaultInterface: IRichTextItem;
begin
  Result := FServer.DefaultInterface;
end;

function TNotesRichTextItemProperties.Get_DateTimeValue: IDateTime;
begin
    Result := DefaultInterface.DateTimeValue;
end;

procedure TNotesRichTextItemProperties.Set_DateTimeValue(const ppITime: IDateTime);
begin
  DefaultInterface.Set_DateTimeValue(ppITime);
end;

function TNotesRichTextItemProperties.Get_IsAuthors: WordBool;
begin
    Result := DefaultInterface.IsAuthors;
end;

procedure TNotesRichTextItemProperties.Set_IsAuthors(pbFlag: WordBool);
begin
  DefaultInterface.Set_IsAuthors(pbFlag);
end;

function TNotesRichTextItemProperties.Get_IsEncrypted: WordBool;
begin
    Result := DefaultInterface.IsEncrypted;
end;

procedure TNotesRichTextItemProperties.Set_IsEncrypted(pbFlag: WordBool);
begin
  DefaultInterface.Set_IsEncrypted(pbFlag);
end;

function TNotesRichTextItemProperties.Get_IsNames: WordBool;
begin
    Result := DefaultInterface.IsNames;
end;

procedure TNotesRichTextItemProperties.Set_IsNames(pbFlag: WordBool);
begin
  DefaultInterface.Set_IsNames(pbFlag);
end;

function TNotesRichTextItemProperties.Get_IsProtected: WordBool;
begin
    Result := DefaultInterface.IsProtected;
end;

procedure TNotesRichTextItemProperties.Set_IsProtected(pbFlag: WordBool);
begin
  DefaultInterface.Set_IsProtected(pbFlag);
end;

function TNotesRichTextItemProperties.Get_IsReaders: WordBool;
begin
    Result := DefaultInterface.IsReaders;
end;

procedure TNotesRichTextItemProperties.Set_IsReaders(pbFlag: WordBool);
begin
  DefaultInterface.Set_IsReaders(pbFlag);
end;

function TNotesRichTextItemProperties.Get_IsSigned: WordBool;
begin
    Result := DefaultInterface.IsSigned;
end;

procedure TNotesRichTextItemProperties.Set_IsSigned(pbFlag: WordBool);
begin
  DefaultInterface.Set_IsSigned(pbFlag);
end;

function TNotesRichTextItemProperties.Get_IsSummary: WordBool;
begin
    Result := DefaultInterface.IsSummary;
end;

procedure TNotesRichTextItemProperties.Set_IsSummary(pbFlag: WordBool);
begin
  DefaultInterface.Set_IsSummary(pbFlag);
end;

function TNotesRichTextItemProperties.Get_LastModified: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.LastModified;
end;

function TNotesRichTextItemProperties.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

function TNotesRichTextItemProperties.Get_Parent: IDocument;
begin
    Result := DefaultInterface.Parent;
end;

function TNotesRichTextItemProperties.Get_SaveToDisk: WordBool;
begin
    Result := DefaultInterface.SaveToDisk;
end;

procedure TNotesRichTextItemProperties.Set_SaveToDisk(pbFlag: WordBool);
begin
  DefaultInterface.Set_SaveToDisk(pbFlag);
end;

function TNotesRichTextItemProperties.Get_Text: WideString;
begin
    Result := DefaultInterface.Text;
end;

function TNotesRichTextItemProperties.Get_type_: IT_TYPE;
begin
    Result := DefaultInterface.type_;
end;

function TNotesRichTextItemProperties.Get_ValueLength: Integer;
begin
    Result := DefaultInterface.ValueLength;
end;

function TNotesRichTextItemProperties.Get_Values: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.Values;
end;

procedure TNotesRichTextItemProperties.Set_Values(pValue: OleVariant);
begin
  DefaultInterface.Set_Values(pValue);
end;

function TNotesRichTextItemProperties.Get_EmbeddedObjects: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.EmbeddedObjects;
end;

{$ENDIF}

class function CoNotesRichTextStyle.Create: IRichTextStyle;
begin
  Result := CreateComObject(CLASS_NotesRichTextStyle) as IRichTextStyle;
end;

class function CoNotesRichTextStyle.CreateRemote(const MachineName: string): IRichTextStyle;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NotesRichTextStyle) as IRichTextStyle;
end;

procedure TNotesRichTextStyle.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{29131534-2EED-1069-BF5D-00DD011186B7}';
    IntfIID:   '{29131575-2EED-1069-BF5D-00DD011186B7}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TNotesRichTextStyle.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as IRichTextStyle;
  end;
end;

procedure TNotesRichTextStyle.ConnectTo(svrIntf: IRichTextStyle);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TNotesRichTextStyle.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TNotesRichTextStyle.GetDefaultInterface: IRichTextStyle;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TNotesRichTextStyle.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TNotesRichTextStyleProperties.Create(Self);
{$ENDIF}
end;

destructor TNotesRichTextStyle.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TNotesRichTextStyle.GetServerProperties: TNotesRichTextStyleProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TNotesRichTextStyle.Get_Bold: Integer;
begin
    Result := DefaultInterface.Bold;
end;

procedure TNotesRichTextStyle.Set_Bold(plValue: Integer);
begin
  DefaultInterface.Set_Bold(plValue);
end;

function TNotesRichTextStyle.Get_Effects: RT_EFFECTS;
begin
    Result := DefaultInterface.Effects;
end;

procedure TNotesRichTextStyle.Set_Effects(plValue: RT_EFFECTS);
begin
  DefaultInterface.Set_Effects(plValue);
end;

function TNotesRichTextStyle.Get_FontSize: Integer;
begin
    Result := DefaultInterface.FontSize;
end;

procedure TNotesRichTextStyle.Set_FontSize(plValue: Integer);
begin
  DefaultInterface.Set_FontSize(plValue);
end;

function TNotesRichTextStyle.Get_Italic: Integer;
begin
    Result := DefaultInterface.Italic;
end;

procedure TNotesRichTextStyle.Set_Italic(plValue: Integer);
begin
  DefaultInterface.Set_Italic(plValue);
end;

function TNotesRichTextStyle.Get_NotesColor: COLORS;
begin
    Result := DefaultInterface.NotesColor;
end;

procedure TNotesRichTextStyle.Set_NotesColor(plValue: COLORS);
begin
  DefaultInterface.Set_NotesColor(plValue);
end;

function TNotesRichTextStyle.Get_NotesFont: RT_FONTS;
begin
    Result := DefaultInterface.NotesFont;
end;

procedure TNotesRichTextStyle.Set_NotesFont(plValue: RT_FONTS);
begin
  DefaultInterface.Set_NotesFont(plValue);
end;

function TNotesRichTextStyle.Get_PassThruHTML: Integer;
begin
    Result := DefaultInterface.PassThruHTML;
end;

procedure TNotesRichTextStyle.Set_PassThruHTML(plValue: Integer);
begin
  DefaultInterface.Set_PassThruHTML(plValue);
end;

function TNotesRichTextStyle.Get_StrikeThrough: Integer;
begin
    Result := DefaultInterface.StrikeThrough;
end;

procedure TNotesRichTextStyle.Set_StrikeThrough(plValue: Integer);
begin
  DefaultInterface.Set_StrikeThrough(plValue);
end;

function TNotesRichTextStyle.Get_Underline: Integer;
begin
    Result := DefaultInterface.Underline;
end;

procedure TNotesRichTextStyle.Set_Underline(plValue: Integer);
begin
  DefaultInterface.Set_Underline(plValue);
end;

function TNotesRichTextStyle.Get_Parent: ISession;
begin
    Result := DefaultInterface.Parent;
end;

function TNotesRichTextStyle.Get_IsDefault: WordBool;
begin
    Result := DefaultInterface.IsDefault;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TNotesRichTextStyleProperties.Create(AServer: TNotesRichTextStyle);
begin
  inherited Create;
  FServer := AServer;
end;

function TNotesRichTextStyleProperties.GetDefaultInterface: IRichTextStyle;
begin
  Result := FServer.DefaultInterface;
end;

function TNotesRichTextStyleProperties.Get_Bold: Integer;
begin
    Result := DefaultInterface.Bold;
end;

procedure TNotesRichTextStyleProperties.Set_Bold(plValue: Integer);
begin
  DefaultInterface.Set_Bold(plValue);
end;

function TNotesRichTextStyleProperties.Get_Effects: RT_EFFECTS;
begin
    Result := DefaultInterface.Effects;
end;

procedure TNotesRichTextStyleProperties.Set_Effects(plValue: RT_EFFECTS);
begin
  DefaultInterface.Set_Effects(plValue);
end;

function TNotesRichTextStyleProperties.Get_FontSize: Integer;
begin
    Result := DefaultInterface.FontSize;
end;

procedure TNotesRichTextStyleProperties.Set_FontSize(plValue: Integer);
begin
  DefaultInterface.Set_FontSize(plValue);
end;

function TNotesRichTextStyleProperties.Get_Italic: Integer;
begin
    Result := DefaultInterface.Italic;
end;

procedure TNotesRichTextStyleProperties.Set_Italic(plValue: Integer);
begin
  DefaultInterface.Set_Italic(plValue);
end;

function TNotesRichTextStyleProperties.Get_NotesColor: COLORS;
begin
    Result := DefaultInterface.NotesColor;
end;

procedure TNotesRichTextStyleProperties.Set_NotesColor(plValue: COLORS);
begin
  DefaultInterface.Set_NotesColor(plValue);
end;

function TNotesRichTextStyleProperties.Get_NotesFont: RT_FONTS;
begin
    Result := DefaultInterface.NotesFont;
end;

procedure TNotesRichTextStyleProperties.Set_NotesFont(plValue: RT_FONTS);
begin
  DefaultInterface.Set_NotesFont(plValue);
end;

function TNotesRichTextStyleProperties.Get_PassThruHTML: Integer;
begin
    Result := DefaultInterface.PassThruHTML;
end;

procedure TNotesRichTextStyleProperties.Set_PassThruHTML(plValue: Integer);
begin
  DefaultInterface.Set_PassThruHTML(plValue);
end;

function TNotesRichTextStyleProperties.Get_StrikeThrough: Integer;
begin
    Result := DefaultInterface.StrikeThrough;
end;

procedure TNotesRichTextStyleProperties.Set_StrikeThrough(plValue: Integer);
begin
  DefaultInterface.Set_StrikeThrough(plValue);
end;

function TNotesRichTextStyleProperties.Get_Underline: Integer;
begin
    Result := DefaultInterface.Underline;
end;

procedure TNotesRichTextStyleProperties.Set_Underline(plValue: Integer);
begin
  DefaultInterface.Set_Underline(plValue);
end;

function TNotesRichTextStyleProperties.Get_Parent: ISession;
begin
    Result := DefaultInterface.Parent;
end;

function TNotesRichTextStyleProperties.Get_IsDefault: WordBool;
begin
    Result := DefaultInterface.IsDefault;
end;

{$ENDIF}

class function CoNotesRichTextParagraphStyle.Create: IRichTextParagraphStyle;
begin
  Result := CreateComObject(CLASS_NotesRichTextParagraphStyle) as IRichTextParagraphStyle;
end;

class function CoNotesRichTextParagraphStyle.CreateRemote(const MachineName: string): IRichTextParagraphStyle;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NotesRichTextParagraphStyle) as IRichTextParagraphStyle;
end;

procedure TNotesRichTextParagraphStyle.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{29131535-2EED-1069-BF5D-00DD011186B7}';
    IntfIID:   '{29131576-2EED-1069-BF5D-00DD011186B7}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TNotesRichTextParagraphStyle.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as IRichTextParagraphStyle;
  end;
end;

procedure TNotesRichTextParagraphStyle.ConnectTo(svrIntf: IRichTextParagraphStyle);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TNotesRichTextParagraphStyle.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TNotesRichTextParagraphStyle.GetDefaultInterface: IRichTextParagraphStyle;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TNotesRichTextParagraphStyle.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TNotesRichTextParagraphStyleProperties.Create(Self);
{$ENDIF}
end;

destructor TNotesRichTextParagraphStyle.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TNotesRichTextParagraphStyle.GetServerProperties: TNotesRichTextParagraphStyleProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TNotesRichTextParagraphStyle.Get_Alignment: RT_ALIGN;
begin
    Result := DefaultInterface.Alignment;
end;

procedure TNotesRichTextParagraphStyle.Set_Alignment(plValue: RT_ALIGN);
begin
  DefaultInterface.Set_Alignment(plValue);
end;

function TNotesRichTextParagraphStyle.Get_FirstLineLeftMargin: Integer;
begin
    Result := DefaultInterface.FirstLineLeftMargin;
end;

procedure TNotesRichTextParagraphStyle.Set_FirstLineLeftMargin(plValue: Integer);
begin
  DefaultInterface.Set_FirstLineLeftMargin(plValue);
end;

function TNotesRichTextParagraphStyle.Get_InterLineSpacing: SPACING;
begin
    Result := DefaultInterface.InterLineSpacing;
end;

procedure TNotesRichTextParagraphStyle.Set_InterLineSpacing(plValue: SPACING);
begin
  DefaultInterface.Set_InterLineSpacing(plValue);
end;

function TNotesRichTextParagraphStyle.Get_LeftMargin: Integer;
begin
    Result := DefaultInterface.LeftMargin;
end;

procedure TNotesRichTextParagraphStyle.Set_LeftMargin(plValue: Integer);
begin
  DefaultInterface.Set_LeftMargin(plValue);
end;

function TNotesRichTextParagraphStyle.Get_Pagination: RT_PAGINATE;
begin
    Result := DefaultInterface.Pagination;
end;

procedure TNotesRichTextParagraphStyle.Set_Pagination(plValue: RT_PAGINATE);
begin
  DefaultInterface.Set_Pagination(plValue);
end;

function TNotesRichTextParagraphStyle.Get_RightMargin: Integer;
begin
    Result := DefaultInterface.RightMargin;
end;

procedure TNotesRichTextParagraphStyle.Set_RightMargin(plValue: Integer);
begin
  DefaultInterface.Set_RightMargin(plValue);
end;

function TNotesRichTextParagraphStyle.Get_SpacingAbove: SPACING;
begin
    Result := DefaultInterface.SpacingAbove;
end;

procedure TNotesRichTextParagraphStyle.Set_SpacingAbove(plValue: SPACING);
begin
  DefaultInterface.Set_SpacingAbove(plValue);
end;

function TNotesRichTextParagraphStyle.Get_SpacingBelow: SPACING;
begin
    Result := DefaultInterface.SpacingBelow;
end;

procedure TNotesRichTextParagraphStyle.Set_SpacingBelow(plValue: SPACING);
begin
  DefaultInterface.Set_SpacingBelow(plValue);
end;

function TNotesRichTextParagraphStyle.Get_Tabs: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.Tabs;
end;

procedure TNotesRichTextParagraphStyle.ClearAllTabs;
begin
  DefaultInterface.ClearAllTabs;
end;

procedure TNotesRichTextParagraphStyle.SetTab(lPosition: Integer; lType: RT_TAB);
begin
  DefaultInterface.SetTab(lPosition, lType);
end;

procedure TNotesRichTextParagraphStyle.SetTabs(lCount: Integer; lPosition: Integer; 
                                               lInterval: Integer; lType: RT_TAB);
begin
  DefaultInterface.SetTabs(lCount, lPosition, lInterval, lType);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TNotesRichTextParagraphStyleProperties.Create(AServer: TNotesRichTextParagraphStyle);
begin
  inherited Create;
  FServer := AServer;
end;

function TNotesRichTextParagraphStyleProperties.GetDefaultInterface: IRichTextParagraphStyle;
begin
  Result := FServer.DefaultInterface;
end;

function TNotesRichTextParagraphStyleProperties.Get_Alignment: RT_ALIGN;
begin
    Result := DefaultInterface.Alignment;
end;

procedure TNotesRichTextParagraphStyleProperties.Set_Alignment(plValue: RT_ALIGN);
begin
  DefaultInterface.Set_Alignment(plValue);
end;

function TNotesRichTextParagraphStyleProperties.Get_FirstLineLeftMargin: Integer;
begin
    Result := DefaultInterface.FirstLineLeftMargin;
end;

procedure TNotesRichTextParagraphStyleProperties.Set_FirstLineLeftMargin(plValue: Integer);
begin
  DefaultInterface.Set_FirstLineLeftMargin(plValue);
end;

function TNotesRichTextParagraphStyleProperties.Get_InterLineSpacing: SPACING;
begin
    Result := DefaultInterface.InterLineSpacing;
end;

procedure TNotesRichTextParagraphStyleProperties.Set_InterLineSpacing(plValue: SPACING);
begin
  DefaultInterface.Set_InterLineSpacing(plValue);
end;

function TNotesRichTextParagraphStyleProperties.Get_LeftMargin: Integer;
begin
    Result := DefaultInterface.LeftMargin;
end;

procedure TNotesRichTextParagraphStyleProperties.Set_LeftMargin(plValue: Integer);
begin
  DefaultInterface.Set_LeftMargin(plValue);
end;

function TNotesRichTextParagraphStyleProperties.Get_Pagination: RT_PAGINATE;
begin
    Result := DefaultInterface.Pagination;
end;

procedure TNotesRichTextParagraphStyleProperties.Set_Pagination(plValue: RT_PAGINATE);
begin
  DefaultInterface.Set_Pagination(plValue);
end;

function TNotesRichTextParagraphStyleProperties.Get_RightMargin: Integer;
begin
    Result := DefaultInterface.RightMargin;
end;

procedure TNotesRichTextParagraphStyleProperties.Set_RightMargin(plValue: Integer);
begin
  DefaultInterface.Set_RightMargin(plValue);
end;

function TNotesRichTextParagraphStyleProperties.Get_SpacingAbove: SPACING;
begin
    Result := DefaultInterface.SpacingAbove;
end;

procedure TNotesRichTextParagraphStyleProperties.Set_SpacingAbove(plValue: SPACING);
begin
  DefaultInterface.Set_SpacingAbove(plValue);
end;

function TNotesRichTextParagraphStyleProperties.Get_SpacingBelow: SPACING;
begin
    Result := DefaultInterface.SpacingBelow;
end;

procedure TNotesRichTextParagraphStyleProperties.Set_SpacingBelow(plValue: SPACING);
begin
  DefaultInterface.Set_SpacingBelow(plValue);
end;

function TNotesRichTextParagraphStyleProperties.Get_Tabs: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.Tabs;
end;

{$ENDIF}

class function CoNotesRichTextTab.Create: IRichTextTab;
begin
  Result := CreateComObject(CLASS_NotesRichTextTab) as IRichTextTab;
end;

class function CoNotesRichTextTab.CreateRemote(const MachineName: string): IRichTextTab;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NotesRichTextTab) as IRichTextTab;
end;

procedure TNotesRichTextTab.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{29131536-2EED-1069-BF5D-00DD011186B7}';
    IntfIID:   '{29131577-2EED-1069-BF5D-00DD011186B7}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TNotesRichTextTab.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as IRichTextTab;
  end;
end;

procedure TNotesRichTextTab.ConnectTo(svrIntf: IRichTextTab);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TNotesRichTextTab.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TNotesRichTextTab.GetDefaultInterface: IRichTextTab;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TNotesRichTextTab.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TNotesRichTextTabProperties.Create(Self);
{$ENDIF}
end;

destructor TNotesRichTextTab.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TNotesRichTextTab.GetServerProperties: TNotesRichTextTabProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TNotesRichTextTab.Get_Position: Integer;
begin
    Result := DefaultInterface.Position;
end;

function TNotesRichTextTab.Get_type_: RT_TAB;
begin
    Result := DefaultInterface.type_;
end;

procedure TNotesRichTextTab.Clear;
begin
  DefaultInterface.Clear;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TNotesRichTextTabProperties.Create(AServer: TNotesRichTextTab);
begin
  inherited Create;
  FServer := AServer;
end;

function TNotesRichTextTabProperties.GetDefaultInterface: IRichTextTab;
begin
  Result := FServer.DefaultInterface;
end;

function TNotesRichTextTabProperties.Get_Position: Integer;
begin
    Result := DefaultInterface.Position;
end;

function TNotesRichTextTabProperties.Get_type_: RT_TAB;
begin
    Result := DefaultInterface.type_;
end;

{$ENDIF}

class function CoNotesRegistration.Create: IRegistration;
begin
  Result := CreateComObject(CLASS_NotesRegistration) as IRegistration;
end;

class function CoNotesRegistration.CreateRemote(const MachineName: string): IRegistration;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NotesRegistration) as IRegistration;
end;

procedure TNotesRegistration.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{29131537-2EED-1069-BF5D-00DD011186B7}';
    IntfIID:   '{29131572-2EED-1069-BF5D-00DD011186B7}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TNotesRegistration.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as IRegistration;
  end;
end;

procedure TNotesRegistration.ConnectTo(svrIntf: IRegistration);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TNotesRegistration.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TNotesRegistration.GetDefaultInterface: IRegistration;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TNotesRegistration.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TNotesRegistrationProperties.Create(Self);
{$ENDIF}
end;

destructor TNotesRegistration.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TNotesRegistration.GetServerProperties: TNotesRegistrationProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TNotesRegistration.Get_CertifierIDFile: WideString;
begin
    Result := DefaultInterface.CertifierIDFile;
end;

procedure TNotesRegistration.Set_CertifierIDFile(const ppFile: WideString);
  { Warning: The property CertifierIDFile has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CertifierIDFile := ppFile;
end;

function TNotesRegistration.Get_CreateMailDb: WordBool;
begin
    Result := DefaultInterface.CreateMailDb;
end;

procedure TNotesRegistration.Set_CreateMailDb(pbFlag: WordBool);
begin
  DefaultInterface.Set_CreateMailDb(pbFlag);
end;

function TNotesRegistration.Get_Expiration: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.Expiration;
end;

procedure TNotesRegistration.Set_Expiration(pDate: OleVariant);
begin
  DefaultInterface.Set_Expiration(pDate);
end;

function TNotesRegistration.Get_IDType: REG_TYPE;
begin
    Result := DefaultInterface.IDType;
end;

procedure TNotesRegistration.Set_IDType(plType: REG_TYPE);
begin
  DefaultInterface.Set_IDType(plType);
end;

function TNotesRegistration.Get_IsNorthAmerican: WordBool;
begin
    Result := DefaultInterface.IsNorthAmerican;
end;

procedure TNotesRegistration.Set_IsNorthAmerican(pbFlag: WordBool);
begin
  DefaultInterface.Set_IsNorthAmerican(pbFlag);
end;

function TNotesRegistration.Get_MinPasswordLength: Integer;
begin
    Result := DefaultInterface.MinPasswordLength;
end;

procedure TNotesRegistration.Set_MinPasswordLength(plLen: Integer);
begin
  DefaultInterface.Set_MinPasswordLength(plLen);
end;

function TNotesRegistration.Get_OrgUnit: WideString;
begin
    Result := DefaultInterface.OrgUnit;
end;

procedure TNotesRegistration.Set_OrgUnit(const ppUnit: WideString);
  { Warning: The property OrgUnit has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OrgUnit := ppUnit;
end;

function TNotesRegistration.Get_RegistrationLog: WideString;
begin
    Result := DefaultInterface.RegistrationLog;
end;

procedure TNotesRegistration.Set_RegistrationLog(const ppLog: WideString);
  { Warning: The property RegistrationLog has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.RegistrationLog := ppLog;
end;

function TNotesRegistration.Get_RegistrationServer: WideString;
begin
    Result := DefaultInterface.RegistrationServer;
end;

procedure TNotesRegistration.Set_RegistrationServer(const ppServer: WideString);
  { Warning: The property RegistrationServer has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.RegistrationServer := ppServer;
end;

function TNotesRegistration.Get_StoreIDInAddressBook: WordBool;
begin
    Result := DefaultInterface.StoreIDInAddressBook;
end;

procedure TNotesRegistration.Set_StoreIDInAddressBook(pbFlag: WordBool);
begin
  DefaultInterface.Set_StoreIDInAddressBook(pbFlag);
end;

function TNotesRegistration.Get_UpdateAddressBook: WordBool;
begin
    Result := DefaultInterface.UpdateAddressBook;
end;

procedure TNotesRegistration.Set_UpdateAddressBook(pbFlag: WordBool);
begin
  DefaultInterface.Set_UpdateAddressBook(pbFlag);
end;

function TNotesRegistration.Get_CertifierName: WideString;
begin
    Result := DefaultInterface.CertifierName;
end;

procedure TNotesRegistration.Set_CertifierName(const ppCertName: WideString);
  { Warning: The property CertifierName has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CertifierName := ppCertName;
end;

function TNotesRegistration.Get_MailACLManager: WideString;
begin
    Result := DefaultInterface.MailACLManager;
end;

procedure TNotesRegistration.Set_MailACLManager(const ppMailACLManager: WideString);
  { Warning: The property MailACLManager has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.MailACLManager := ppMailACLManager;
end;

function TNotesRegistration.Get_MailInternetAddress: WideString;
begin
    Result := DefaultInterface.MailInternetAddress;
end;

procedure TNotesRegistration.Set_MailInternetAddress(const ppMailInternetAddress: WideString);
  { Warning: The property MailInternetAddress has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.MailInternetAddress := ppMailInternetAddress;
end;

function TNotesRegistration.Get_MailTemplateName: WideString;
begin
    Result := DefaultInterface.MailTemplateName;
end;

procedure TNotesRegistration.Set_MailTemplateName(const ppMailTemplateName: WideString);
  { Warning: The property MailTemplateName has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.MailTemplateName := ppMailTemplateName;
end;

function TNotesRegistration.Get_PolicyName: WideString;
begin
    Result := DefaultInterface.PolicyName;
end;

procedure TNotesRegistration.Set_PolicyName(const ppPolicyName: WideString);
  { Warning: The property PolicyName has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.PolicyName := ppPolicyName;
end;

function TNotesRegistration.Get_RoamingServer: WideString;
begin
    Result := DefaultInterface.RoamingServer;
end;

procedure TNotesRegistration.Set_RoamingServer(const ppRoamingServer: WideString);
  { Warning: The property RoamingServer has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.RoamingServer := ppRoamingServer;
end;

function TNotesRegistration.Get_RoamingSubdir: WideString;
begin
    Result := DefaultInterface.RoamingSubdir;
end;

procedure TNotesRegistration.Set_RoamingSubdir(const ppRoamingSubdir: WideString);
  { Warning: The property RoamingSubdir has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.RoamingSubdir := ppRoamingSubdir;
end;

function TNotesRegistration.Get_ShortName: WideString;
begin
    Result := DefaultInterface.ShortName;
end;

procedure TNotesRegistration.Set_ShortName(const ppShortName: WideString);
  { Warning: The property ShortName has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ShortName := ppShortName;
end;

function TNotesRegistration.Get_EnforceUniqueShortName: WordBool;
begin
    Result := DefaultInterface.EnforceUniqueShortName;
end;

procedure TNotesRegistration.Set_EnforceUniqueShortName(pbEnforceUniqueShortName: WordBool);
begin
  DefaultInterface.Set_EnforceUniqueShortName(pbEnforceUniqueShortName);
end;

function TNotesRegistration.Get_IsRoamingUser: WordBool;
begin
    Result := DefaultInterface.IsRoamingUser;
end;

procedure TNotesRegistration.Set_IsRoamingUser(pbIsRoamingUser: WordBool);
begin
  DefaultInterface.Set_IsRoamingUser(pbIsRoamingUser);
end;

function TNotesRegistration.Get_MailCreateFTIndex: WordBool;
begin
    Result := DefaultInterface.MailCreateFTIndex;
end;

procedure TNotesRegistration.Set_MailCreateFTIndex(pbMailCreateFTIndex: WordBool);
begin
  DefaultInterface.Set_MailCreateFTIndex(pbMailCreateFTIndex);
end;

function TNotesRegistration.Get_NoIDFile: WordBool;
begin
    Result := DefaultInterface.NoIDFile;
end;

procedure TNotesRegistration.Set_NoIDFile(pbNoIDFile: WordBool);
begin
  DefaultInterface.Set_NoIDFile(pbNoIDFile);
end;

function TNotesRegistration.Get_StoreIDInMailfile: WordBool;
begin
    Result := DefaultInterface.StoreIDInMailfile;
end;

procedure TNotesRegistration.Set_StoreIDInMailfile(pbStoreIDInMailfile: WordBool);
begin
  DefaultInterface.Set_StoreIDInMailfile(pbStoreIDInMailfile);
end;

function TNotesRegistration.Get_SynchInternetPassword: WordBool;
begin
    Result := DefaultInterface.SynchInternetPassword;
end;

procedure TNotesRegistration.Set_SynchInternetPassword(pbSynchInternetPassword: WordBool);
begin
  DefaultInterface.Set_SynchInternetPassword(pbSynchInternetPassword);
end;

function TNotesRegistration.Get_UseCertificateAuthority: WordBool;
begin
    Result := DefaultInterface.UseCertificateAuthority;
end;

procedure TNotesRegistration.Set_UseCertificateAuthority(pbUseCertificateAuthority: WordBool);
begin
  DefaultInterface.Set_UseCertificateAuthority(pbUseCertificateAuthority);
end;

function TNotesRegistration.Get_MailOwnerAccess: REG_MAILOWNACL;
begin
    Result := DefaultInterface.MailOwnerAccess;
end;

procedure TNotesRegistration.Set_MailOwnerAccess(plMailOwnerAccess: REG_MAILOWNACL);
begin
  DefaultInterface.Set_MailOwnerAccess(plMailOwnerAccess);
end;

function TNotesRegistration.Get_MailSystem: REG_MAILTYPE;
begin
    Result := DefaultInterface.MailSystem;
end;

procedure TNotesRegistration.Set_MailSystem(plMailSystem: REG_MAILTYPE);
begin
  DefaultInterface.Set_MailSystem(plMailSystem);
end;

function TNotesRegistration.Get_RoamingCleanupSetting: REG_ROAMCLEANUP;
begin
    Result := DefaultInterface.RoamingCleanupSetting;
end;

procedure TNotesRegistration.Set_RoamingCleanupSetting(plRoamingCleanupSetting: REG_ROAMCLEANUP);
begin
  DefaultInterface.Set_RoamingCleanupSetting(plRoamingCleanupSetting);
end;

function TNotesRegistration.Get_MailQuotaSizeLimit: Integer;
begin
    Result := DefaultInterface.MailQuotaSizeLimit;
end;

procedure TNotesRegistration.Set_MailQuotaSizeLimit(plMailQuotaSizeLimit: Integer);
begin
  DefaultInterface.Set_MailQuotaSizeLimit(plMailQuotaSizeLimit);
end;

function TNotesRegistration.Get_MailQuotaWarningThreshold: Integer;
begin
    Result := DefaultInterface.MailQuotaWarningThreshold;
end;

procedure TNotesRegistration.Set_MailQuotaWarningThreshold(plMailQuotaWarningThreshold: Integer);
begin
  DefaultInterface.Set_MailQuotaWarningThreshold(plMailQuotaWarningThreshold);
end;

function TNotesRegistration.Get_RoamingCleanupPeriod: Integer;
begin
    Result := DefaultInterface.RoamingCleanupPeriod;
end;

procedure TNotesRegistration.Set_RoamingCleanupPeriod(plRoamingCleanupPeriod: Integer);
begin
  DefaultInterface.Set_RoamingCleanupPeriod(plRoamingCleanupPeriod);
end;

function TNotesRegistration.Get_GroupList: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.GroupList;
end;

procedure TNotesRegistration.Set_GroupList(pGroupList: OleVariant);
begin
  DefaultInterface.Set_GroupList(pGroupList);
end;

function TNotesRegistration.Get_MailReplicaServers: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.MailReplicaServers;
end;

procedure TNotesRegistration.Set_MailReplicaServers(pMailReplicaServers: OleVariant);
begin
  DefaultInterface.Set_MailReplicaServers(pMailReplicaServers);
end;

function TNotesRegistration.Get_AltOrgUnit: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.AltOrgUnit;
end;

procedure TNotesRegistration.Set_AltOrgUnit(pAltOrgUnit: OleVariant);
begin
  DefaultInterface.Set_AltOrgUnit(pAltOrgUnit);
end;

function TNotesRegistration.Get_AltOrgUnitLang: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.AltOrgUnitLang;
end;

procedure TNotesRegistration.Set_AltOrgUnitLang(pAltOrgUnitLang: OleVariant);
begin
  DefaultInterface.Set_AltOrgUnitLang(pAltOrgUnitLang);
end;

procedure TNotesRegistration.AddCertifierToAddressBook(const pIdfile: WideString; 
                                                       const pPassword: WideString; 
                                                       const pLocation: WideString; 
                                                       const pComment: WideString);
begin
  DefaultInterface.AddCertifierToAddressBook(pIdfile, pPassword, pLocation, pComment);
end;

procedure TNotesRegistration.AddServerToAddressBook(const pIdfile: WideString; 
                                                    const pServer: WideString; 
                                                    const pDomain: WideString; 
                                                    const pUserpw: WideString; 
                                                    const pNetwork: WideString; 
                                                    const pAdminname: WideString; 
                                                    const pTitle: WideString; 
                                                    const pLocation: WideString; 
                                                    const pComment: WideString);
begin
  DefaultInterface.AddServerToAddressBook(pIdfile, pServer, pDomain, pUserpw, pNetwork, pAdminname, 
                                          pTitle, pLocation, pComment);
end;

procedure TNotesRegistration.AddUserProfile(const pUsername: WideString; const pProfile: WideString);
begin
  DefaultInterface.AddUserProfile(pUsername, pProfile);
end;

procedure TNotesRegistration.AddUserToAddressBook(const pIdfile: WideString; 
                                                  const pFullname: WideString; 
                                                  const pLastn: WideString; 
                                                  const pUserpw: WideString; 
                                                  const pFirstn: WideString; 
                                                  const pMiddle: WideString; 
                                                  const pMailserv: WideString; 
                                                  const pMailfilepath: WideString; 
                                                  const pFwdaddr: WideString; 
                                                  const pLocation: WideString; 
                                                  const pComment: WideString);
begin
  DefaultInterface.AddUserToAddressBook(pIdfile, pFullname, pLastn, pUserpw, pFirstn, pMiddle, 
                                        pMailserv, pMailfilepath, pFwdaddr, pLocation, pComment);
end;

procedure TNotesRegistration.CrossCertify(const pIdfile: WideString; const pCertpw: WideString; 
                                          const pComment: WideString);
begin
  DefaultInterface.CrossCertify(pIdfile, pCertpw, pComment);
end;

procedure TNotesRegistration.DeleteIDOnServer(const pUsername: WideString; bIsserverid: WordBool);
begin
  DefaultInterface.DeleteIDOnServer(pUsername, bIsserverid);
end;

procedure TNotesRegistration.GetIDFromServer(const pUsername: WideString; 
                                             const pFilepath: WideString; bIsserverid: WordBool);
begin
  DefaultInterface.GetIDFromServer(pUsername, pFilepath, bIsserverid);
end;

procedure TNotesRegistration.GetUserInfo(const pUsername: WideString; out ppMailserver: WideString; 
                                         out ppMailfile: WideString; out ppMaildomain: WideString; 
                                         out pMailsystem: Integer);
begin
  DefaultInterface.GetUserInfo(pUsername, ppMailserver, ppMailfile, ppMaildomain, pMailsystem, 
                               EmptyParam);
end;

procedure TNotesRegistration.GetUserInfo(const pUsername: WideString; out ppMailserver: WideString; 
                                         out ppMailfile: WideString; out ppMaildomain: WideString; 
                                         out pMailsystem: Integer; out pProfile: OleVariant);
begin
  DefaultInterface.GetUserInfo(pUsername, ppMailserver, ppMailfile, ppMaildomain, pMailsystem, 
                               pProfile);
end;

procedure TNotesRegistration.Recertify(const pIdfile: WideString; const pCertpw: WideString; 
                                       const pComment: WideString);
begin
  DefaultInterface.Recertify(pIdfile, pCertpw, pComment);
end;

procedure TNotesRegistration.RegisterNewCertifier(const pOrg: WideString; 
                                                  const pIdfile: WideString; 
                                                  const pCertpw: WideString; 
                                                  const pCountry: WideString);
begin
  DefaultInterface.RegisterNewCertifier(pOrg, pIdfile, pCertpw, pCountry);
end;

procedure TNotesRegistration.RegisterNewServer(const pServer: WideString; 
                                               const pIdfile: WideString; 
                                               const pDomain: WideString; 
                                               const pServerpw: WideString; 
                                               const pCertpw: WideString; 
                                               const pLocation: WideString; 
                                               const pComment: WideString; 
                                               const pNetwork: WideString; 
                                               const pAdminname: WideString; 
                                               const pTitle: WideString);
begin
  DefaultInterface.RegisterNewServer(pServer, pIdfile, pDomain, pServerpw, pCertpw, pLocation, 
                                     pComment, pNetwork, pAdminname, pTitle);
end;

procedure TNotesRegistration.RegisterNewUser(const pLastn: WideString; const pIdfile: WideString; 
                                             const pServer: WideString; const pFirstn: WideString; 
                                             const pMiddle: WideString; const pCertpw: WideString; 
                                             const pLocation: WideString; 
                                             const pComment: WideString; 
                                             const pMaildbpath: WideString; 
                                             const pForward: WideString; const pUserpw: WideString; 
                                             const pAltName: WideString; 
                                             const pAltLang: WideString; type_: USER_TYPE);
begin
  DefaultInterface.RegisterNewUser(pLastn, pIdfile, pServer, pFirstn, pMiddle, pCertpw, pLocation, 
                                   pComment, pMaildbpath, pForward, pUserpw, pAltName, pAltLang, 
                                   type_);
end;

function TNotesRegistration.SwitchToID(const pIdfile: WideString; const pUserpw: WideString): WideString;
begin
  Result := DefaultInterface.SwitchToID(pIdfile, pUserpw);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TNotesRegistrationProperties.Create(AServer: TNotesRegistration);
begin
  inherited Create;
  FServer := AServer;
end;

function TNotesRegistrationProperties.GetDefaultInterface: IRegistration;
begin
  Result := FServer.DefaultInterface;
end;

function TNotesRegistrationProperties.Get_CertifierIDFile: WideString;
begin
    Result := DefaultInterface.CertifierIDFile;
end;

procedure TNotesRegistrationProperties.Set_CertifierIDFile(const ppFile: WideString);
  { Warning: The property CertifierIDFile has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CertifierIDFile := ppFile;
end;

function TNotesRegistrationProperties.Get_CreateMailDb: WordBool;
begin
    Result := DefaultInterface.CreateMailDb;
end;

procedure TNotesRegistrationProperties.Set_CreateMailDb(pbFlag: WordBool);
begin
  DefaultInterface.Set_CreateMailDb(pbFlag);
end;

function TNotesRegistrationProperties.Get_Expiration: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.Expiration;
end;

procedure TNotesRegistrationProperties.Set_Expiration(pDate: OleVariant);
begin
  DefaultInterface.Set_Expiration(pDate);
end;

function TNotesRegistrationProperties.Get_IDType: REG_TYPE;
begin
    Result := DefaultInterface.IDType;
end;

procedure TNotesRegistrationProperties.Set_IDType(plType: REG_TYPE);
begin
  DefaultInterface.Set_IDType(plType);
end;

function TNotesRegistrationProperties.Get_IsNorthAmerican: WordBool;
begin
    Result := DefaultInterface.IsNorthAmerican;
end;

procedure TNotesRegistrationProperties.Set_IsNorthAmerican(pbFlag: WordBool);
begin
  DefaultInterface.Set_IsNorthAmerican(pbFlag);
end;

function TNotesRegistrationProperties.Get_MinPasswordLength: Integer;
begin
    Result := DefaultInterface.MinPasswordLength;
end;

procedure TNotesRegistrationProperties.Set_MinPasswordLength(plLen: Integer);
begin
  DefaultInterface.Set_MinPasswordLength(plLen);
end;

function TNotesRegistrationProperties.Get_OrgUnit: WideString;
begin
    Result := DefaultInterface.OrgUnit;
end;

procedure TNotesRegistrationProperties.Set_OrgUnit(const ppUnit: WideString);
  { Warning: The property OrgUnit has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OrgUnit := ppUnit;
end;

function TNotesRegistrationProperties.Get_RegistrationLog: WideString;
begin
    Result := DefaultInterface.RegistrationLog;
end;

procedure TNotesRegistrationProperties.Set_RegistrationLog(const ppLog: WideString);
  { Warning: The property RegistrationLog has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.RegistrationLog := ppLog;
end;

function TNotesRegistrationProperties.Get_RegistrationServer: WideString;
begin
    Result := DefaultInterface.RegistrationServer;
end;

procedure TNotesRegistrationProperties.Set_RegistrationServer(const ppServer: WideString);
  { Warning: The property RegistrationServer has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.RegistrationServer := ppServer;
end;

function TNotesRegistrationProperties.Get_StoreIDInAddressBook: WordBool;
begin
    Result := DefaultInterface.StoreIDInAddressBook;
end;

procedure TNotesRegistrationProperties.Set_StoreIDInAddressBook(pbFlag: WordBool);
begin
  DefaultInterface.Set_StoreIDInAddressBook(pbFlag);
end;

function TNotesRegistrationProperties.Get_UpdateAddressBook: WordBool;
begin
    Result := DefaultInterface.UpdateAddressBook;
end;

procedure TNotesRegistrationProperties.Set_UpdateAddressBook(pbFlag: WordBool);
begin
  DefaultInterface.Set_UpdateAddressBook(pbFlag);
end;

function TNotesRegistrationProperties.Get_CertifierName: WideString;
begin
    Result := DefaultInterface.CertifierName;
end;

procedure TNotesRegistrationProperties.Set_CertifierName(const ppCertName: WideString);
  { Warning: The property CertifierName has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CertifierName := ppCertName;
end;

function TNotesRegistrationProperties.Get_MailACLManager: WideString;
begin
    Result := DefaultInterface.MailACLManager;
end;

procedure TNotesRegistrationProperties.Set_MailACLManager(const ppMailACLManager: WideString);
  { Warning: The property MailACLManager has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.MailACLManager := ppMailACLManager;
end;

function TNotesRegistrationProperties.Get_MailInternetAddress: WideString;
begin
    Result := DefaultInterface.MailInternetAddress;
end;

procedure TNotesRegistrationProperties.Set_MailInternetAddress(const ppMailInternetAddress: WideString);
  { Warning: The property MailInternetAddress has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.MailInternetAddress := ppMailInternetAddress;
end;

function TNotesRegistrationProperties.Get_MailTemplateName: WideString;
begin
    Result := DefaultInterface.MailTemplateName;
end;

procedure TNotesRegistrationProperties.Set_MailTemplateName(const ppMailTemplateName: WideString);
  { Warning: The property MailTemplateName has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.MailTemplateName := ppMailTemplateName;
end;

function TNotesRegistrationProperties.Get_PolicyName: WideString;
begin
    Result := DefaultInterface.PolicyName;
end;

procedure TNotesRegistrationProperties.Set_PolicyName(const ppPolicyName: WideString);
  { Warning: The property PolicyName has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.PolicyName := ppPolicyName;
end;

function TNotesRegistrationProperties.Get_RoamingServer: WideString;
begin
    Result := DefaultInterface.RoamingServer;
end;

procedure TNotesRegistrationProperties.Set_RoamingServer(const ppRoamingServer: WideString);
  { Warning: The property RoamingServer has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.RoamingServer := ppRoamingServer;
end;

function TNotesRegistrationProperties.Get_RoamingSubdir: WideString;
begin
    Result := DefaultInterface.RoamingSubdir;
end;

procedure TNotesRegistrationProperties.Set_RoamingSubdir(const ppRoamingSubdir: WideString);
  { Warning: The property RoamingSubdir has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.RoamingSubdir := ppRoamingSubdir;
end;

function TNotesRegistrationProperties.Get_ShortName: WideString;
begin
    Result := DefaultInterface.ShortName;
end;

procedure TNotesRegistrationProperties.Set_ShortName(const ppShortName: WideString);
  { Warning: The property ShortName has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ShortName := ppShortName;
end;

function TNotesRegistrationProperties.Get_EnforceUniqueShortName: WordBool;
begin
    Result := DefaultInterface.EnforceUniqueShortName;
end;

procedure TNotesRegistrationProperties.Set_EnforceUniqueShortName(pbEnforceUniqueShortName: WordBool);
begin
  DefaultInterface.Set_EnforceUniqueShortName(pbEnforceUniqueShortName);
end;

function TNotesRegistrationProperties.Get_IsRoamingUser: WordBool;
begin
    Result := DefaultInterface.IsRoamingUser;
end;

procedure TNotesRegistrationProperties.Set_IsRoamingUser(pbIsRoamingUser: WordBool);
begin
  DefaultInterface.Set_IsRoamingUser(pbIsRoamingUser);
end;

function TNotesRegistrationProperties.Get_MailCreateFTIndex: WordBool;
begin
    Result := DefaultInterface.MailCreateFTIndex;
end;

procedure TNotesRegistrationProperties.Set_MailCreateFTIndex(pbMailCreateFTIndex: WordBool);
begin
  DefaultInterface.Set_MailCreateFTIndex(pbMailCreateFTIndex);
end;

function TNotesRegistrationProperties.Get_NoIDFile: WordBool;
begin
    Result := DefaultInterface.NoIDFile;
end;

procedure TNotesRegistrationProperties.Set_NoIDFile(pbNoIDFile: WordBool);
begin
  DefaultInterface.Set_NoIDFile(pbNoIDFile);
end;

function TNotesRegistrationProperties.Get_StoreIDInMailfile: WordBool;
begin
    Result := DefaultInterface.StoreIDInMailfile;
end;

procedure TNotesRegistrationProperties.Set_StoreIDInMailfile(pbStoreIDInMailfile: WordBool);
begin
  DefaultInterface.Set_StoreIDInMailfile(pbStoreIDInMailfile);
end;

function TNotesRegistrationProperties.Get_SynchInternetPassword: WordBool;
begin
    Result := DefaultInterface.SynchInternetPassword;
end;

procedure TNotesRegistrationProperties.Set_SynchInternetPassword(pbSynchInternetPassword: WordBool);
begin
  DefaultInterface.Set_SynchInternetPassword(pbSynchInternetPassword);
end;

function TNotesRegistrationProperties.Get_UseCertificateAuthority: WordBool;
begin
    Result := DefaultInterface.UseCertificateAuthority;
end;

procedure TNotesRegistrationProperties.Set_UseCertificateAuthority(pbUseCertificateAuthority: WordBool);
begin
  DefaultInterface.Set_UseCertificateAuthority(pbUseCertificateAuthority);
end;

function TNotesRegistrationProperties.Get_MailOwnerAccess: REG_MAILOWNACL;
begin
    Result := DefaultInterface.MailOwnerAccess;
end;

procedure TNotesRegistrationProperties.Set_MailOwnerAccess(plMailOwnerAccess: REG_MAILOWNACL);
begin
  DefaultInterface.Set_MailOwnerAccess(plMailOwnerAccess);
end;

function TNotesRegistrationProperties.Get_MailSystem: REG_MAILTYPE;
begin
    Result := DefaultInterface.MailSystem;
end;

procedure TNotesRegistrationProperties.Set_MailSystem(plMailSystem: REG_MAILTYPE);
begin
  DefaultInterface.Set_MailSystem(plMailSystem);
end;

function TNotesRegistrationProperties.Get_RoamingCleanupSetting: REG_ROAMCLEANUP;
begin
    Result := DefaultInterface.RoamingCleanupSetting;
end;

procedure TNotesRegistrationProperties.Set_RoamingCleanupSetting(plRoamingCleanupSetting: REG_ROAMCLEANUP);
begin
  DefaultInterface.Set_RoamingCleanupSetting(plRoamingCleanupSetting);
end;

function TNotesRegistrationProperties.Get_MailQuotaSizeLimit: Integer;
begin
    Result := DefaultInterface.MailQuotaSizeLimit;
end;

procedure TNotesRegistrationProperties.Set_MailQuotaSizeLimit(plMailQuotaSizeLimit: Integer);
begin
  DefaultInterface.Set_MailQuotaSizeLimit(plMailQuotaSizeLimit);
end;

function TNotesRegistrationProperties.Get_MailQuotaWarningThreshold: Integer;
begin
    Result := DefaultInterface.MailQuotaWarningThreshold;
end;

procedure TNotesRegistrationProperties.Set_MailQuotaWarningThreshold(plMailQuotaWarningThreshold: Integer);
begin
  DefaultInterface.Set_MailQuotaWarningThreshold(plMailQuotaWarningThreshold);
end;

function TNotesRegistrationProperties.Get_RoamingCleanupPeriod: Integer;
begin
    Result := DefaultInterface.RoamingCleanupPeriod;
end;

procedure TNotesRegistrationProperties.Set_RoamingCleanupPeriod(plRoamingCleanupPeriod: Integer);
begin
  DefaultInterface.Set_RoamingCleanupPeriod(plRoamingCleanupPeriod);
end;

function TNotesRegistrationProperties.Get_GroupList: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.GroupList;
end;

procedure TNotesRegistrationProperties.Set_GroupList(pGroupList: OleVariant);
begin
  DefaultInterface.Set_GroupList(pGroupList);
end;

function TNotesRegistrationProperties.Get_MailReplicaServers: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.MailReplicaServers;
end;

procedure TNotesRegistrationProperties.Set_MailReplicaServers(pMailReplicaServers: OleVariant);
begin
  DefaultInterface.Set_MailReplicaServers(pMailReplicaServers);
end;

function TNotesRegistrationProperties.Get_AltOrgUnit: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.AltOrgUnit;
end;

procedure TNotesRegistrationProperties.Set_AltOrgUnit(pAltOrgUnit: OleVariant);
begin
  DefaultInterface.Set_AltOrgUnit(pAltOrgUnit);
end;

function TNotesRegistrationProperties.Get_AltOrgUnitLang: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.AltOrgUnitLang;
end;

procedure TNotesRegistrationProperties.Set_AltOrgUnitLang(pAltOrgUnitLang: OleVariant);
begin
  DefaultInterface.Set_AltOrgUnitLang(pAltOrgUnitLang);
end;

{$ENDIF}

class function CoNotesReplication.Create: IReplication;
begin
  Result := CreateComObject(CLASS_NotesReplication) as IReplication;
end;

class function CoNotesReplication.CreateRemote(const MachineName: string): IReplication;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NotesReplication) as IReplication;
end;

procedure TNotesReplication.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{29131538-2EED-1069-BF5D-00DD011186B7}';
    IntfIID:   '{29131573-2EED-1069-BF5D-00DD011186B7}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TNotesReplication.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as IReplication;
  end;
end;

procedure TNotesReplication.ConnectTo(svrIntf: IReplication);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TNotesReplication.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TNotesReplication.GetDefaultInterface: IReplication;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TNotesReplication.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TNotesReplicationProperties.Create(Self);
{$ENDIF}
end;

destructor TNotesReplication.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TNotesReplication.GetServerProperties: TNotesReplicationProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TNotesReplication.Set_Abstract(pbFlag: WordBool);
begin
  DefaultInterface.Set_Abstract(pbFlag);
end;

function TNotesReplication.Get_Abstract: WordBool;
begin
    Result := DefaultInterface.Abstract;
end;

function TNotesReplication.Get_CutoffDate: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.CutoffDate;
end;

function TNotesReplication.Get_CutoffDelete: WordBool;
begin
    Result := DefaultInterface.CutoffDelete;
end;

procedure TNotesReplication.Set_CutoffDelete(pbFlag: WordBool);
begin
  DefaultInterface.Set_CutoffDelete(pbFlag);
end;

function TNotesReplication.Get_CutoffInterval: Integer;
begin
    Result := DefaultInterface.CutoffInterval;
end;

procedure TNotesReplication.Set_CutoffInterval(plInterval: Integer);
begin
  DefaultInterface.Set_CutoffInterval(plInterval);
end;

procedure TNotesReplication.Set_Disabled(pbFlag: WordBool);
begin
  DefaultInterface.Set_Disabled(pbFlag);
end;

function TNotesReplication.Get_Disabled: WordBool;
begin
    Result := DefaultInterface.Disabled;
end;

procedure TNotesReplication.Set_IgnoreDeletes(pbFlag: WordBool);
begin
  DefaultInterface.Set_IgnoreDeletes(pbFlag);
end;

function TNotesReplication.Get_IgnoreDeletes: WordBool;
begin
    Result := DefaultInterface.IgnoreDeletes;
end;

procedure TNotesReplication.Set_IgnoreDestDeletes(pbFlag: WordBool);
begin
  DefaultInterface.Set_IgnoreDestDeletes(pbFlag);
end;

function TNotesReplication.Get_IgnoreDestDeletes: WordBool;
begin
    Result := DefaultInterface.IgnoreDestDeletes;
end;

function TNotesReplication.Get_Priority: RP_PRIORITY;
begin
    Result := DefaultInterface.Priority;
end;

procedure TNotesReplication.Set_Priority(plPriority: RP_PRIORITY);
begin
  DefaultInterface.Set_Priority(plPriority);
end;

function TNotesReplication.Get_DontSendLocalSecurityUpdates: WordBool;
begin
    Result := DefaultInterface.DontSendLocalSecurityUpdates;
end;

procedure TNotesReplication.Set_DontSendLocalSecurityUpdates(bValue: WordBool);
begin
  DefaultInterface.Set_DontSendLocalSecurityUpdates(bValue);
end;

procedure TNotesReplication.ClearHistory;
begin
  DefaultInterface.ClearHistory;
end;

procedure TNotesReplication.Reset;
begin
  DefaultInterface.Reset;
end;

procedure TNotesReplication.Save;
begin
  DefaultInterface.Save;
end;

function TNotesReplication.GetEntry(const pSourceServer: WideString; 
                                    const pDestinationServer: WideString; bCreate: WordBool): IReplicationEntry;
begin
  Result := DefaultInterface.GetEntry(pSourceServer, pDestinationServer, bCreate);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TNotesReplicationProperties.Create(AServer: TNotesReplication);
begin
  inherited Create;
  FServer := AServer;
end;

function TNotesReplicationProperties.GetDefaultInterface: IReplication;
begin
  Result := FServer.DefaultInterface;
end;

procedure TNotesReplicationProperties.Set_Abstract(pbFlag: WordBool);
begin
  DefaultInterface.Set_Abstract(pbFlag);
end;

function TNotesReplicationProperties.Get_Abstract: WordBool;
begin
    Result := DefaultInterface.Abstract;
end;

function TNotesReplicationProperties.Get_CutoffDate: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.CutoffDate;
end;

function TNotesReplicationProperties.Get_CutoffDelete: WordBool;
begin
    Result := DefaultInterface.CutoffDelete;
end;

procedure TNotesReplicationProperties.Set_CutoffDelete(pbFlag: WordBool);
begin
  DefaultInterface.Set_CutoffDelete(pbFlag);
end;

function TNotesReplicationProperties.Get_CutoffInterval: Integer;
begin
    Result := DefaultInterface.CutoffInterval;
end;

procedure TNotesReplicationProperties.Set_CutoffInterval(plInterval: Integer);
begin
  DefaultInterface.Set_CutoffInterval(plInterval);
end;

procedure TNotesReplicationProperties.Set_Disabled(pbFlag: WordBool);
begin
  DefaultInterface.Set_Disabled(pbFlag);
end;

function TNotesReplicationProperties.Get_Disabled: WordBool;
begin
    Result := DefaultInterface.Disabled;
end;

procedure TNotesReplicationProperties.Set_IgnoreDeletes(pbFlag: WordBool);
begin
  DefaultInterface.Set_IgnoreDeletes(pbFlag);
end;

function TNotesReplicationProperties.Get_IgnoreDeletes: WordBool;
begin
    Result := DefaultInterface.IgnoreDeletes;
end;

procedure TNotesReplicationProperties.Set_IgnoreDestDeletes(pbFlag: WordBool);
begin
  DefaultInterface.Set_IgnoreDestDeletes(pbFlag);
end;

function TNotesReplicationProperties.Get_IgnoreDestDeletes: WordBool;
begin
    Result := DefaultInterface.IgnoreDestDeletes;
end;

function TNotesReplicationProperties.Get_Priority: RP_PRIORITY;
begin
    Result := DefaultInterface.Priority;
end;

procedure TNotesReplicationProperties.Set_Priority(plPriority: RP_PRIORITY);
begin
  DefaultInterface.Set_Priority(plPriority);
end;

function TNotesReplicationProperties.Get_DontSendLocalSecurityUpdates: WordBool;
begin
    Result := DefaultInterface.DontSendLocalSecurityUpdates;
end;

procedure TNotesReplicationProperties.Set_DontSendLocalSecurityUpdates(bValue: WordBool);
begin
  DefaultInterface.Set_DontSendLocalSecurityUpdates(bValue);
end;

{$ENDIF}

class function CoNotesSession.Create: ISession;
begin
  Result := CreateComObject(CLASS_NotesSession) as ISession;
end;

class function CoNotesSession.CreateRemote(const MachineName: string): ISession;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NotesSession) as ISession;
end;

procedure TNotesSession.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{29131539-2EED-1069-BF5D-00DD011186B7}';
    IntfIID:   '{29131578-2EED-1069-BF5D-00DD011186B7}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TNotesSession.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ISession;
  end;
end;

procedure TNotesSession.ConnectTo(svrIntf: ISession);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TNotesSession.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TNotesSession.GetDefaultInterface: ISession;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TNotesSession.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TNotesSessionProperties.Create(Self);
{$ENDIF}
end;

destructor TNotesSession.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TNotesSession.GetServerProperties: TNotesSessionProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TNotesSession.Get_AddressBooks: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.AddressBooks;
end;

function TNotesSession.Get_CommonUserName: WideString;
begin
    Result := DefaultInterface.CommonUserName;
end;

function TNotesSession.Get_CurrentAgent: IAgent;
begin
    Result := DefaultInterface.CurrentAgent;
end;

function TNotesSession.Get_CurrentDatabase: IDatabase;
begin
    Result := DefaultInterface.CurrentDatabase;
end;

function TNotesSession.Get_DocumentContext: IDocument;
begin
    Result := DefaultInterface.DocumentContext;
end;

function TNotesSession.Get_EffectiveUserName: WideString;
begin
    Result := DefaultInterface.EffectiveUserName;
end;

function TNotesSession.Get_HttpURL: WideString;
begin
    Result := DefaultInterface.HttpURL;
end;

function TNotesSession.Get_International: IInternational;
begin
    Result := DefaultInterface.International;
end;

procedure TNotesSession.Set_ConvertMime(pbFlag: WordBool);
begin
  DefaultInterface.Set_ConvertMime(pbFlag);
end;

function TNotesSession.Get_ConvertMime: WordBool;
begin
    Result := DefaultInterface.ConvertMime;
end;

function TNotesSession.Get_IsOnServer: WordBool;
begin
    Result := DefaultInterface.IsOnServer;
end;

function TNotesSession.Get_LastExitStatus: Integer;
begin
    Result := DefaultInterface.LastExitStatus;
end;

function TNotesSession.Get_LastRun: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.LastRun;
end;

function TNotesSession.Get_NotesBuildVersion: Integer;
begin
    Result := DefaultInterface.NotesBuildVersion;
end;

function TNotesSession.Get_NotesURL: WideString;
begin
    Result := DefaultInterface.NotesURL;
end;

function TNotesSession.Get_NotesVersion: WideString;
begin
    Result := DefaultInterface.NotesVersion;
end;

function TNotesSession.Get_Platform: WideString;
begin
    Result := DefaultInterface.Platform;
end;

function TNotesSession.Get_SavedData: IDocument;
begin
    Result := DefaultInterface.SavedData;
end;

function TNotesSession.Get_ServerName: WideString;
begin
    Result := DefaultInterface.ServerName;
end;

function TNotesSession.Get_UserName: WideString;
begin
    Result := DefaultInterface.UserName;
end;

function TNotesSession.Get_UserNameList: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.UserNameList;
end;

function TNotesSession.Get_UserNameObject: IName;
begin
    Result := DefaultInterface.UserNameObject;
end;

function TNotesSession.Get_URLDatabase: IDatabase;
begin
    Result := DefaultInterface.URLDatabase;
end;

function TNotesSession.Get_UserGroupNameList: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.UserGroupNameList;
end;

function TNotesSession.Get_OrgDirectoryPath: WideString;
begin
    Result := DefaultInterface.OrgDirectoryPath;
end;

function TNotesSession.CreateDateRange: IDateRange;
begin
  Result := DefaultInterface.CreateDateRange;
end;

function TNotesSession.CreateDateTime(const pDate: WideString): IDateTime;
begin
  Result := DefaultInterface.CreateDateTime(pDate);
end;

function TNotesSession.CreateLog(const Name: WideString): ILog;
begin
  Result := DefaultInterface.CreateLog(Name);
end;

function TNotesSession.CreateName(const pName: WideString; const pLang: WideString): IName;
begin
  Result := DefaultInterface.CreateName(pName, pLang);
end;

function TNotesSession.CreateNewsletter(const pIDc: IDocumentCollection): INewsletter;
begin
  Result := DefaultInterface.CreateNewsletter(pIDc);
end;

function TNotesSession.CreateRegistration: IRegistration;
begin
  Result := DefaultInterface.CreateRegistration;
end;

function TNotesSession.CreateRichTextParagraphStyle: IRichTextParagraphStyle;
begin
  Result := DefaultInterface.CreateRichTextParagraphStyle;
end;

function TNotesSession.CreateRichTextStyle: IRichTextStyle;
begin
  Result := DefaultInterface.CreateRichTextStyle;
end;

function TNotesSession.Evaluate(const pFormula: WideString; const pIDoc: IDocument): OleVariant;
begin
  Result := DefaultInterface.Evaluate(pFormula, pIDoc);
end;

function TNotesSession.FreeTimeSearch(const pIWindow: IDateRange; iDuration: SYSINT; 
                                      Names: OleVariant; bFirstfit: WordBool): OleVariant;
begin
  Result := DefaultInterface.FreeTimeSearch(pIWindow, iDuration, Names, bFirstfit);
end;

function TNotesSession.GetDatabase(const pServer: WideString; const pFile: WideString; 
                                   bCreateonfail: WordBool): IDatabase;
begin
  Result := DefaultInterface.GetDatabase(pServer, pFile, bCreateonfail);
end;

function TNotesSession.GetDbDirectory(const pServer: WideString): IDbDirectory;
begin
  Result := DefaultInterface.GetDbDirectory(pServer);
end;

function TNotesSession.GetEnvironmentString(const pName: WideString; bisSystem: WordBool): WideString;
begin
  Result := DefaultInterface.GetEnvironmentString(pName, bisSystem);
end;

function TNotesSession.GetEnvironmentValue(const pName: WideString; bisSystem: WordBool): OleVariant;
begin
  Result := DefaultInterface.GetEnvironmentValue(pName, bisSystem);
end;

procedure TNotesSession.Initialize(const pPassword: WideString);
begin
  DefaultInterface.Initialize(pPassword);
end;

procedure TNotesSession.InitializeUsingNotesUserName(const pUser: WideString; 
                                                     const pPassword: WideString);
begin
  DefaultInterface.InitializeUsingNotesUserName(pUser, pPassword);
end;

procedure TNotesSession.SetEnvironmentVar(const pName: WideString; Value: OleVariant; 
                                          bisSystem: WordBool);
begin
  DefaultInterface.SetEnvironmentVar(pName, Value, bisSystem);
end;

procedure TNotesSession.UpdateProcessedDoc(const pIDoc: IDocument);
begin
  DefaultInterface.UpdateProcessedDoc(pIDoc);
end;

function TNotesSession.Resolve(const pURL: WideString): IUnknown;
begin
  Result := DefaultInterface.Resolve(pURL);
end;

function TNotesSession.CreateAdministrationProcess(const pServer: WideString): IAdministrationProcess;
begin
  Result := DefaultInterface.CreateAdministrationProcess(pServer);
end;

function TNotesSession.CreateStream: INotesStream;
begin
  Result := DefaultInterface.CreateStream;
end;

function TNotesSession.SendConsoleCommand(const pServer: WideString; const pCommand: WideString): WideString;
begin
  Result := DefaultInterface.SendConsoleCommand(pServer, pCommand);
end;

function TNotesSession.CreateColorObject: IColorObject;
begin
  Result := DefaultInterface.CreateColorObject;
end;

function TNotesSession.CreateDXLExporter: IDXLExporter;
begin
  Result := DefaultInterface.CreateDXLExporter;
end;

function TNotesSession.CreateDXLImporter: IDXLImporter;
begin
  Result := DefaultInterface.CreateDXLImporter;
end;

function TNotesSession.GetUserPolicySettings(const pServer: WideString; const pName: WideString; 
                                             lType: SESS_POLICY; const pExplicitPolicy: WideString; 
                                             const pReserved: WideString): IDocument;
begin
  Result := DefaultInterface.GetUserPolicySettings(pServer, pName, lType, pExplicitPolicy, pReserved);
end;

function TNotesSession.HashPassword(const pPassword: WideString): WideString;
begin
  Result := DefaultInterface.HashPassword(pPassword);
end;

function TNotesSession.VerifyPassword(const pPassword: WideString; const pHashedPassword: WideString): WordBool;
begin
  Result := DefaultInterface.VerifyPassword(pPassword, pHashedPassword);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TNotesSessionProperties.Create(AServer: TNotesSession);
begin
  inherited Create;
  FServer := AServer;
end;

function TNotesSessionProperties.GetDefaultInterface: ISession;
begin
  Result := FServer.DefaultInterface;
end;

function TNotesSessionProperties.Get_AddressBooks: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.AddressBooks;
end;

function TNotesSessionProperties.Get_CommonUserName: WideString;
begin
    Result := DefaultInterface.CommonUserName;
end;

function TNotesSessionProperties.Get_CurrentAgent: IAgent;
begin
    Result := DefaultInterface.CurrentAgent;
end;

function TNotesSessionProperties.Get_CurrentDatabase: IDatabase;
begin
    Result := DefaultInterface.CurrentDatabase;
end;

function TNotesSessionProperties.Get_DocumentContext: IDocument;
begin
    Result := DefaultInterface.DocumentContext;
end;

function TNotesSessionProperties.Get_EffectiveUserName: WideString;
begin
    Result := DefaultInterface.EffectiveUserName;
end;

function TNotesSessionProperties.Get_HttpURL: WideString;
begin
    Result := DefaultInterface.HttpURL;
end;

function TNotesSessionProperties.Get_International: IInternational;
begin
    Result := DefaultInterface.International;
end;

procedure TNotesSessionProperties.Set_ConvertMime(pbFlag: WordBool);
begin
  DefaultInterface.Set_ConvertMime(pbFlag);
end;

function TNotesSessionProperties.Get_ConvertMime: WordBool;
begin
    Result := DefaultInterface.ConvertMime;
end;

function TNotesSessionProperties.Get_IsOnServer: WordBool;
begin
    Result := DefaultInterface.IsOnServer;
end;

function TNotesSessionProperties.Get_LastExitStatus: Integer;
begin
    Result := DefaultInterface.LastExitStatus;
end;

function TNotesSessionProperties.Get_LastRun: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.LastRun;
end;

function TNotesSessionProperties.Get_NotesBuildVersion: Integer;
begin
    Result := DefaultInterface.NotesBuildVersion;
end;

function TNotesSessionProperties.Get_NotesURL: WideString;
begin
    Result := DefaultInterface.NotesURL;
end;

function TNotesSessionProperties.Get_NotesVersion: WideString;
begin
    Result := DefaultInterface.NotesVersion;
end;

function TNotesSessionProperties.Get_Platform: WideString;
begin
    Result := DefaultInterface.Platform;
end;

function TNotesSessionProperties.Get_SavedData: IDocument;
begin
    Result := DefaultInterface.SavedData;
end;

function TNotesSessionProperties.Get_ServerName: WideString;
begin
    Result := DefaultInterface.ServerName;
end;

function TNotesSessionProperties.Get_UserName: WideString;
begin
    Result := DefaultInterface.UserName;
end;

function TNotesSessionProperties.Get_UserNameList: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.UserNameList;
end;

function TNotesSessionProperties.Get_UserNameObject: IName;
begin
    Result := DefaultInterface.UserNameObject;
end;

function TNotesSessionProperties.Get_URLDatabase: IDatabase;
begin
    Result := DefaultInterface.URLDatabase;
end;

function TNotesSessionProperties.Get_UserGroupNameList: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.UserGroupNameList;
end;

function TNotesSessionProperties.Get_OrgDirectoryPath: WideString;
begin
    Result := DefaultInterface.OrgDirectoryPath;
end;

{$ENDIF}

class function CoNotesView.Create: IView;
begin
  Result := CreateComObject(CLASS_NotesView) as IView;
end;

class function CoNotesView.CreateRemote(const MachineName: string): IView;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NotesView) as IView;
end;

procedure TNotesView.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{2913153A-2EED-1069-BF5D-00DD011186B7}';
    IntfIID:   '{29131579-2EED-1069-BF5D-00DD011186B7}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TNotesView.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as IView;
  end;
end;

procedure TNotesView.ConnectTo(svrIntf: IView);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TNotesView.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TNotesView.GetDefaultInterface: IView;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TNotesView.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TNotesViewProperties.Create(Self);
{$ENDIF}
end;

destructor TNotesView.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TNotesView.GetServerProperties: TNotesViewProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TNotesView.Get_Aliases: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.Aliases;
end;

function TNotesView.Get_AllEntries: IViewEntryCollection;
begin
    Result := DefaultInterface.AllEntries;
end;

function TNotesView.Get_AutoUpdate: WordBool;
begin
    Result := DefaultInterface.AutoUpdate;
end;

procedure TNotesView.Set_AutoUpdate(pbAuto: WordBool);
begin
  DefaultInterface.Set_AutoUpdate(pbAuto);
end;

function TNotesView.Get_BackgroundColor: COLORS;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.BackgroundColor;
end;

function TNotesView.Get_ColumnCount: Integer;
begin
    Result := DefaultInterface.ColumnCount;
end;

function TNotesView.Get_ColumnNames: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.ColumnNames;
end;

function TNotesView.Get_Columns: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.Columns;
end;

function TNotesView.Get_Created: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.Created;
end;

function TNotesView.Get_HeaderLines: Integer;
begin
    Result := DefaultInterface.HeaderLines;
end;

function TNotesView.Get_HttpURL: WideString;
begin
    Result := DefaultInterface.HttpURL;
end;

function TNotesView.Get_IsCalendar: WordBool;
begin
    Result := DefaultInterface.IsCalendar;
end;

function TNotesView.Get_IsCategorized: WordBool;
begin
    Result := DefaultInterface.IsCategorized;
end;

function TNotesView.Get_IsConflict: WordBool;
begin
    Result := DefaultInterface.IsConflict;
end;

function TNotesView.Get_IsDefaultView: WordBool;
begin
    Result := DefaultInterface.IsDefaultView;
end;

function TNotesView.Get_IsFolder: WordBool;
begin
    Result := DefaultInterface.IsFolder;
end;

function TNotesView.Get_IsHierarchical: WordBool;
begin
    Result := DefaultInterface.IsHierarchical;
end;

function TNotesView.Get_IsModified: WordBool;
begin
    Result := DefaultInterface.IsModified;
end;

function TNotesView.Get_IsPrivate: WordBool;
begin
    Result := DefaultInterface.IsPrivate;
end;

function TNotesView.Get_LastModified: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.LastModified;
end;

function TNotesView.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

function TNotesView.Get_NotesURL: WideString;
begin
    Result := DefaultInterface.NotesURL;
end;

function TNotesView.Get_Parent: IDatabase;
begin
    Result := DefaultInterface.Parent;
end;

function TNotesView.Get_ProtectReaders: WordBool;
begin
    Result := DefaultInterface.ProtectReaders;
end;

procedure TNotesView.Set_ProtectReaders(pbReaders: WordBool);
begin
  DefaultInterface.Set_ProtectReaders(pbReaders);
end;

function TNotesView.Get_Readers: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.Readers;
end;

procedure TNotesView.Set_Readers(pReaders: OleVariant);
begin
  DefaultInterface.Set_Readers(pReaders);
end;

function TNotesView.Get_RowLines: Integer;
begin
    Result := DefaultInterface.RowLines;
end;

function TNotesView.Get_SPACING: SPACING;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.SPACING;
end;

function TNotesView.Get_TopLevelEntryCount: Integer;
begin
    Result := DefaultInterface.TopLevelEntryCount;
end;

function TNotesView.Get_UniversalID: WideString;
begin
    Result := DefaultInterface.UniversalID;
end;

procedure TNotesView.Set_Aliases(pAliases: OleVariant);
begin
  DefaultInterface.Set_Aliases(pAliases);
end;

procedure TNotesView.Set_IsProhibitDesignRefresh(bValue: WordBool);
begin
  DefaultInterface.Set_IsProhibitDesignRefresh(bValue);
end;

function TNotesView.Get_IsProhibitDesignRefresh: WordBool;
begin
    Result := DefaultInterface.IsProhibitDesignRefresh;
end;

procedure TNotesView.Set_IsDefaultView(pbDefault: WordBool);
begin
  DefaultInterface.Set_IsDefaultView(pbDefault);
end;

procedure TNotesView.Set_BackgroundColor(plColor: Integer);
  { Warning: The property BackgroundColor has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.BackgroundColor := plColor;
end;

procedure TNotesView.Set_SPACING(plSpacing: Integer);
  { Warning: The property SPACING has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.SPACING := plSpacing;
end;

procedure TNotesView.Set_Name(const ppName: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := ppName;
end;

procedure TNotesView.Set_SelectionFormula(const psValue: WideString);
  { Warning: The property SelectionFormula has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.SelectionFormula := psValue;
end;

function TNotesView.Get_SelectionFormula: WideString;
begin
    Result := DefaultInterface.SelectionFormula;
end;

function TNotesView.Get_EntryCount: Integer;
begin
    Result := DefaultInterface.EntryCount;
end;

function TNotesView.Get_LockHolders: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.LockHolders;
end;

function TNotesView.Get_ViewInheritedName: WideString;
begin
    Result := DefaultInterface.ViewInheritedName;
end;

procedure TNotesView.Clear;
begin
  DefaultInterface.Clear;
end;

function TNotesView.CreateViewNav(lCacheSize: Integer): IViewNavigator;
begin
  Result := DefaultInterface.CreateViewNav(lCacheSize);
end;

function TNotesView.CreateViewNavMaxLevel(lLevel: Integer; lCacheSize: Integer): IViewNavigator;
begin
  Result := DefaultInterface.CreateViewNavMaxLevel(lLevel, lCacheSize);
end;

function TNotesView.CreateViewNavFrom(const pIUnk: IUnknown; lCacheSize: Integer): IViewNavigator;
begin
  Result := DefaultInterface.CreateViewNavFrom(pIUnk, lCacheSize);
end;

function TNotesView.CreateViewNavFromCategory(const pName: WideString; lCacheSize: Integer): IViewNavigator;
begin
  Result := DefaultInterface.CreateViewNavFromCategory(pName, lCacheSize);
end;

function TNotesView.CreateViewNavFromChildren(const pIUnk: IUnknown; lCacheSize: Integer): IViewNavigator;
begin
  Result := DefaultInterface.CreateViewNavFromChildren(pIUnk, lCacheSize);
end;

function TNotesView.CreateViewNavFromDescendants(const pIUnk: IUnknown; lCacheSize: Integer): IViewNavigator;
begin
  Result := DefaultInterface.CreateViewNavFromDescendants(pIUnk, lCacheSize);
end;

function TNotesView.FTSearch(const pQuery: WideString; lMaxDocs: Integer): Integer;
begin
  Result := DefaultInterface.FTSearch(pQuery, lMaxDocs);
end;

function TNotesView.GetAllDocumentsByKey(Keys: OleVariant; bExact: WordBool): IDocumentCollection;
begin
  Result := DefaultInterface.GetAllDocumentsByKey(Keys, bExact);
end;

function TNotesView.GetAllEntriesByKey(Keys: OleVariant; bExact: WordBool): IViewEntryCollection;
begin
  Result := DefaultInterface.GetAllEntriesByKey(Keys, bExact);
end;

function TNotesView.GetChild(const pICurrent: IDocument): IDocument;
begin
  Result := DefaultInterface.GetChild(pICurrent);
end;

function TNotesView.GetColumn(lColumnNumber: Integer): IViewColumn;
begin
  Result := DefaultInterface.GetColumn(lColumnNumber);
end;

function TNotesView.GetDocumentByKey(Keys: OleVariant; bExact: WordBool): IDocument;
begin
  Result := DefaultInterface.GetDocumentByKey(Keys, bExact);
end;

function TNotesView.GetEntryByKey(Keys: OleVariant; bExact: WordBool): IViewEntry;
begin
  Result := DefaultInterface.GetEntryByKey(Keys, bExact);
end;

function TNotesView.GetFirstDocument: IDocument;
begin
  Result := DefaultInterface.GetFirstDocument;
end;

function TNotesView.GetLastDocument: IDocument;
begin
  Result := DefaultInterface.GetLastDocument;
end;

function TNotesView.GetNextDocument(const pICurrent: IDocument): IDocument;
begin
  Result := DefaultInterface.GetNextDocument(pICurrent);
end;

function TNotesView.GetNextSibling(const pICurrent: IDocument): IDocument;
begin
  Result := DefaultInterface.GetNextSibling(pICurrent);
end;

function TNotesView.GetNthDocument(lN: Integer): IDocument;
begin
  Result := DefaultInterface.GetNthDocument(lN);
end;

function TNotesView.GetParentDocument(const pICurrent: IDocument): IDocument;
begin
  Result := DefaultInterface.GetParentDocument(pICurrent);
end;

function TNotesView.GetPrevDocument(const pICurrent: IDocument): IDocument;
begin
  Result := DefaultInterface.GetPrevDocument(pICurrent);
end;

function TNotesView.GetPrevSibling(const pICurrent: IDocument): IDocument;
begin
  Result := DefaultInterface.GetPrevSibling(pICurrent);
end;

procedure TNotesView.Refresh;
begin
  DefaultInterface.Refresh;
end;

procedure TNotesView.Remove;
begin
  DefaultInterface.Remove;
end;

function TNotesView.CreateColumn(pos: Integer; const Name: WideString; const Formula: WideString): IViewColumn;
begin
  Result := DefaultInterface.CreateColumn(pos, Name, Formula);
end;

function TNotesView.CopyColumn(nameIndexObj: OleVariant; dst: Integer): IViewColumn;
begin
  Result := DefaultInterface.CopyColumn(nameIndexObj, dst);
end;

procedure TNotesView.RemoveColumn(nameIndex: OleVariant);
begin
  DefaultInterface.RemoveColumn(nameIndex);
end;

procedure TNotesView.SetAliases(const Aliases: WideString);
begin
  DefaultInterface.SetAliases(Aliases);
end;

function TNotesView.Lock(var pName: OleVariant; bProvisionalOK: WordBool): WordBool;
begin
  Result := DefaultInterface.Lock(pName, bProvisionalOK);
end;

function TNotesView.LockProvisional: WordBool;
begin
  Result := DefaultInterface.LockProvisional(EmptyParam);
end;

function TNotesView.LockProvisional(var pName: OleVariant): WordBool;
begin
  Result := DefaultInterface.LockProvisional(pName);
end;

procedure TNotesView.Unlock;
begin
  DefaultInterface.Unlock;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TNotesViewProperties.Create(AServer: TNotesView);
begin
  inherited Create;
  FServer := AServer;
end;

function TNotesViewProperties.GetDefaultInterface: IView;
begin
  Result := FServer.DefaultInterface;
end;

function TNotesViewProperties.Get_Aliases: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.Aliases;
end;

function TNotesViewProperties.Get_AllEntries: IViewEntryCollection;
begin
    Result := DefaultInterface.AllEntries;
end;

function TNotesViewProperties.Get_AutoUpdate: WordBool;
begin
    Result := DefaultInterface.AutoUpdate;
end;

procedure TNotesViewProperties.Set_AutoUpdate(pbAuto: WordBool);
begin
  DefaultInterface.Set_AutoUpdate(pbAuto);
end;

function TNotesViewProperties.Get_BackgroundColor: COLORS;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.BackgroundColor;
end;

function TNotesViewProperties.Get_ColumnCount: Integer;
begin
    Result := DefaultInterface.ColumnCount;
end;

function TNotesViewProperties.Get_ColumnNames: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.ColumnNames;
end;

function TNotesViewProperties.Get_Columns: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.Columns;
end;

function TNotesViewProperties.Get_Created: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.Created;
end;

function TNotesViewProperties.Get_HeaderLines: Integer;
begin
    Result := DefaultInterface.HeaderLines;
end;

function TNotesViewProperties.Get_HttpURL: WideString;
begin
    Result := DefaultInterface.HttpURL;
end;

function TNotesViewProperties.Get_IsCalendar: WordBool;
begin
    Result := DefaultInterface.IsCalendar;
end;

function TNotesViewProperties.Get_IsCategorized: WordBool;
begin
    Result := DefaultInterface.IsCategorized;
end;

function TNotesViewProperties.Get_IsConflict: WordBool;
begin
    Result := DefaultInterface.IsConflict;
end;

function TNotesViewProperties.Get_IsDefaultView: WordBool;
begin
    Result := DefaultInterface.IsDefaultView;
end;

function TNotesViewProperties.Get_IsFolder: WordBool;
begin
    Result := DefaultInterface.IsFolder;
end;

function TNotesViewProperties.Get_IsHierarchical: WordBool;
begin
    Result := DefaultInterface.IsHierarchical;
end;

function TNotesViewProperties.Get_IsModified: WordBool;
begin
    Result := DefaultInterface.IsModified;
end;

function TNotesViewProperties.Get_IsPrivate: WordBool;
begin
    Result := DefaultInterface.IsPrivate;
end;

function TNotesViewProperties.Get_LastModified: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.LastModified;
end;

function TNotesViewProperties.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

function TNotesViewProperties.Get_NotesURL: WideString;
begin
    Result := DefaultInterface.NotesURL;
end;

function TNotesViewProperties.Get_Parent: IDatabase;
begin
    Result := DefaultInterface.Parent;
end;

function TNotesViewProperties.Get_ProtectReaders: WordBool;
begin
    Result := DefaultInterface.ProtectReaders;
end;

procedure TNotesViewProperties.Set_ProtectReaders(pbReaders: WordBool);
begin
  DefaultInterface.Set_ProtectReaders(pbReaders);
end;

function TNotesViewProperties.Get_Readers: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.Readers;
end;

procedure TNotesViewProperties.Set_Readers(pReaders: OleVariant);
begin
  DefaultInterface.Set_Readers(pReaders);
end;

function TNotesViewProperties.Get_RowLines: Integer;
begin
    Result := DefaultInterface.RowLines;
end;

function TNotesViewProperties.Get_SPACING: SPACING;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.SPACING;
end;

function TNotesViewProperties.Get_TopLevelEntryCount: Integer;
begin
    Result := DefaultInterface.TopLevelEntryCount;
end;

function TNotesViewProperties.Get_UniversalID: WideString;
begin
    Result := DefaultInterface.UniversalID;
end;

procedure TNotesViewProperties.Set_Aliases(pAliases: OleVariant);
begin
  DefaultInterface.Set_Aliases(pAliases);
end;

procedure TNotesViewProperties.Set_IsProhibitDesignRefresh(bValue: WordBool);
begin
  DefaultInterface.Set_IsProhibitDesignRefresh(bValue);
end;

function TNotesViewProperties.Get_IsProhibitDesignRefresh: WordBool;
begin
    Result := DefaultInterface.IsProhibitDesignRefresh;
end;

procedure TNotesViewProperties.Set_IsDefaultView(pbDefault: WordBool);
begin
  DefaultInterface.Set_IsDefaultView(pbDefault);
end;

procedure TNotesViewProperties.Set_BackgroundColor(plColor: Integer);
  { Warning: The property BackgroundColor has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.BackgroundColor := plColor;
end;

procedure TNotesViewProperties.Set_SPACING(plSpacing: Integer);
  { Warning: The property SPACING has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.SPACING := plSpacing;
end;

procedure TNotesViewProperties.Set_Name(const ppName: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := ppName;
end;

procedure TNotesViewProperties.Set_SelectionFormula(const psValue: WideString);
  { Warning: The property SelectionFormula has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.SelectionFormula := psValue;
end;

function TNotesViewProperties.Get_SelectionFormula: WideString;
begin
    Result := DefaultInterface.SelectionFormula;
end;

function TNotesViewProperties.Get_EntryCount: Integer;
begin
    Result := DefaultInterface.EntryCount;
end;

function TNotesViewProperties.Get_LockHolders: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.LockHolders;
end;

function TNotesViewProperties.Get_ViewInheritedName: WideString;
begin
    Result := DefaultInterface.ViewInheritedName;
end;

{$ENDIF}

class function CoNotesViewColumn.Create: IViewColumn;
begin
  Result := CreateComObject(CLASS_NotesViewColumn) as IViewColumn;
end;

class function CoNotesViewColumn.CreateRemote(const MachineName: string): IViewColumn;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NotesViewColumn) as IViewColumn;
end;

procedure TNotesViewColumn.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{2913153B-2EED-1069-BF5D-00DD011186B7}';
    IntfIID:   '{2913157A-2EED-1069-BF5D-00DD011186B7}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TNotesViewColumn.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as IViewColumn;
  end;
end;

procedure TNotesViewColumn.ConnectTo(svrIntf: IViewColumn);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TNotesViewColumn.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TNotesViewColumn.GetDefaultInterface: IViewColumn;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TNotesViewColumn.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TNotesViewColumnProperties.Create(Self);
{$ENDIF}
end;

destructor TNotesViewColumn.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TNotesViewColumn.GetServerProperties: TNotesViewColumnProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TNotesViewColumn.Get_Alignment: VC_ALIGN;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.Alignment;
end;

function TNotesViewColumn.Get_DateFmt: VC_DATEFMT;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.DateFmt;
end;

function TNotesViewColumn.Get_FontColor: COLORS;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.FontColor;
end;

function TNotesViewColumn.Get_FontFace: WideString;
begin
    Result := DefaultInterface.FontFace;
end;

function TNotesViewColumn.Get_FontPointSize: Integer;
begin
    Result := DefaultInterface.FontPointSize;
end;

function TNotesViewColumn.Get_FontStyle: VC_FONTSTYLE;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.FontStyle;
end;

function TNotesViewColumn.Get_Formula: WideString;
begin
    Result := DefaultInterface.Formula;
end;

function TNotesViewColumn.Get_HeaderAlignment: VC_ALIGN;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.HeaderAlignment;
end;

function TNotesViewColumn.Get_IsAccentSensitiveSort: WordBool;
begin
    Result := DefaultInterface.IsAccentSensitiveSort;
end;

function TNotesViewColumn.Get_IsCaseSensitiveSort: WordBool;
begin
    Result := DefaultInterface.IsCaseSensitiveSort;
end;

function TNotesViewColumn.Get_IsCategory: WordBool;
begin
    Result := DefaultInterface.IsCategory;
end;

function TNotesViewColumn.Get_IsField: WordBool;
begin
    Result := DefaultInterface.IsField;
end;

function TNotesViewColumn.Get_IsFormula: WordBool;
begin
    Result := DefaultInterface.IsFormula;
end;

function TNotesViewColumn.Get_IsHidden: WordBool;
begin
    Result := DefaultInterface.IsHidden;
end;

function TNotesViewColumn.Get_IsHideDetail: WordBool;
begin
    Result := DefaultInterface.IsHideDetail;
end;

function TNotesViewColumn.Get_IsIcon: WordBool;
begin
    Result := DefaultInterface.IsIcon;
end;

function TNotesViewColumn.Get_IsResize: WordBool;
begin
    Result := DefaultInterface.IsResize;
end;

function TNotesViewColumn.Get_IsResortAscending: WordBool;
begin
    Result := DefaultInterface.IsResortAscending;
end;

function TNotesViewColumn.Get_IsResortDescending: WordBool;
begin
    Result := DefaultInterface.IsResortDescending;
end;

function TNotesViewColumn.Get_IsResortToView: WordBool;
begin
    Result := DefaultInterface.IsResortToView;
end;

function TNotesViewColumn.Get_IsResponse: WordBool;
begin
    Result := DefaultInterface.IsResponse;
end;

function TNotesViewColumn.Get_IsSecondaryResort: WordBool;
begin
    Result := DefaultInterface.IsSecondaryResort;
end;

function TNotesViewColumn.Get_IsSecondaryResortDescending: WordBool;
begin
    Result := DefaultInterface.IsSecondaryResortDescending;
end;

function TNotesViewColumn.Get_IsShowTwistie: WordBool;
begin
    Result := DefaultInterface.IsShowTwistie;
end;

function TNotesViewColumn.Get_IsSortDescending: WordBool;
begin
    Result := DefaultInterface.IsSortDescending;
end;

function TNotesViewColumn.Get_IsSorted: WordBool;
begin
    Result := DefaultInterface.IsSorted;
end;

function TNotesViewColumn.Get_ItemName: WideString;
begin
    Result := DefaultInterface.ItemName;
end;

function TNotesViewColumn.Get_ListSep: VC_SEP;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.ListSep;
end;

function TNotesViewColumn.Get_NumberAttrib: VC_NUMATTR;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.NumberAttrib;
end;

function TNotesViewColumn.Get_NumberDigits: Integer;
begin
    Result := DefaultInterface.NumberDigits;
end;

function TNotesViewColumn.Get_NumberFormat: VC_NUMFMT;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.NumberFormat;
end;

function TNotesViewColumn.Get_Parent: IView;
begin
    Result := DefaultInterface.Parent;
end;

function TNotesViewColumn.Get_Position: Integer;
begin
    Result := DefaultInterface.Position;
end;

function TNotesViewColumn.Get_TimeDateFmt: VC_TDFMT;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.TimeDateFmt;
end;

function TNotesViewColumn.Get_TimeFmt: VC_TIMEFMT;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.TimeFmt;
end;

function TNotesViewColumn.Get_TimeZoneFmt: VC_TIMEZONEFMT;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.TimeZoneFmt;
end;

function TNotesViewColumn.Get_Title: WideString;
begin
    Result := DefaultInterface.Title;
end;

function TNotesViewColumn.Get_Width: Integer;
begin
    Result := DefaultInterface.Width;
end;

function TNotesViewColumn.Get_HeaderFontColor: Integer;
begin
    Result := DefaultInterface.HeaderFontColor;
end;

function TNotesViewColumn.Get_HeaderFontFace: WideString;
begin
    Result := DefaultInterface.HeaderFontFace;
end;

function TNotesViewColumn.Get_HeaderFontPointSize: Integer;
begin
    Result := DefaultInterface.HeaderFontPointSize;
end;

function TNotesViewColumn.Get_HeaderFontStyle: Integer;
begin
    Result := DefaultInterface.HeaderFontStyle;
end;

function TNotesViewColumn.Get_SecondaryResortColumnIndex: Integer;
begin
    Result := DefaultInterface.SecondaryResortColumnIndex;
end;

function TNotesViewColumn.Get_IsFontBold: WordBool;
begin
    Result := DefaultInterface.IsFontBold;
end;

function TNotesViewColumn.Get_IsFontItalic: WordBool;
begin
    Result := DefaultInterface.IsFontItalic;
end;

function TNotesViewColumn.Get_IsFontUnderline: WordBool;
begin
    Result := DefaultInterface.IsFontUnderline;
end;

function TNotesViewColumn.Get_IsFontStrikethrough: WordBool;
begin
    Result := DefaultInterface.IsFontStrikethrough;
end;

function TNotesViewColumn.Get_IsHeaderFontBold: WordBool;
begin
    Result := DefaultInterface.IsHeaderFontBold;
end;

function TNotesViewColumn.Get_IsHeaderFontItalic: WordBool;
begin
    Result := DefaultInterface.IsHeaderFontItalic;
end;

function TNotesViewColumn.Get_IsHeaderFontUnderline: WordBool;
begin
    Result := DefaultInterface.IsHeaderFontUnderline;
end;

function TNotesViewColumn.Get_IsHeaderFontStrikethrough: WordBool;
begin
    Result := DefaultInterface.IsHeaderFontStrikethrough;
end;

function TNotesViewColumn.Get_IsNumberAttribParens: WordBool;
begin
    Result := DefaultInterface.IsNumberAttribParens;
end;

function TNotesViewColumn.Get_IsNumberAttribPunctuated: WordBool;
begin
    Result := DefaultInterface.IsNumberAttribPunctuated;
end;

function TNotesViewColumn.Get_IsNumberAttribPercent: WordBool;
begin
    Result := DefaultInterface.IsNumberAttribPercent;
end;

function TNotesViewColumn.Get_ResortToViewName: WideString;
begin
    Result := DefaultInterface.ResortToViewName;
end;

procedure TNotesViewColumn.Set_Alignment(plVal: Integer);
  { Warning: The property Alignment has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Alignment := plVal;
end;

procedure TNotesViewColumn.Set_DateFmt(plVal: Integer);
  { Warning: The property DateFmt has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DateFmt := plVal;
end;

procedure TNotesViewColumn.Set_FontColor(plVal: Integer);
  { Warning: The property FontColor has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.FontColor := plVal;
end;

procedure TNotesViewColumn.Set_FontFace(const ppResult: WideString);
  { Warning: The property FontFace has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.FontFace := ppResult;
end;

procedure TNotesViewColumn.Set_FontPointSize(plVal: Integer);
begin
  DefaultInterface.Set_FontPointSize(plVal);
end;

procedure TNotesViewColumn.Set_FontStyle(plVal: Integer);
  { Warning: The property FontStyle has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.FontStyle := plVal;
end;

procedure TNotesViewColumn.Set_Formula(const ppResult: WideString);
  { Warning: The property Formula has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Formula := ppResult;
end;

procedure TNotesViewColumn.Set_HeaderAlignment(plVal: Integer);
  { Warning: The property HeaderAlignment has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.HeaderAlignment := plVal;
end;

procedure TNotesViewColumn.Set_IsAccentSensitiveSort(pbFlag: WordBool);
begin
  DefaultInterface.Set_IsAccentSensitiveSort(pbFlag);
end;

procedure TNotesViewColumn.Set_IsCaseSensitiveSort(pbFlag: WordBool);
begin
  DefaultInterface.Set_IsCaseSensitiveSort(pbFlag);
end;

procedure TNotesViewColumn.Set_IsHidden(pbFlag: WordBool);
begin
  DefaultInterface.Set_IsHidden(pbFlag);
end;

procedure TNotesViewColumn.Set_IsHideDetail(pbFlag: WordBool);
begin
  DefaultInterface.Set_IsHideDetail(pbFlag);
end;

procedure TNotesViewColumn.Set_IsResize(pbFlag: WordBool);
begin
  DefaultInterface.Set_IsResize(pbFlag);
end;

procedure TNotesViewColumn.Set_IsResortAscending(pbFlag: WordBool);
begin
  DefaultInterface.Set_IsResortAscending(pbFlag);
end;

procedure TNotesViewColumn.Set_IsResortDescending(pbFlag: WordBool);
begin
  DefaultInterface.Set_IsResortDescending(pbFlag);
end;

procedure TNotesViewColumn.Set_IsResortToView(pbFlag: WordBool);
begin
  DefaultInterface.Set_IsResortToView(pbFlag);
end;

procedure TNotesViewColumn.Set_IsSecondaryResort(pbFlag: WordBool);
begin
  DefaultInterface.Set_IsSecondaryResort(pbFlag);
end;

procedure TNotesViewColumn.Set_IsSecondaryResortDescending(pbFlag: WordBool);
begin
  DefaultInterface.Set_IsSecondaryResortDescending(pbFlag);
end;

procedure TNotesViewColumn.Set_IsShowTwistie(pbFlag: WordBool);
begin
  DefaultInterface.Set_IsShowTwistie(pbFlag);
end;

procedure TNotesViewColumn.Set_IsSortDescending(pbFlag: WordBool);
begin
  DefaultInterface.Set_IsSortDescending(pbFlag);
end;

procedure TNotesViewColumn.Set_IsSorted(pbFlag: WordBool);
begin
  DefaultInterface.Set_IsSorted(pbFlag);
end;

procedure TNotesViewColumn.Set_ListSep(plVal: Integer);
  { Warning: The property ListSep has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ListSep := plVal;
end;

procedure TNotesViewColumn.Set_NumberAttrib(plVal: Integer);
  { Warning: The property NumberAttrib has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.NumberAttrib := plVal;
end;

procedure TNotesViewColumn.Set_NumberDigits(plVal: Integer);
begin
  DefaultInterface.Set_NumberDigits(plVal);
end;

procedure TNotesViewColumn.Set_NumberFormat(plVal: Integer);
  { Warning: The property NumberFormat has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.NumberFormat := plVal;
end;

procedure TNotesViewColumn.Set_Position(plVal: Integer);
begin
  DefaultInterface.Set_Position(plVal);
end;

procedure TNotesViewColumn.Set_TimeDateFmt(plVal: Integer);
  { Warning: The property TimeDateFmt has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.TimeDateFmt := plVal;
end;

procedure TNotesViewColumn.Set_TimeFmt(plVal: Integer);
  { Warning: The property TimeFmt has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.TimeFmt := plVal;
end;

procedure TNotesViewColumn.Set_TimeZoneFmt(plVal: Integer);
  { Warning: The property TimeZoneFmt has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.TimeZoneFmt := plVal;
end;

procedure TNotesViewColumn.Set_Title(const ppResult: WideString);
  { Warning: The property Title has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Title := ppResult;
end;

procedure TNotesViewColumn.Set_Width(plVal: Integer);
begin
  DefaultInterface.Set_Width(plVal);
end;

procedure TNotesViewColumn.Set_HeaderFontColor(plVal: Integer);
begin
  DefaultInterface.Set_HeaderFontColor(plVal);
end;

procedure TNotesViewColumn.Set_HeaderFontFace(const ppResult: WideString);
  { Warning: The property HeaderFontFace has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.HeaderFontFace := ppResult;
end;

procedure TNotesViewColumn.Set_HeaderFontPointSize(plVal: Integer);
begin
  DefaultInterface.Set_HeaderFontPointSize(plVal);
end;

procedure TNotesViewColumn.Set_HeaderFontStyle(plVal: Integer);
begin
  DefaultInterface.Set_HeaderFontStyle(plVal);
end;

procedure TNotesViewColumn.Set_SecondaryResortColumnIndex(plVal: Integer);
begin
  DefaultInterface.Set_SecondaryResortColumnIndex(plVal);
end;

procedure TNotesViewColumn.Set_IsFontBold(pbFlag: WordBool);
begin
  DefaultInterface.Set_IsFontBold(pbFlag);
end;

procedure TNotesViewColumn.Set_IsFontItalic(pbFlag: WordBool);
begin
  DefaultInterface.Set_IsFontItalic(pbFlag);
end;

procedure TNotesViewColumn.Set_IsFontUnderline(pbFlag: WordBool);
begin
  DefaultInterface.Set_IsFontUnderline(pbFlag);
end;

procedure TNotesViewColumn.Set_IsFontStrikethrough(pbFlag: WordBool);
begin
  DefaultInterface.Set_IsFontStrikethrough(pbFlag);
end;

procedure TNotesViewColumn.Set_IsHeaderFontBold(pbFlag: WordBool);
begin
  DefaultInterface.Set_IsHeaderFontBold(pbFlag);
end;

procedure TNotesViewColumn.Set_IsHeaderFontItalic(pbFlag: WordBool);
begin
  DefaultInterface.Set_IsHeaderFontItalic(pbFlag);
end;

procedure TNotesViewColumn.Set_IsHeaderFontUnderline(pbFlag: WordBool);
begin
  DefaultInterface.Set_IsHeaderFontUnderline(pbFlag);
end;

procedure TNotesViewColumn.Set_IsHeaderFontStrikethrough(pbFlag: WordBool);
begin
  DefaultInterface.Set_IsHeaderFontStrikethrough(pbFlag);
end;

procedure TNotesViewColumn.Set_IsNumberAttribParens(pbFlag: WordBool);
begin
  DefaultInterface.Set_IsNumberAttribParens(pbFlag);
end;

procedure TNotesViewColumn.Set_IsNumberAttribPunctuated(pbFlag: WordBool);
begin
  DefaultInterface.Set_IsNumberAttribPunctuated(pbFlag);
end;

procedure TNotesViewColumn.Set_IsNumberAttribPercent(pbFlag: WordBool);
begin
  DefaultInterface.Set_IsNumberAttribPercent(pbFlag);
end;

procedure TNotesViewColumn.Set_ResortToViewName(const ppResult: WideString);
  { Warning: The property ResortToViewName has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ResortToViewName := ppResult;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TNotesViewColumnProperties.Create(AServer: TNotesViewColumn);
begin
  inherited Create;
  FServer := AServer;
end;

function TNotesViewColumnProperties.GetDefaultInterface: IViewColumn;
begin
  Result := FServer.DefaultInterface;
end;

function TNotesViewColumnProperties.Get_Alignment: VC_ALIGN;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.Alignment;
end;

function TNotesViewColumnProperties.Get_DateFmt: VC_DATEFMT;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.DateFmt;
end;

function TNotesViewColumnProperties.Get_FontColor: COLORS;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.FontColor;
end;

function TNotesViewColumnProperties.Get_FontFace: WideString;
begin
    Result := DefaultInterface.FontFace;
end;

function TNotesViewColumnProperties.Get_FontPointSize: Integer;
begin
    Result := DefaultInterface.FontPointSize;
end;

function TNotesViewColumnProperties.Get_FontStyle: VC_FONTSTYLE;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.FontStyle;
end;

function TNotesViewColumnProperties.Get_Formula: WideString;
begin
    Result := DefaultInterface.Formula;
end;

function TNotesViewColumnProperties.Get_HeaderAlignment: VC_ALIGN;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.HeaderAlignment;
end;

function TNotesViewColumnProperties.Get_IsAccentSensitiveSort: WordBool;
begin
    Result := DefaultInterface.IsAccentSensitiveSort;
end;

function TNotesViewColumnProperties.Get_IsCaseSensitiveSort: WordBool;
begin
    Result := DefaultInterface.IsCaseSensitiveSort;
end;

function TNotesViewColumnProperties.Get_IsCategory: WordBool;
begin
    Result := DefaultInterface.IsCategory;
end;

function TNotesViewColumnProperties.Get_IsField: WordBool;
begin
    Result := DefaultInterface.IsField;
end;

function TNotesViewColumnProperties.Get_IsFormula: WordBool;
begin
    Result := DefaultInterface.IsFormula;
end;

function TNotesViewColumnProperties.Get_IsHidden: WordBool;
begin
    Result := DefaultInterface.IsHidden;
end;

function TNotesViewColumnProperties.Get_IsHideDetail: WordBool;
begin
    Result := DefaultInterface.IsHideDetail;
end;

function TNotesViewColumnProperties.Get_IsIcon: WordBool;
begin
    Result := DefaultInterface.IsIcon;
end;

function TNotesViewColumnProperties.Get_IsResize: WordBool;
begin
    Result := DefaultInterface.IsResize;
end;

function TNotesViewColumnProperties.Get_IsResortAscending: WordBool;
begin
    Result := DefaultInterface.IsResortAscending;
end;

function TNotesViewColumnProperties.Get_IsResortDescending: WordBool;
begin
    Result := DefaultInterface.IsResortDescending;
end;

function TNotesViewColumnProperties.Get_IsResortToView: WordBool;
begin
    Result := DefaultInterface.IsResortToView;
end;

function TNotesViewColumnProperties.Get_IsResponse: WordBool;
begin
    Result := DefaultInterface.IsResponse;
end;

function TNotesViewColumnProperties.Get_IsSecondaryResort: WordBool;
begin
    Result := DefaultInterface.IsSecondaryResort;
end;

function TNotesViewColumnProperties.Get_IsSecondaryResortDescending: WordBool;
begin
    Result := DefaultInterface.IsSecondaryResortDescending;
end;

function TNotesViewColumnProperties.Get_IsShowTwistie: WordBool;
begin
    Result := DefaultInterface.IsShowTwistie;
end;

function TNotesViewColumnProperties.Get_IsSortDescending: WordBool;
begin
    Result := DefaultInterface.IsSortDescending;
end;

function TNotesViewColumnProperties.Get_IsSorted: WordBool;
begin
    Result := DefaultInterface.IsSorted;
end;

function TNotesViewColumnProperties.Get_ItemName: WideString;
begin
    Result := DefaultInterface.ItemName;
end;

function TNotesViewColumnProperties.Get_ListSep: VC_SEP;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.ListSep;
end;

function TNotesViewColumnProperties.Get_NumberAttrib: VC_NUMATTR;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.NumberAttrib;
end;

function TNotesViewColumnProperties.Get_NumberDigits: Integer;
begin
    Result := DefaultInterface.NumberDigits;
end;

function TNotesViewColumnProperties.Get_NumberFormat: VC_NUMFMT;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.NumberFormat;
end;

function TNotesViewColumnProperties.Get_Parent: IView;
begin
    Result := DefaultInterface.Parent;
end;

function TNotesViewColumnProperties.Get_Position: Integer;
begin
    Result := DefaultInterface.Position;
end;

function TNotesViewColumnProperties.Get_TimeDateFmt: VC_TDFMT;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.TimeDateFmt;
end;

function TNotesViewColumnProperties.Get_TimeFmt: VC_TIMEFMT;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.TimeFmt;
end;

function TNotesViewColumnProperties.Get_TimeZoneFmt: VC_TIMEZONEFMT;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.TimeZoneFmt;
end;

function TNotesViewColumnProperties.Get_Title: WideString;
begin
    Result := DefaultInterface.Title;
end;

function TNotesViewColumnProperties.Get_Width: Integer;
begin
    Result := DefaultInterface.Width;
end;

function TNotesViewColumnProperties.Get_HeaderFontColor: Integer;
begin
    Result := DefaultInterface.HeaderFontColor;
end;

function TNotesViewColumnProperties.Get_HeaderFontFace: WideString;
begin
    Result := DefaultInterface.HeaderFontFace;
end;

function TNotesViewColumnProperties.Get_HeaderFontPointSize: Integer;
begin
    Result := DefaultInterface.HeaderFontPointSize;
end;

function TNotesViewColumnProperties.Get_HeaderFontStyle: Integer;
begin
    Result := DefaultInterface.HeaderFontStyle;
end;

function TNotesViewColumnProperties.Get_SecondaryResortColumnIndex: Integer;
begin
    Result := DefaultInterface.SecondaryResortColumnIndex;
end;

function TNotesViewColumnProperties.Get_IsFontBold: WordBool;
begin
    Result := DefaultInterface.IsFontBold;
end;

function TNotesViewColumnProperties.Get_IsFontItalic: WordBool;
begin
    Result := DefaultInterface.IsFontItalic;
end;

function TNotesViewColumnProperties.Get_IsFontUnderline: WordBool;
begin
    Result := DefaultInterface.IsFontUnderline;
end;

function TNotesViewColumnProperties.Get_IsFontStrikethrough: WordBool;
begin
    Result := DefaultInterface.IsFontStrikethrough;
end;

function TNotesViewColumnProperties.Get_IsHeaderFontBold: WordBool;
begin
    Result := DefaultInterface.IsHeaderFontBold;
end;

function TNotesViewColumnProperties.Get_IsHeaderFontItalic: WordBool;
begin
    Result := DefaultInterface.IsHeaderFontItalic;
end;

function TNotesViewColumnProperties.Get_IsHeaderFontUnderline: WordBool;
begin
    Result := DefaultInterface.IsHeaderFontUnderline;
end;

function TNotesViewColumnProperties.Get_IsHeaderFontStrikethrough: WordBool;
begin
    Result := DefaultInterface.IsHeaderFontStrikethrough;
end;

function TNotesViewColumnProperties.Get_IsNumberAttribParens: WordBool;
begin
    Result := DefaultInterface.IsNumberAttribParens;
end;

function TNotesViewColumnProperties.Get_IsNumberAttribPunctuated: WordBool;
begin
    Result := DefaultInterface.IsNumberAttribPunctuated;
end;

function TNotesViewColumnProperties.Get_IsNumberAttribPercent: WordBool;
begin
    Result := DefaultInterface.IsNumberAttribPercent;
end;

function TNotesViewColumnProperties.Get_ResortToViewName: WideString;
begin
    Result := DefaultInterface.ResortToViewName;
end;

procedure TNotesViewColumnProperties.Set_Alignment(plVal: Integer);
  { Warning: The property Alignment has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Alignment := plVal;
end;

procedure TNotesViewColumnProperties.Set_DateFmt(plVal: Integer);
  { Warning: The property DateFmt has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DateFmt := plVal;
end;

procedure TNotesViewColumnProperties.Set_FontColor(plVal: Integer);
  { Warning: The property FontColor has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.FontColor := plVal;
end;

procedure TNotesViewColumnProperties.Set_FontFace(const ppResult: WideString);
  { Warning: The property FontFace has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.FontFace := ppResult;
end;

procedure TNotesViewColumnProperties.Set_FontPointSize(plVal: Integer);
begin
  DefaultInterface.Set_FontPointSize(plVal);
end;

procedure TNotesViewColumnProperties.Set_FontStyle(plVal: Integer);
  { Warning: The property FontStyle has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.FontStyle := plVal;
end;

procedure TNotesViewColumnProperties.Set_Formula(const ppResult: WideString);
  { Warning: The property Formula has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Formula := ppResult;
end;

procedure TNotesViewColumnProperties.Set_HeaderAlignment(plVal: Integer);
  { Warning: The property HeaderAlignment has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.HeaderAlignment := plVal;
end;

procedure TNotesViewColumnProperties.Set_IsAccentSensitiveSort(pbFlag: WordBool);
begin
  DefaultInterface.Set_IsAccentSensitiveSort(pbFlag);
end;

procedure TNotesViewColumnProperties.Set_IsCaseSensitiveSort(pbFlag: WordBool);
begin
  DefaultInterface.Set_IsCaseSensitiveSort(pbFlag);
end;

procedure TNotesViewColumnProperties.Set_IsHidden(pbFlag: WordBool);
begin
  DefaultInterface.Set_IsHidden(pbFlag);
end;

procedure TNotesViewColumnProperties.Set_IsHideDetail(pbFlag: WordBool);
begin
  DefaultInterface.Set_IsHideDetail(pbFlag);
end;

procedure TNotesViewColumnProperties.Set_IsResize(pbFlag: WordBool);
begin
  DefaultInterface.Set_IsResize(pbFlag);
end;

procedure TNotesViewColumnProperties.Set_IsResortAscending(pbFlag: WordBool);
begin
  DefaultInterface.Set_IsResortAscending(pbFlag);
end;

procedure TNotesViewColumnProperties.Set_IsResortDescending(pbFlag: WordBool);
begin
  DefaultInterface.Set_IsResortDescending(pbFlag);
end;

procedure TNotesViewColumnProperties.Set_IsResortToView(pbFlag: WordBool);
begin
  DefaultInterface.Set_IsResortToView(pbFlag);
end;

procedure TNotesViewColumnProperties.Set_IsSecondaryResort(pbFlag: WordBool);
begin
  DefaultInterface.Set_IsSecondaryResort(pbFlag);
end;

procedure TNotesViewColumnProperties.Set_IsSecondaryResortDescending(pbFlag: WordBool);
begin
  DefaultInterface.Set_IsSecondaryResortDescending(pbFlag);
end;

procedure TNotesViewColumnProperties.Set_IsShowTwistie(pbFlag: WordBool);
begin
  DefaultInterface.Set_IsShowTwistie(pbFlag);
end;

procedure TNotesViewColumnProperties.Set_IsSortDescending(pbFlag: WordBool);
begin
  DefaultInterface.Set_IsSortDescending(pbFlag);
end;

procedure TNotesViewColumnProperties.Set_IsSorted(pbFlag: WordBool);
begin
  DefaultInterface.Set_IsSorted(pbFlag);
end;

procedure TNotesViewColumnProperties.Set_ListSep(plVal: Integer);
  { Warning: The property ListSep has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ListSep := plVal;
end;

procedure TNotesViewColumnProperties.Set_NumberAttrib(plVal: Integer);
  { Warning: The property NumberAttrib has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.NumberAttrib := plVal;
end;

procedure TNotesViewColumnProperties.Set_NumberDigits(plVal: Integer);
begin
  DefaultInterface.Set_NumberDigits(plVal);
end;

procedure TNotesViewColumnProperties.Set_NumberFormat(plVal: Integer);
  { Warning: The property NumberFormat has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.NumberFormat := plVal;
end;

procedure TNotesViewColumnProperties.Set_Position(plVal: Integer);
begin
  DefaultInterface.Set_Position(plVal);
end;

procedure TNotesViewColumnProperties.Set_TimeDateFmt(plVal: Integer);
  { Warning: The property TimeDateFmt has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.TimeDateFmt := plVal;
end;

procedure TNotesViewColumnProperties.Set_TimeFmt(plVal: Integer);
  { Warning: The property TimeFmt has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.TimeFmt := plVal;
end;

procedure TNotesViewColumnProperties.Set_TimeZoneFmt(plVal: Integer);
  { Warning: The property TimeZoneFmt has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.TimeZoneFmt := plVal;
end;

procedure TNotesViewColumnProperties.Set_Title(const ppResult: WideString);
  { Warning: The property Title has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Title := ppResult;
end;

procedure TNotesViewColumnProperties.Set_Width(plVal: Integer);
begin
  DefaultInterface.Set_Width(plVal);
end;

procedure TNotesViewColumnProperties.Set_HeaderFontColor(plVal: Integer);
begin
  DefaultInterface.Set_HeaderFontColor(plVal);
end;

procedure TNotesViewColumnProperties.Set_HeaderFontFace(const ppResult: WideString);
  { Warning: The property HeaderFontFace has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.HeaderFontFace := ppResult;
end;

procedure TNotesViewColumnProperties.Set_HeaderFontPointSize(plVal: Integer);
begin
  DefaultInterface.Set_HeaderFontPointSize(plVal);
end;

procedure TNotesViewColumnProperties.Set_HeaderFontStyle(plVal: Integer);
begin
  DefaultInterface.Set_HeaderFontStyle(plVal);
end;

procedure TNotesViewColumnProperties.Set_SecondaryResortColumnIndex(plVal: Integer);
begin
  DefaultInterface.Set_SecondaryResortColumnIndex(plVal);
end;

procedure TNotesViewColumnProperties.Set_IsFontBold(pbFlag: WordBool);
begin
  DefaultInterface.Set_IsFontBold(pbFlag);
end;

procedure TNotesViewColumnProperties.Set_IsFontItalic(pbFlag: WordBool);
begin
  DefaultInterface.Set_IsFontItalic(pbFlag);
end;

procedure TNotesViewColumnProperties.Set_IsFontUnderline(pbFlag: WordBool);
begin
  DefaultInterface.Set_IsFontUnderline(pbFlag);
end;

procedure TNotesViewColumnProperties.Set_IsFontStrikethrough(pbFlag: WordBool);
begin
  DefaultInterface.Set_IsFontStrikethrough(pbFlag);
end;

procedure TNotesViewColumnProperties.Set_IsHeaderFontBold(pbFlag: WordBool);
begin
  DefaultInterface.Set_IsHeaderFontBold(pbFlag);
end;

procedure TNotesViewColumnProperties.Set_IsHeaderFontItalic(pbFlag: WordBool);
begin
  DefaultInterface.Set_IsHeaderFontItalic(pbFlag);
end;

procedure TNotesViewColumnProperties.Set_IsHeaderFontUnderline(pbFlag: WordBool);
begin
  DefaultInterface.Set_IsHeaderFontUnderline(pbFlag);
end;

procedure TNotesViewColumnProperties.Set_IsHeaderFontStrikethrough(pbFlag: WordBool);
begin
  DefaultInterface.Set_IsHeaderFontStrikethrough(pbFlag);
end;

procedure TNotesViewColumnProperties.Set_IsNumberAttribParens(pbFlag: WordBool);
begin
  DefaultInterface.Set_IsNumberAttribParens(pbFlag);
end;

procedure TNotesViewColumnProperties.Set_IsNumberAttribPunctuated(pbFlag: WordBool);
begin
  DefaultInterface.Set_IsNumberAttribPunctuated(pbFlag);
end;

procedure TNotesViewColumnProperties.Set_IsNumberAttribPercent(pbFlag: WordBool);
begin
  DefaultInterface.Set_IsNumberAttribPercent(pbFlag);
end;

procedure TNotesViewColumnProperties.Set_ResortToViewName(const ppResult: WideString);
  { Warning: The property ResortToViewName has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ResortToViewName := ppResult;
end;

{$ENDIF}

class function CoNotesViewEntry.Create: IViewEntry;
begin
  Result := CreateComObject(CLASS_NotesViewEntry) as IViewEntry;
end;

class function CoNotesViewEntry.CreateRemote(const MachineName: string): IViewEntry;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NotesViewEntry) as IViewEntry;
end;

procedure TNotesViewEntry.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{2913153C-2EED-1069-BF5D-00DD011186B7}';
    IntfIID:   '{2913157B-2EED-1069-BF5D-00DD011186B7}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TNotesViewEntry.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as IViewEntry;
  end;
end;

procedure TNotesViewEntry.ConnectTo(svrIntf: IViewEntry);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TNotesViewEntry.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TNotesViewEntry.GetDefaultInterface: IViewEntry;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TNotesViewEntry.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TNotesViewEntryProperties.Create(Self);
{$ENDIF}
end;

destructor TNotesViewEntry.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TNotesViewEntry.GetServerProperties: TNotesViewEntryProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TNotesViewEntry.Get_ChildCount: Integer;
begin
    Result := DefaultInterface.ChildCount;
end;

function TNotesViewEntry.Get_ColumnIndentLevel: Integer;
begin
    Result := DefaultInterface.ColumnIndentLevel;
end;

function TNotesViewEntry.Get_ColumnValues: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.ColumnValues;
end;

function TNotesViewEntry.Get_DescendantCount: Integer;
begin
    Result := DefaultInterface.DescendantCount;
end;

function TNotesViewEntry.Get_Document: IDocument;
begin
    Result := DefaultInterface.Document;
end;

function TNotesViewEntry.Get_FTSearchScore: Integer;
begin
    Result := DefaultInterface.FTSearchScore;
end;

function TNotesViewEntry.Get_IndentLevel: Integer;
begin
    Result := DefaultInterface.IndentLevel;
end;

function TNotesViewEntry.Get_IsCategory: WordBool;
begin
    Result := DefaultInterface.IsCategory;
end;

function TNotesViewEntry.Get_IsConflict: WordBool;
begin
    Result := DefaultInterface.IsConflict;
end;

function TNotesViewEntry.Get_IsDocument: WordBool;
begin
    Result := DefaultInterface.IsDocument;
end;

function TNotesViewEntry.Get_IsTotal: WordBool;
begin
    Result := DefaultInterface.IsTotal;
end;

function TNotesViewEntry.Get_IsValid: WordBool;
begin
    Result := DefaultInterface.IsValid;
end;

function TNotesViewEntry.Get_NoteID: WideString;
begin
    Result := DefaultInterface.NoteID;
end;

function TNotesViewEntry.Get_Parent: IUnknown;
begin
    Result := DefaultInterface.Parent;
end;

function TNotesViewEntry.Get_SiblingCount: Integer;
begin
    Result := DefaultInterface.SiblingCount;
end;

function TNotesViewEntry.Get_UniversalID: WideString;
begin
    Result := DefaultInterface.UniversalID;
end;

function TNotesViewEntry.GetPosition(const pSeparator: WideString): WideString;
begin
  Result := DefaultInterface.GetPosition(pSeparator);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TNotesViewEntryProperties.Create(AServer: TNotesViewEntry);
begin
  inherited Create;
  FServer := AServer;
end;

function TNotesViewEntryProperties.GetDefaultInterface: IViewEntry;
begin
  Result := FServer.DefaultInterface;
end;

function TNotesViewEntryProperties.Get_ChildCount: Integer;
begin
    Result := DefaultInterface.ChildCount;
end;

function TNotesViewEntryProperties.Get_ColumnIndentLevel: Integer;
begin
    Result := DefaultInterface.ColumnIndentLevel;
end;

function TNotesViewEntryProperties.Get_ColumnValues: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.ColumnValues;
end;

function TNotesViewEntryProperties.Get_DescendantCount: Integer;
begin
    Result := DefaultInterface.DescendantCount;
end;

function TNotesViewEntryProperties.Get_Document: IDocument;
begin
    Result := DefaultInterface.Document;
end;

function TNotesViewEntryProperties.Get_FTSearchScore: Integer;
begin
    Result := DefaultInterface.FTSearchScore;
end;

function TNotesViewEntryProperties.Get_IndentLevel: Integer;
begin
    Result := DefaultInterface.IndentLevel;
end;

function TNotesViewEntryProperties.Get_IsCategory: WordBool;
begin
    Result := DefaultInterface.IsCategory;
end;

function TNotesViewEntryProperties.Get_IsConflict: WordBool;
begin
    Result := DefaultInterface.IsConflict;
end;

function TNotesViewEntryProperties.Get_IsDocument: WordBool;
begin
    Result := DefaultInterface.IsDocument;
end;

function TNotesViewEntryProperties.Get_IsTotal: WordBool;
begin
    Result := DefaultInterface.IsTotal;
end;

function TNotesViewEntryProperties.Get_IsValid: WordBool;
begin
    Result := DefaultInterface.IsValid;
end;

function TNotesViewEntryProperties.Get_NoteID: WideString;
begin
    Result := DefaultInterface.NoteID;
end;

function TNotesViewEntryProperties.Get_Parent: IUnknown;
begin
    Result := DefaultInterface.Parent;
end;

function TNotesViewEntryProperties.Get_SiblingCount: Integer;
begin
    Result := DefaultInterface.SiblingCount;
end;

function TNotesViewEntryProperties.Get_UniversalID: WideString;
begin
    Result := DefaultInterface.UniversalID;
end;

{$ENDIF}

class function CoNotesViewEntryCollection.Create: IViewEntryCollection;
begin
  Result := CreateComObject(CLASS_NotesViewEntryCollection) as IViewEntryCollection;
end;

class function CoNotesViewEntryCollection.CreateRemote(const MachineName: string): IViewEntryCollection;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NotesViewEntryCollection) as IViewEntryCollection;
end;

procedure TNotesViewEntryCollection.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{2913153D-2EED-1069-BF5D-00DD011186B7}';
    IntfIID:   '{2913157C-2EED-1069-BF5D-00DD011186B7}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TNotesViewEntryCollection.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as IViewEntryCollection;
  end;
end;

procedure TNotesViewEntryCollection.ConnectTo(svrIntf: IViewEntryCollection);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TNotesViewEntryCollection.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TNotesViewEntryCollection.GetDefaultInterface: IViewEntryCollection;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TNotesViewEntryCollection.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TNotesViewEntryCollectionProperties.Create(Self);
{$ENDIF}
end;

destructor TNotesViewEntryCollection.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TNotesViewEntryCollection.GetServerProperties: TNotesViewEntryCollectionProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TNotesViewEntryCollection.Get_Count: Integer;
begin
    Result := DefaultInterface.Count;
end;

function TNotesViewEntryCollection.Get_Parent: IView;
begin
    Result := DefaultInterface.Parent;
end;

function TNotesViewEntryCollection.Get_Query: WideString;
begin
    Result := DefaultInterface.Query;
end;

procedure TNotesViewEntryCollection.AddEntry(const pIObj: IUnknown; bReserved: WordBool);
begin
  DefaultInterface.AddEntry(pIObj, bReserved);
end;

procedure TNotesViewEntryCollection.DeleteEntry(const pIEntry: IViewEntry);
begin
  DefaultInterface.DeleteEntry(pIEntry);
end;

procedure TNotesViewEntryCollection.FTSearch(const pQuery: WideString; lMaxDocs: Integer);
begin
  DefaultInterface.FTSearch(pQuery, lMaxDocs);
end;

function TNotesViewEntryCollection.GetEntry(const pIObj: IUnknown): IViewEntry;
begin
  Result := DefaultInterface.GetEntry(pIObj);
end;

function TNotesViewEntryCollection.GetFirstEntry: IViewEntry;
begin
  Result := DefaultInterface.GetFirstEntry;
end;

function TNotesViewEntryCollection.GetLastEntry: IViewEntry;
begin
  Result := DefaultInterface.GetLastEntry;
end;

function TNotesViewEntryCollection.GetNextEntry(const pIEntry: IViewEntry): IViewEntry;
begin
  Result := DefaultInterface.GetNextEntry(pIEntry);
end;

function TNotesViewEntryCollection.GetNthEntry(lN: Integer): IViewEntry;
begin
  Result := DefaultInterface.GetNthEntry(lN);
end;

function TNotesViewEntryCollection.GetPrevEntry(const pIEntry: IViewEntry): IViewEntry;
begin
  Result := DefaultInterface.GetPrevEntry(pIEntry);
end;

procedure TNotesViewEntryCollection.PutAllInFolder(const pFolderName: WideString; 
                                                   bCreateonfail: WordBool);
begin
  DefaultInterface.PutAllInFolder(pFolderName, bCreateonfail);
end;

procedure TNotesViewEntryCollection.RemoveAll(bForce: WordBool);
begin
  DefaultInterface.RemoveAll(bForce);
end;

procedure TNotesViewEntryCollection.RemoveAllFromFolder(const pFolderName: WideString);
begin
  DefaultInterface.RemoveAllFromFolder(pFolderName);
end;

procedure TNotesViewEntryCollection.StampAll(const pItemName: WideString; Value: OleVariant);
begin
  DefaultInterface.StampAll(pItemName, Value);
end;

procedure TNotesViewEntryCollection.UpdateAll;
begin
  DefaultInterface.UpdateAll;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TNotesViewEntryCollectionProperties.Create(AServer: TNotesViewEntryCollection);
begin
  inherited Create;
  FServer := AServer;
end;

function TNotesViewEntryCollectionProperties.GetDefaultInterface: IViewEntryCollection;
begin
  Result := FServer.DefaultInterface;
end;

function TNotesViewEntryCollectionProperties.Get_Count: Integer;
begin
    Result := DefaultInterface.Count;
end;

function TNotesViewEntryCollectionProperties.Get_Parent: IView;
begin
    Result := DefaultInterface.Parent;
end;

function TNotesViewEntryCollectionProperties.Get_Query: WideString;
begin
    Result := DefaultInterface.Query;
end;

{$ENDIF}

class function CoNotesViewNavigator.Create: IViewNavigator;
begin
  Result := CreateComObject(CLASS_NotesViewNavigator) as IViewNavigator;
end;

class function CoNotesViewNavigator.CreateRemote(const MachineName: string): IViewNavigator;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NotesViewNavigator) as IViewNavigator;
end;

procedure TNotesViewNavigator.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{2913153E-2EED-1069-BF5D-00DD011186B7}';
    IntfIID:   '{2913157D-2EED-1069-BF5D-00DD011186B7}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TNotesViewNavigator.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as IViewNavigator;
  end;
end;

procedure TNotesViewNavigator.ConnectTo(svrIntf: IViewNavigator);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TNotesViewNavigator.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TNotesViewNavigator.GetDefaultInterface: IViewNavigator;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TNotesViewNavigator.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TNotesViewNavigatorProperties.Create(Self);
{$ENDIF}
end;

destructor TNotesViewNavigator.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TNotesViewNavigator.GetServerProperties: TNotesViewNavigatorProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TNotesViewNavigator.Get_CacheSize: Integer;
begin
    Result := DefaultInterface.CacheSize;
end;

procedure TNotesViewNavigator.Set_CacheSize(plSize: Integer);
begin
  DefaultInterface.Set_CacheSize(plSize);
end;

function TNotesViewNavigator.Get_MaxLevel: Integer;
begin
    Result := DefaultInterface.MaxLevel;
end;

procedure TNotesViewNavigator.Set_MaxLevel(plLevel: Integer);
begin
  DefaultInterface.Set_MaxLevel(plLevel);
end;

function TNotesViewNavigator.Get_ParentView: IView;
begin
    Result := DefaultInterface.ParentView;
end;

function TNotesViewNavigator.Get_Count: Integer;
begin
    Result := DefaultInterface.Count;
end;

function TNotesViewNavigator.GetChild(const pICurrent: IViewEntry): IViewEntry;
begin
  Result := DefaultInterface.GetChild(pICurrent);
end;

function TNotesViewNavigator.GetEntry(const pICurrent: IViewEntry): IViewEntry;
begin
  Result := DefaultInterface.GetEntry(pICurrent);
end;

function TNotesViewNavigator.GetCurrent: IViewEntry;
begin
  Result := DefaultInterface.GetCurrent;
end;

function TNotesViewNavigator.GetFirst: IViewEntry;
begin
  Result := DefaultInterface.GetFirst;
end;

function TNotesViewNavigator.GetFirstDocument: IViewEntry;
begin
  Result := DefaultInterface.GetFirstDocument;
end;

function TNotesViewNavigator.GetLast: IViewEntry;
begin
  Result := DefaultInterface.GetLast;
end;

function TNotesViewNavigator.GetLastDocument: IViewEntry;
begin
  Result := DefaultInterface.GetLastDocument;
end;

function TNotesViewNavigator.GetNext(const pICurrent: IViewEntry): IViewEntry;
begin
  Result := DefaultInterface.GetNext(pICurrent);
end;

function TNotesViewNavigator.GetNextCategory(const pICurrent: IViewEntry): IViewEntry;
begin
  Result := DefaultInterface.GetNextCategory(pICurrent);
end;

function TNotesViewNavigator.GetNextDocument(const pICurrent: IViewEntry): IViewEntry;
begin
  Result := DefaultInterface.GetNextDocument(pICurrent);
end;

function TNotesViewNavigator.GetNextSibling(const pICurrent: IViewEntry): IViewEntry;
begin
  Result := DefaultInterface.GetNextSibling(pICurrent);
end;

function TNotesViewNavigator.GetNth(lN: Integer): IViewEntry;
begin
  Result := DefaultInterface.GetNth(lN);
end;

function TNotesViewNavigator.GetParent(const pICurrent: IViewEntry): IViewEntry;
begin
  Result := DefaultInterface.GetParent(pICurrent);
end;

function TNotesViewNavigator.GetPos(const pPos: WideString; const pSeparator: WideString): IViewEntry;
begin
  Result := DefaultInterface.GetPos(pPos, pSeparator);
end;

function TNotesViewNavigator.GetPrev(const pICurrent: IViewEntry): IViewEntry;
begin
  Result := DefaultInterface.GetPrev(pICurrent);
end;

function TNotesViewNavigator.GetPrevCategory(const pICurrent: IViewEntry): IViewEntry;
begin
  Result := DefaultInterface.GetPrevCategory(pICurrent);
end;

function TNotesViewNavigator.GetPrevDocument(const pICurrent: IViewEntry): IViewEntry;
begin
  Result := DefaultInterface.GetPrevDocument(pICurrent);
end;

function TNotesViewNavigator.GetPrevSibling(const pICurrent: IViewEntry): IViewEntry;
begin
  Result := DefaultInterface.GetPrevSibling(pICurrent);
end;

procedure TNotesViewNavigator.GotoChild(const pIViewEntry: IViewEntry);
begin
  DefaultInterface.GotoChild(pIViewEntry);
end;

procedure TNotesViewNavigator.GotoEntry(const pIObj: IUnknown);
begin
  DefaultInterface.GotoEntry(pIObj);
end;

procedure TNotesViewNavigator.GotoFirst;
begin
  DefaultInterface.GotoFirst;
end;

procedure TNotesViewNavigator.GotoFirstDocument;
begin
  DefaultInterface.GotoFirstDocument;
end;

procedure TNotesViewNavigator.GotoLast;
begin
  DefaultInterface.GotoLast;
end;

procedure TNotesViewNavigator.GotoLastDocument;
begin
  DefaultInterface.GotoLastDocument;
end;

procedure TNotesViewNavigator.GotoNext(const pIViewEntry: IViewEntry);
begin
  DefaultInterface.GotoNext(pIViewEntry);
end;

procedure TNotesViewNavigator.GotoNextCategory(const pIViewEntry: IViewEntry);
begin
  DefaultInterface.GotoNextCategory(pIViewEntry);
end;

procedure TNotesViewNavigator.GotoNextDocument(const pIViewEntry: IViewEntry);
begin
  DefaultInterface.GotoNextDocument(pIViewEntry);
end;

procedure TNotesViewNavigator.GotoNextSibling(const pIViewEntry: IViewEntry);
begin
  DefaultInterface.GotoNextSibling(pIViewEntry);
end;

procedure TNotesViewNavigator.GotoParent(const pIViewEntry: IViewEntry);
begin
  DefaultInterface.GotoParent(pIViewEntry);
end;

procedure TNotesViewNavigator.GotoPos(const pPos: WideString; const pSeparator: WideString);
begin
  DefaultInterface.GotoPos(pPos, pSeparator);
end;

procedure TNotesViewNavigator.GotoPrev(const pIViewEntry: IViewEntry);
begin
  DefaultInterface.GotoPrev(pIViewEntry);
end;

procedure TNotesViewNavigator.GotoPrevCategory(const pIViewEntry: IViewEntry);
begin
  DefaultInterface.GotoPrevCategory(pIViewEntry);
end;

procedure TNotesViewNavigator.GotoPrevDocument(const pIViewEntry: IViewEntry);
begin
  DefaultInterface.GotoPrevDocument(pIViewEntry);
end;

procedure TNotesViewNavigator.GotoPrevSibling(const pIViewEntry: IViewEntry);
begin
  DefaultInterface.GotoPrevSibling(pIViewEntry);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TNotesViewNavigatorProperties.Create(AServer: TNotesViewNavigator);
begin
  inherited Create;
  FServer := AServer;
end;

function TNotesViewNavigatorProperties.GetDefaultInterface: IViewNavigator;
begin
  Result := FServer.DefaultInterface;
end;

function TNotesViewNavigatorProperties.Get_CacheSize: Integer;
begin
    Result := DefaultInterface.CacheSize;
end;

procedure TNotesViewNavigatorProperties.Set_CacheSize(plSize: Integer);
begin
  DefaultInterface.Set_CacheSize(plSize);
end;

function TNotesViewNavigatorProperties.Get_MaxLevel: Integer;
begin
    Result := DefaultInterface.MaxLevel;
end;

procedure TNotesViewNavigatorProperties.Set_MaxLevel(plLevel: Integer);
begin
  DefaultInterface.Set_MaxLevel(plLevel);
end;

function TNotesViewNavigatorProperties.Get_ParentView: IView;
begin
    Result := DefaultInterface.ParentView;
end;

function TNotesViewNavigatorProperties.Get_Count: Integer;
begin
    Result := DefaultInterface.Count;
end;

{$ENDIF}

class function CoNotesMIMEEntity.Create: IMIMEEntity;
begin
  Result := CreateComObject(CLASS_NotesMIMEEntity) as IMIMEEntity;
end;

class function CoNotesMIMEEntity.CreateRemote(const MachineName: string): IMIMEEntity;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NotesMIMEEntity) as IMIMEEntity;
end;

procedure TNotesMIMEEntity.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{2913153F-2EED-1069-BF5D-00DD011186B7}';
    IntfIID:   '{2913157E-2EED-1069-BF5D-00DD011186B7}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TNotesMIMEEntity.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as IMIMEEntity;
  end;
end;

procedure TNotesMIMEEntity.ConnectTo(svrIntf: IMIMEEntity);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TNotesMIMEEntity.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TNotesMIMEEntity.GetDefaultInterface: IMIMEEntity;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TNotesMIMEEntity.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TNotesMIMEEntityProperties.Create(Self);
{$ENDIF}
end;

destructor TNotesMIMEEntity.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TNotesMIMEEntity.GetServerProperties: TNotesMIMEEntityProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TNotesMIMEEntity.Get_ContentSubType: WideString;
begin
    Result := DefaultInterface.ContentSubType;
end;

function TNotesMIMEEntity.Get_ContentType: WideString;
begin
    Result := DefaultInterface.ContentType;
end;

function TNotesMIMEEntity.Get_ContentAsText: WideString;
begin
    Result := DefaultInterface.ContentAsText;
end;

function TNotesMIMEEntity.Get_Headers: WideString;
begin
    Result := DefaultInterface.Headers;
end;

function TNotesMIMEEntity.Get_ParentDoc: IDocument;
begin
    Result := DefaultInterface.ParentDoc;
end;

function TNotesMIMEEntity.Get_BoundaryStart: WideString;
begin
    Result := DefaultInterface.BoundaryStart;
end;

function TNotesMIMEEntity.Get_BoundaryEnd: WideString;
begin
    Result := DefaultInterface.BoundaryEnd;
end;

function TNotesMIMEEntity.Get_Charset: WideString;
begin
    Result := DefaultInterface.Charset;
end;

function TNotesMIMEEntity.Get_Encoding: MIME_ENCODING;
begin
    Result := DefaultInterface.Encoding;
end;

function TNotesMIMEEntity.Get_HeaderObjects: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.HeaderObjects;
end;

function TNotesMIMEEntity.Get_Preamble: WideString;
begin
    Result := DefaultInterface.Preamble;
end;

procedure TNotesMIMEEntity.Set_Preamble(const ppPreamble: WideString);
  { Warning: The property Preamble has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Preamble := ppPreamble;
end;

function TNotesMIMEEntity.GetFirstChildEntity: IMIMEEntity;
begin
  Result := DefaultInterface.GetFirstChildEntity;
end;

function TNotesMIMEEntity.GetNextSibling: IMIMEEntity;
begin
  Result := DefaultInterface.GetNextSibling;
end;

function TNotesMIMEEntity.GetParentEntity: IMIMEEntity;
begin
  Result := DefaultInterface.GetParentEntity;
end;

function TNotesMIMEEntity.CreateChildEntity(const pNextSiblingIMIMEEntity: IMIMEEntity): IMIMEEntity;
begin
  Result := DefaultInterface.CreateChildEntity(pNextSiblingIMIMEEntity);
end;

function TNotesMIMEEntity.CreateHeader(const pHeaderName: WideString): IMIMEHeader;
begin
  Result := DefaultInterface.CreateHeader(pHeaderName);
end;

function TNotesMIMEEntity.CreateParentEntity: IMIMEEntity;
begin
  Result := DefaultInterface.CreateParentEntity;
end;

procedure TNotesMIMEEntity.DecodeContent;
begin
  DefaultInterface.DecodeContent;
end;

procedure TNotesMIMEEntity.EncodeContent(lEnc: MIME_ENCODING);
begin
  DefaultInterface.EncodeContent(lEnc);
end;

procedure TNotesMIMEEntity.GetContentAsBytes(const pINotesStream: INotesStream; bDecoded: WordBool);
begin
  DefaultInterface.GetContentAsBytes(pINotesStream, bDecoded);
end;

procedure TNotesMIMEEntity.GetContentAsText(const pINotesStream: INotesStream; bDecoded: WordBool);
begin
  DefaultInterface.GetContentAsText(pINotesStream, bDecoded);
end;

procedure TNotesMIMEEntity.GetEntityAsText(const pINotesStream: INotesStream; 
                                           var pHeaderFilters: OleVariant; bInclusive: WordBool);
begin
  DefaultInterface.GetEntityAsText(pINotesStream, pHeaderFilters, bInclusive);
end;

function TNotesMIMEEntity.GetNextEntity(lSearchPath: SEARCH_PATH): IMIMEEntity;
begin
  Result := DefaultInterface.GetNextEntity(lSearchPath);
end;

function TNotesMIMEEntity.GetNthHeader(const pHeaderName: WideString; lNth: Integer): IMIMEHeader;
begin
  Result := DefaultInterface.GetNthHeader(pHeaderName, lNth);
end;

function TNotesMIMEEntity.GetPrevEntity(lSearchPath: SEARCH_PATH): IMIMEEntity;
begin
  Result := DefaultInterface.GetPrevEntity(lSearchPath);
end;

function TNotesMIMEEntity.GetPrevSibling: IMIMEEntity;
begin
  Result := DefaultInterface.GetPrevSibling;
end;

function TNotesMIMEEntity.GetSomeHeaders(var pHeaderFilters: OleVariant; bInclusive: WordBool): WideString;
begin
  Result := DefaultInterface.GetSomeHeaders(pHeaderFilters, bInclusive);
end;

procedure TNotesMIMEEntity.Remove;
begin
  DefaultInterface.Remove;
end;

procedure TNotesMIMEEntity.SetContentFromBytes(const pINotesStream: INotesStream; 
                                               const pContentType: WideString; lEnc: MIME_ENCODING);
begin
  DefaultInterface.SetContentFromBytes(pINotesStream, pContentType, lEnc);
end;

procedure TNotesMIMEEntity.SetContentFromText(const pINotesStream: INotesStream; 
                                              const pContentType: WideString; lEnc: MIME_ENCODING);
begin
  DefaultInterface.SetContentFromText(pINotesStream, pContentType, lEnc);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TNotesMIMEEntityProperties.Create(AServer: TNotesMIMEEntity);
begin
  inherited Create;
  FServer := AServer;
end;

function TNotesMIMEEntityProperties.GetDefaultInterface: IMIMEEntity;
begin
  Result := FServer.DefaultInterface;
end;

function TNotesMIMEEntityProperties.Get_ContentSubType: WideString;
begin
    Result := DefaultInterface.ContentSubType;
end;

function TNotesMIMEEntityProperties.Get_ContentType: WideString;
begin
    Result := DefaultInterface.ContentType;
end;

function TNotesMIMEEntityProperties.Get_ContentAsText: WideString;
begin
    Result := DefaultInterface.ContentAsText;
end;

function TNotesMIMEEntityProperties.Get_Headers: WideString;
begin
    Result := DefaultInterface.Headers;
end;

function TNotesMIMEEntityProperties.Get_ParentDoc: IDocument;
begin
    Result := DefaultInterface.ParentDoc;
end;

function TNotesMIMEEntityProperties.Get_BoundaryStart: WideString;
begin
    Result := DefaultInterface.BoundaryStart;
end;

function TNotesMIMEEntityProperties.Get_BoundaryEnd: WideString;
begin
    Result := DefaultInterface.BoundaryEnd;
end;

function TNotesMIMEEntityProperties.Get_Charset: WideString;
begin
    Result := DefaultInterface.Charset;
end;

function TNotesMIMEEntityProperties.Get_Encoding: MIME_ENCODING;
begin
    Result := DefaultInterface.Encoding;
end;

function TNotesMIMEEntityProperties.Get_HeaderObjects: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.HeaderObjects;
end;

function TNotesMIMEEntityProperties.Get_Preamble: WideString;
begin
    Result := DefaultInterface.Preamble;
end;

procedure TNotesMIMEEntityProperties.Set_Preamble(const ppPreamble: WideString);
  { Warning: The property Preamble has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Preamble := ppPreamble;
end;

{$ENDIF}

class function CoNotesMIMEHeader.Create: IMIMEHeader;
begin
  Result := CreateComObject(CLASS_NotesMIMEHeader) as IMIMEHeader;
end;

class function CoNotesMIMEHeader.CreateRemote(const MachineName: string): IMIMEHeader;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NotesMIMEHeader) as IMIMEHeader;
end;

procedure TNotesMIMEHeader.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{29131540-2EED-1069-BF5D-00DD011186B7}';
    IntfIID:   '{2913157F-2EED-1069-BF5D-00DD011186B7}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TNotesMIMEHeader.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as IMIMEHeader;
  end;
end;

procedure TNotesMIMEHeader.ConnectTo(svrIntf: IMIMEHeader);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TNotesMIMEHeader.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TNotesMIMEHeader.GetDefaultInterface: IMIMEHeader;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TNotesMIMEHeader.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TNotesMIMEHeaderProperties.Create(Self);
{$ENDIF}
end;

destructor TNotesMIMEHeader.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TNotesMIMEHeader.GetServerProperties: TNotesMIMEHeaderProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TNotesMIMEHeader.Get_HeaderName: WideString;
begin
    Result := DefaultInterface.HeaderName;
end;

function TNotesMIMEHeader.Get_Parent: IMIMEEntity;
begin
    Result := DefaultInterface.Parent;
end;

function TNotesMIMEHeader.AddValText(const pValueText: WideString; const pRfc2047Charset: WideString): WordBool;
begin
  Result := DefaultInterface.AddValText(pValueText, pRfc2047Charset);
end;

function TNotesMIMEHeader.GetHeaderVal(bFolded: WordBool; bDecoded: WordBool): WideString;
begin
  Result := DefaultInterface.GetHeaderVal(bFolded, bDecoded);
end;

function TNotesMIMEHeader.GetHeaderValAndParams(bFolded: WordBool; bDecoded: WordBool): WideString;
begin
  Result := DefaultInterface.GetHeaderValAndParams(bFolded, bDecoded);
end;

function TNotesMIMEHeader.GetParamVal(const pParamName: WideString; bFolded: WordBool): WideString;
begin
  Result := DefaultInterface.GetParamVal(pParamName, bFolded);
end;

procedure TNotesMIMEHeader.Remove;
begin
  DefaultInterface.Remove;
end;

function TNotesMIMEHeader.SetHeaderVal(const pHeaderVal: WideString): WordBool;
begin
  Result := DefaultInterface.SetHeaderVal(pHeaderVal);
end;

function TNotesMIMEHeader.SetHeaderValAndParams(const pHeaderValParams: WideString): WordBool;
begin
  Result := DefaultInterface.SetHeaderValAndParams(pHeaderValParams);
end;

function TNotesMIMEHeader.SetParamVal(const pParamName: WideString; const pParamVal: WideString): WordBool;
begin
  Result := DefaultInterface.SetParamVal(pParamName, pParamVal);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TNotesMIMEHeaderProperties.Create(AServer: TNotesMIMEHeader);
begin
  inherited Create;
  FServer := AServer;
end;

function TNotesMIMEHeaderProperties.GetDefaultInterface: IMIMEHeader;
begin
  Result := FServer.DefaultInterface;
end;

function TNotesMIMEHeaderProperties.Get_HeaderName: WideString;
begin
    Result := DefaultInterface.HeaderName;
end;

function TNotesMIMEHeaderProperties.Get_Parent: IMIMEEntity;
begin
    Result := DefaultInterface.Parent;
end;

{$ENDIF}

class function CoNotesStream.Create: INotesStream;
begin
  Result := CreateComObject(CLASS_NotesStream) as INotesStream;
end;

class function CoNotesStream.CreateRemote(const MachineName: string): INotesStream;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NotesStream) as INotesStream;
end;

procedure TNotesStream.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{29131541-2EED-1069-BF5D-00DD011186B7}';
    IntfIID:   '{29131580-2EED-1069-BF5D-00DD011186B7}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TNotesStream.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as INotesStream;
  end;
end;

procedure TNotesStream.ConnectTo(svrIntf: INotesStream);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TNotesStream.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TNotesStream.GetDefaultInterface: INotesStream;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TNotesStream.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TNotesStreamProperties.Create(Self);
{$ENDIF}
end;

destructor TNotesStream.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TNotesStream.GetServerProperties: TNotesStreamProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TNotesStream.Get_Charset: WideString;
begin
    Result := DefaultInterface.Charset;
end;

function TNotesStream.Get_IsEOS: WordBool;
begin
    Result := DefaultInterface.IsEOS;
end;

function TNotesStream.Get_Position: Integer;
begin
    Result := DefaultInterface.Position;
end;

procedure TNotesStream.Set_Position(plPosition: Integer);
begin
  DefaultInterface.Set_Position(plPosition);
end;

function TNotesStream.Get_Bytes: Integer;
begin
    Result := DefaultInterface.Bytes;
end;

function TNotesStream.Get_IsReadOnly: WordBool;
begin
    Result := DefaultInterface.IsReadOnly;
end;

function TNotesStream.Get_Parent: ISession;
begin
    Result := DefaultInterface.Parent;
end;

procedure TNotesStream.Close;
begin
  DefaultInterface.Close;
end;

function TNotesStream.Open(const pName: WideString; const pCharset: WideString): WordBool;
begin
  Result := DefaultInterface.Open(pName, pCharset);
end;

function TNotesStream.Read(lLength: Integer): OleVariant;
begin
  Result := DefaultInterface.Read(lLength);
end;

function TNotesStream.ReadText(lLength: STMREAD_LEN; lEOL: EOL_TYPE): WideString;
begin
  Result := DefaultInterface.ReadText(lLength, lEOL);
end;

procedure TNotesStream.Truncate;
begin
  DefaultInterface.Truncate;
end;

function TNotesStream.Write(vByteArray: OleVariant): Integer;
begin
  Result := DefaultInterface.Write(vByteArray);
end;

function TNotesStream.WriteText(const pText: WideString; lEOL: EOL_TYPE): Integer;
begin
  Result := DefaultInterface.WriteText(pText, lEOL);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TNotesStreamProperties.Create(AServer: TNotesStream);
begin
  inherited Create;
  FServer := AServer;
end;

function TNotesStreamProperties.GetDefaultInterface: INotesStream;
begin
  Result := FServer.DefaultInterface;
end;

function TNotesStreamProperties.Get_Charset: WideString;
begin
    Result := DefaultInterface.Charset;
end;

function TNotesStreamProperties.Get_IsEOS: WordBool;
begin
    Result := DefaultInterface.IsEOS;
end;

function TNotesStreamProperties.Get_Position: Integer;
begin
    Result := DefaultInterface.Position;
end;

procedure TNotesStreamProperties.Set_Position(plPosition: Integer);
begin
  DefaultInterface.Set_Position(plPosition);
end;

function TNotesStreamProperties.Get_Bytes: Integer;
begin
    Result := DefaultInterface.Bytes;
end;

function TNotesStreamProperties.Get_IsReadOnly: WordBool;
begin
    Result := DefaultInterface.IsReadOnly;
end;

function TNotesStreamProperties.Get_Parent: ISession;
begin
    Result := DefaultInterface.Parent;
end;

{$ENDIF}

class function CoNotesAdministrationProcess.Create: IAdministrationProcess;
begin
  Result := CreateComObject(CLASS_NotesAdministrationProcess) as IAdministrationProcess;
end;

class function CoNotesAdministrationProcess.CreateRemote(const MachineName: string): IAdministrationProcess;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NotesAdministrationProcess) as IAdministrationProcess;
end;

procedure TNotesAdministrationProcess.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{29131542-2EED-1069-BF5D-00DD011186B7}';
    IntfIID:   '{29131581-2EED-1069-BF5D-00DD011186B7}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TNotesAdministrationProcess.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as IAdministrationProcess;
  end;
end;

procedure TNotesAdministrationProcess.ConnectTo(svrIntf: IAdministrationProcess);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TNotesAdministrationProcess.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TNotesAdministrationProcess.GetDefaultInterface: IAdministrationProcess;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TNotesAdministrationProcess.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TNotesAdministrationProcessProperties.Create(Self);
{$ENDIF}
end;

destructor TNotesAdministrationProcess.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TNotesAdministrationProcess.GetServerProperties: TNotesAdministrationProcessProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TNotesAdministrationProcess.Get_CertificateAuthorityOrg: WideString;
begin
    Result := DefaultInterface.CertificateAuthorityOrg;
end;

procedure TNotesAdministrationProcess.Set_CertificateAuthorityOrg(const ppCertificateAuthorityOrg: WideString);
  { Warning: The property CertificateAuthorityOrg has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CertificateAuthorityOrg := ppCertificateAuthorityOrg;
end;

function TNotesAdministrationProcess.Get_CertifierFile: WideString;
begin
    Result := DefaultInterface.CertifierFile;
end;

procedure TNotesAdministrationProcess.Set_CertifierFile(const ppCertifierFile: WideString);
  { Warning: The property CertifierFile has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CertifierFile := ppCertifierFile;
end;

function TNotesAdministrationProcess.Get_CertifierPassword: WideString;
begin
    Result := DefaultInterface.CertifierPassword;
end;

procedure TNotesAdministrationProcess.Set_CertifierPassword(const ppCertifierPassword: WideString);
  { Warning: The property CertifierPassword has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CertifierPassword := ppCertifierPassword;
end;

function TNotesAdministrationProcess.Get_IsCertificateAuthorityAvailable: WordBool;
begin
    Result := DefaultInterface.IsCertificateAuthorityAvailable;
end;

procedure TNotesAdministrationProcess.Set_UseCertificateAuthority(pbUseCertificateAuthority: WordBool);
begin
  DefaultInterface.Set_UseCertificateAuthority(pbUseCertificateAuthority);
end;

function TNotesAdministrationProcess.Get_UseCertificateAuthority: WordBool;
begin
    Result := DefaultInterface.UseCertificateAuthority;
end;

function TNotesAdministrationProcess.Get_CertificateExpiration: IDateTime;
begin
    Result := DefaultInterface.CertificateExpiration;
end;

procedure TNotesAdministrationProcess.Set_CertificateExpiration(const ppCertificateExpiration: IDateTime);
begin
  DefaultInterface.Set_CertificateExpiration(ppCertificateExpiration);
end;

function TNotesAdministrationProcess.AddGroupMembers(const pGroup: WideString; Members: OleVariant): WideString;
begin
  Result := DefaultInterface.AddGroupMembers(pGroup, Members);
end;

function TNotesAdministrationProcess.AddInternetCertificateToUser(const pUser: WideString; 
                                                                  const pKeyRingFile: WideString; 
                                                                  const pKeyRingPassword: WideString; 
                                                                  const Expiration: IDateTime): WideString;
begin
  Result := DefaultInterface.AddInternetCertificateToUser(pUser, pKeyRingFile, pKeyRingPassword, 
                                                          Expiration);
end;

function TNotesAdministrationProcess.AddServerToCluster(const pServer: WideString; 
                                                        const pCluster: WideString): WideString;
begin
  Result := DefaultInterface.AddServerToCluster(pServer, pCluster);
end;

function TNotesAdministrationProcess.ApproveDeletePersonInDirectory(const pNoteid: WideString): WideString;
begin
  Result := DefaultInterface.ApproveDeletePersonInDirectory(pNoteid);
end;

function TNotesAdministrationProcess.ApproveDeleteServerInDirectory(const pNoteid: WideString): WideString;
begin
  Result := DefaultInterface.ApproveDeleteServerInDirectory(pNoteid);
end;

function TNotesAdministrationProcess.ApproveDesignElementDeletion(const pNoteid: WideString): WideString;
begin
  Result := DefaultInterface.ApproveDesignElementDeletion(pNoteid);
end;

function TNotesAdministrationProcess.ApproveMailFileDeletion(const pNoteid: WideString): WideString;
begin
  Result := DefaultInterface.ApproveMailFileDeletion(pNoteid);
end;

function TNotesAdministrationProcess.ApproveMovedReplicaDeletion(const pNoteid: WideString): WideString;
begin
  Result := DefaultInterface.ApproveMovedReplicaDeletion(pNoteid);
end;

function TNotesAdministrationProcess.ApproveNameChangeRetraction(const pNoteid: WideString): WideString;
begin
  Result := DefaultInterface.ApproveNameChangeRetraction(pNoteid);
end;

function TNotesAdministrationProcess.ApproveRenamePersonInDirectory(const pNoteid: WideString): WideString;
begin
  Result := DefaultInterface.ApproveRenamePersonInDirectory(pNoteid);
end;

function TNotesAdministrationProcess.ApproveRenameServerInDirectory(const pNoteid: WideString): WideString;
begin
  Result := DefaultInterface.ApproveRenameServerInDirectory(pNoteid);
end;

function TNotesAdministrationProcess.ApproveReplicaDeletion(const pNoteid: WideString): WideString;
begin
  Result := DefaultInterface.ApproveReplicaDeletion(pNoteid);
end;

function TNotesAdministrationProcess.ApproveResourceDeletion(const pNoteid: WideString): WideString;
begin
  Result := DefaultInterface.ApproveResourceDeletion(pNoteid);
end;

function TNotesAdministrationProcess.ChangeHTTPPassword(const pUsername: WideString; 
                                                        const pOldPassword: WideString; 
                                                        const pNewPassword: WideString): WideString;
begin
  Result := DefaultInterface.ChangeHTTPPassword(pUsername, pOldPassword, pNewPassword);
end;

function TNotesAdministrationProcess.ConfigureMailAgent(const pUsername: WideString; 
                                                        const pAgentName: WideString; 
                                                        bActivatable: WordBool; bEnable: WordBool): WideString;
begin
  Result := DefaultInterface.ConfigureMailAgent(pUsername, pAgentName, bActivatable, bEnable);
end;

function TNotesAdministrationProcess.CreateReplica(const pSourceServer: WideString; 
                                                   const pSourceDBFile: WideString; 
                                                   const pDestServer: WideString; 
                                                   const pDestDBFile: WideString; 
                                                   bCopyACL: WordBool; bCreateFTIndex: WordBool): WideString;
begin
  Result := DefaultInterface.CreateReplica(pSourceServer, pSourceDBFile, pDestServer, pDestDBFile, 
                                           bCopyACL, bCreateFTIndex);
end;

function TNotesAdministrationProcess.MoveReplica(const pSourceServer: WideString; 
                                                 const pSourceDBFile: WideString; 
                                                 const pDestServer: WideString; 
                                                 const pDestDBFile: WideString; bCopyACL: WordBool; 
                                                 bCreateFTIndex: WordBool): WideString;
begin
  Result := DefaultInterface.MoveReplica(pSourceServer, pSourceDBFile, pDestServer, pDestDBFile, 
                                         bCopyACL, bCreateFTIndex);
end;

function TNotesAdministrationProcess.DeleteReplicas(const pServer: WideString; 
                                                    const pDbfile: WideString): WideString;
begin
  Result := DefaultInterface.DeleteReplicas(pServer, pDbfile);
end;

function TNotesAdministrationProcess.DeleteGroup(const pGroupName: WideString; 
                                                 bImmediate: WordBool; bDeleteWindowsGroup: WordBool): WideString;
begin
  Result := DefaultInterface.DeleteGroup(pGroupName, bImmediate, bDeleteWindowsGroup);
end;

function TNotesAdministrationProcess.DeleteServer(const pServerName: WideString; 
                                                  bImmediate: WordBool): WideString;
begin
  Result := DefaultInterface.DeleteServer(pServerName, bImmediate);
end;

function TNotesAdministrationProcess.DeleteUser(const pUsername: WideString; bImmediate: WordBool; 
                                                lMailFileAction: ADMP_MAILDEL; 
                                                const pDenyGroup: WideString; 
                                                bDeleteWindowsGroup: WordBool): WideString;
begin
  Result := DefaultInterface.DeleteUser(pUsername, bImmediate, lMailFileAction, pDenyGroup, 
                                        bDeleteWindowsGroup);
end;

function TNotesAdministrationProcess.FindGroupInDomain(const pGroup: WideString): WideString;
begin
  Result := DefaultInterface.FindGroupInDomain(pGroup);
end;

function TNotesAdministrationProcess.FindServerInDomain(const pServer: WideString): WideString;
begin
  Result := DefaultInterface.FindServerInDomain(pServer);
end;

function TNotesAdministrationProcess.FindUserInDomain(const pUser: WideString): WideString;
begin
  Result := DefaultInterface.FindUserInDomain(pUser);
end;

function TNotesAdministrationProcess.MoveMailUser(const pUsername: WideString; 
                                                  const pNewHomeServer: WideString; 
                                                  const pNewHomeServerMailPath: WideString; 
                                                  bUseSCOS: WordBool; 
                                                  NewClusterReplicaArray: OleVariant; 
                                                  bDeleteOldClusterReplicas: WordBool): WideString;
begin
  Result := DefaultInterface.MoveMailUser(pUsername, pNewHomeServer, pNewHomeServerMailPath, 
                                          bUseSCOS, NewClusterReplicaArray, 
                                          bDeleteOldClusterReplicas);
end;

function TNotesAdministrationProcess.MoveRoamingUser(const pUsername: WideString; 
                                                     const pDestServer: WideString; 
                                                     const pDestServerPath: WideString): WideString;
begin
  Result := DefaultInterface.MoveRoamingUser(pUsername, pDestServer, pDestServerPath);
end;

function TNotesAdministrationProcess.MoveUserInHierarchyRequest(const pUsername: WideString; 
                                                                const pTargetCertifier: WideString; 
                                                                bAllowPrimaryNameChange: WordBool): WideString;
begin
  Result := DefaultInterface.MoveUserInHierarchyRequest(pUsername, pTargetCertifier, 
                                                        bAllowPrimaryNameChange);
end;

function TNotesAdministrationProcess.MoveUserInHierarchyComplete(const pRequestNoteID: WideString; 
                                                                 const pLastName: WideString; 
                                                                 const pFirstName: WideString; 
                                                                 const pMiddleInitial: WideString; 
                                                                 const pOrgUnit: WideString; 
                                                                 const pAltCommonName: WideString; 
                                                                 const pAltOrgUnit: WideString; 
                                                                 const pAltLanguage: WideString; 
                                                                 bRenameWindowsUser: WordBool): WideString;
begin
  Result := DefaultInterface.MoveUserInHierarchyComplete(pRequestNoteID, pLastName, pFirstName, 
                                                         pMiddleInitial, pOrgUnit, pAltCommonName, 
                                                         pAltOrgUnit, pAltLanguage, 
                                                         bRenameWindowsUser);
end;

function TNotesAdministrationProcess.RecertifyServer(const pServer: WideString): WideString;
begin
  Result := DefaultInterface.RecertifyServer(pServer);
end;

function TNotesAdministrationProcess.RecertifyUser(const pUsername: WideString): WideString;
begin
  Result := DefaultInterface.RecertifyUser(pUsername);
end;

function TNotesAdministrationProcess.RemoveServerFromCluster(const pServer: WideString): WideString;
begin
  Result := DefaultInterface.RemoveServerFromCluster(pServer);
end;

function TNotesAdministrationProcess.RenameGroup(const pGroup: WideString; 
                                                 const pNewGroup: WideString): WideString;
begin
  Result := DefaultInterface.RenameGroup(pGroup, pNewGroup);
end;

function TNotesAdministrationProcess.RenameNotesUser(const pUsername: WideString; 
                                                     const pLastName: WideString; 
                                                     const pFirstName: WideString; 
                                                     const pMiddleInitial: WideString; 
                                                     const pOrgUnit: WideString; 
                                                     const pAltCommonName: WideString; 
                                                     const pAltOrgUnit: WideString; 
                                                     const pAltLanguage: WideString; 
                                                     bRenameWindowsUser: WordBool): WideString;
begin
  Result := DefaultInterface.RenameNotesUser(pUsername, pLastName, pFirstName, pMiddleInitial, 
                                             pOrgUnit, pAltCommonName, pAltOrgUnit, pAltLanguage, 
                                             bRenameWindowsUser);
end;

function TNotesAdministrationProcess.RenameWebUser(const pUsername: WideString; 
                                                   const pNewUserName: WideString; 
                                                   const pNewLastName: WideString; 
                                                   const pNewFirstName: WideString; 
                                                   const pNewMiddleInitial: WideString; 
                                                   const pNewShortname: WideString; 
                                                   const pNewInternetAddress: WideString): WideString;
begin
  Result := DefaultInterface.RenameWebUser(pUsername, pNewUserName, pNewLastName, pNewFirstName, 
                                           pNewMiddleInitial, pNewShortname, pNewInternetAddress);
end;

function TNotesAdministrationProcess.SetServerDirectoryAssistanceSettings(const pServer: WideString; 
                                                                          const pDbfile: WideString): WideString;
begin
  Result := DefaultInterface.SetServerDirectoryAssistanceSettings(pServer, pDbfile);
end;

function TNotesAdministrationProcess.SignDatabaseWithServerID(const pServer: WideString; 
                                                              const pDbfile: WideString; 
                                                              bUpdateOnly: WordBool): WideString;
begin
  Result := DefaultInterface.SignDatabaseWithServerID(pServer, pDbfile, bUpdateOnly);
end;

function TNotesAdministrationProcess.UpgradeUserToHierarchical(const pUsername: WideString; 
                                                               const pOrgUnit: WideString; 
                                                               const pAltCommonName: WideString; 
                                                               const pAltOrgUnit: WideString; 
                                                               const pAltLanguage: WideString): WideString;
begin
  Result := DefaultInterface.UpgradeUserToHierarchical(pUsername, pOrgUnit, pAltCommonName, 
                                                       pAltOrgUnit, pAltLanguage);
end;

function TNotesAdministrationProcess.SetUserPasswordSettings(const pUsername: WideString; 
                                                             NotesPasswordCheckSetting: OleVariant; 
                                                             NotesPasswordChangeInterval: OleVariant; 
                                                             NotesPasswordGracePeriod: OleVariant; 
                                                             InternetPasswordForceChange: OleVariant; 
                                                             NotUsed: ADMP_PWDCHK): WideString;
begin
  Result := DefaultInterface.SetUserPasswordSettings(pUsername, NotesPasswordCheckSetting, 
                                                     NotesPasswordChangeInterval, 
                                                     NotesPasswordGracePeriod, 
                                                     InternetPasswordForceChange, NotUsed);
end;

function TNotesAdministrationProcess.ApproveHostedOrgStorageDeletion(const pNoteid: WideString): WideString;
begin
  Result := DefaultInterface.ApproveHostedOrgStorageDeletion(pNoteid);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TNotesAdministrationProcessProperties.Create(AServer: TNotesAdministrationProcess);
begin
  inherited Create;
  FServer := AServer;
end;

function TNotesAdministrationProcessProperties.GetDefaultInterface: IAdministrationProcess;
begin
  Result := FServer.DefaultInterface;
end;

function TNotesAdministrationProcessProperties.Get_CertificateAuthorityOrg: WideString;
begin
    Result := DefaultInterface.CertificateAuthorityOrg;
end;

procedure TNotesAdministrationProcessProperties.Set_CertificateAuthorityOrg(const ppCertificateAuthorityOrg: WideString);
  { Warning: The property CertificateAuthorityOrg has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CertificateAuthorityOrg := ppCertificateAuthorityOrg;
end;

function TNotesAdministrationProcessProperties.Get_CertifierFile: WideString;
begin
    Result := DefaultInterface.CertifierFile;
end;

procedure TNotesAdministrationProcessProperties.Set_CertifierFile(const ppCertifierFile: WideString);
  { Warning: The property CertifierFile has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CertifierFile := ppCertifierFile;
end;

function TNotesAdministrationProcessProperties.Get_CertifierPassword: WideString;
begin
    Result := DefaultInterface.CertifierPassword;
end;

procedure TNotesAdministrationProcessProperties.Set_CertifierPassword(const ppCertifierPassword: WideString);
  { Warning: The property CertifierPassword has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CertifierPassword := ppCertifierPassword;
end;

function TNotesAdministrationProcessProperties.Get_IsCertificateAuthorityAvailable: WordBool;
begin
    Result := DefaultInterface.IsCertificateAuthorityAvailable;
end;

procedure TNotesAdministrationProcessProperties.Set_UseCertificateAuthority(pbUseCertificateAuthority: WordBool);
begin
  DefaultInterface.Set_UseCertificateAuthority(pbUseCertificateAuthority);
end;

function TNotesAdministrationProcessProperties.Get_UseCertificateAuthority: WordBool;
begin
    Result := DefaultInterface.UseCertificateAuthority;
end;

function TNotesAdministrationProcessProperties.Get_CertificateExpiration: IDateTime;
begin
    Result := DefaultInterface.CertificateExpiration;
end;

procedure TNotesAdministrationProcessProperties.Set_CertificateExpiration(const ppCertificateExpiration: IDateTime);
begin
  DefaultInterface.Set_CertificateExpiration(ppCertificateExpiration);
end;

{$ENDIF}

class function CoNotesReplicationEntry.Create: IReplicationEntry;
begin
  Result := CreateComObject(CLASS_NotesReplicationEntry) as IReplicationEntry;
end;

class function CoNotesReplicationEntry.CreateRemote(const MachineName: string): IReplicationEntry;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NotesReplicationEntry) as IReplicationEntry;
end;

procedure TNotesReplicationEntry.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{29131543-2EED-1069-BF5D-00DD011186B7}';
    IntfIID:   '{29131582-2EED-1069-BF5D-00DD011186B7}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TNotesReplicationEntry.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as IReplicationEntry;
  end;
end;

procedure TNotesReplicationEntry.ConnectTo(svrIntf: IReplicationEntry);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TNotesReplicationEntry.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TNotesReplicationEntry.GetDefaultInterface: IReplicationEntry;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TNotesReplicationEntry.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TNotesReplicationEntryProperties.Create(Self);
{$ENDIF}
end;

destructor TNotesReplicationEntry.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TNotesReplicationEntry.GetServerProperties: TNotesReplicationEntryProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TNotesReplicationEntry.Get_Source: WideString;
begin
    Result := DefaultInterface.Source;
end;

function TNotesReplicationEntry.Get_Destination: WideString;
begin
    Result := DefaultInterface.Destination;
end;

function TNotesReplicationEntry.Get_Formula: WideString;
begin
    Result := DefaultInterface.Formula;
end;

procedure TNotesReplicationEntry.Set_Formula(const ppFormula: WideString);
  { Warning: The property Formula has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Formula := ppFormula;
end;

function TNotesReplicationEntry.Get_Views: WideString;
begin
    Result := DefaultInterface.Views;
end;

procedure TNotesReplicationEntry.Set_Views(const ppViews: WideString);
  { Warning: The property Views has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Views := ppViews;
end;

function TNotesReplicationEntry.Get_IsIncludeForms: WordBool;
begin
    Result := DefaultInterface.IsIncludeForms;
end;

procedure TNotesReplicationEntry.Set_IsIncludeForms(pbIsIncludeForms: WordBool);
begin
  DefaultInterface.Set_IsIncludeForms(pbIsIncludeForms);
end;

function TNotesReplicationEntry.Get_IsIncludeAgents: WordBool;
begin
    Result := DefaultInterface.IsIncludeAgents;
end;

procedure TNotesReplicationEntry.Set_IsIncludeAgents(pbIsIncludeAgents: WordBool);
begin
  DefaultInterface.Set_IsIncludeAgents(pbIsIncludeAgents);
end;

function TNotesReplicationEntry.Get_IsIncludeFormulas: WordBool;
begin
    Result := DefaultInterface.IsIncludeFormulas;
end;

procedure TNotesReplicationEntry.Set_IsIncludeFormulas(pbIsIncludeFormulas: WordBool);
begin
  DefaultInterface.Set_IsIncludeFormulas(pbIsIncludeFormulas);
end;

function TNotesReplicationEntry.Get_IsIncludeDocuments: WordBool;
begin
    Result := DefaultInterface.IsIncludeDocuments;
end;

procedure TNotesReplicationEntry.Set_IsIncludeDocuments(pbIsIncludeDocuments: WordBool);
begin
  DefaultInterface.Set_IsIncludeDocuments(pbIsIncludeDocuments);
end;

function TNotesReplicationEntry.Get_IsIncludeACL: WordBool;
begin
    Result := DefaultInterface.IsIncludeACL;
end;

procedure TNotesReplicationEntry.Set_IsIncludeACL(pbIsIncludeACL: WordBool);
begin
  DefaultInterface.Set_IsIncludeACL(pbIsIncludeACL);
end;

function TNotesReplicationEntry.Remove: Integer;
begin
  Result := DefaultInterface.Remove;
end;

function TNotesReplicationEntry.Save: Integer;
begin
  Result := DefaultInterface.Save;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TNotesReplicationEntryProperties.Create(AServer: TNotesReplicationEntry);
begin
  inherited Create;
  FServer := AServer;
end;

function TNotesReplicationEntryProperties.GetDefaultInterface: IReplicationEntry;
begin
  Result := FServer.DefaultInterface;
end;

function TNotesReplicationEntryProperties.Get_Source: WideString;
begin
    Result := DefaultInterface.Source;
end;

function TNotesReplicationEntryProperties.Get_Destination: WideString;
begin
    Result := DefaultInterface.Destination;
end;

function TNotesReplicationEntryProperties.Get_Formula: WideString;
begin
    Result := DefaultInterface.Formula;
end;

procedure TNotesReplicationEntryProperties.Set_Formula(const ppFormula: WideString);
  { Warning: The property Formula has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Formula := ppFormula;
end;

function TNotesReplicationEntryProperties.Get_Views: WideString;
begin
    Result := DefaultInterface.Views;
end;

procedure TNotesReplicationEntryProperties.Set_Views(const ppViews: WideString);
  { Warning: The property Views has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Views := ppViews;
end;

function TNotesReplicationEntryProperties.Get_IsIncludeForms: WordBool;
begin
    Result := DefaultInterface.IsIncludeForms;
end;

procedure TNotesReplicationEntryProperties.Set_IsIncludeForms(pbIsIncludeForms: WordBool);
begin
  DefaultInterface.Set_IsIncludeForms(pbIsIncludeForms);
end;

function TNotesReplicationEntryProperties.Get_IsIncludeAgents: WordBool;
begin
    Result := DefaultInterface.IsIncludeAgents;
end;

procedure TNotesReplicationEntryProperties.Set_IsIncludeAgents(pbIsIncludeAgents: WordBool);
begin
  DefaultInterface.Set_IsIncludeAgents(pbIsIncludeAgents);
end;

function TNotesReplicationEntryProperties.Get_IsIncludeFormulas: WordBool;
begin
    Result := DefaultInterface.IsIncludeFormulas;
end;

procedure TNotesReplicationEntryProperties.Set_IsIncludeFormulas(pbIsIncludeFormulas: WordBool);
begin
  DefaultInterface.Set_IsIncludeFormulas(pbIsIncludeFormulas);
end;

function TNotesReplicationEntryProperties.Get_IsIncludeDocuments: WordBool;
begin
    Result := DefaultInterface.IsIncludeDocuments;
end;

procedure TNotesReplicationEntryProperties.Set_IsIncludeDocuments(pbIsIncludeDocuments: WordBool);
begin
  DefaultInterface.Set_IsIncludeDocuments(pbIsIncludeDocuments);
end;

function TNotesReplicationEntryProperties.Get_IsIncludeACL: WordBool;
begin
    Result := DefaultInterface.IsIncludeACL;
end;

procedure TNotesReplicationEntryProperties.Set_IsIncludeACL(pbIsIncludeACL: WordBool);
begin
  DefaultInterface.Set_IsIncludeACL(pbIsIncludeACL);
end;

{$ENDIF}

class function CoNotesColorObject.Create: IColorObject;
begin
  Result := CreateComObject(CLASS_NotesColorObject) as IColorObject;
end;

class function CoNotesColorObject.CreateRemote(const MachineName: string): IColorObject;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NotesColorObject) as IColorObject;
end;

procedure TNotesColorObject.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{29131544-2EED-1069-BF5D-00DD011186B7}';
    IntfIID:   '{29131583-2EED-1069-BF5D-00DD011186B7}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TNotesColorObject.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as IColorObject;
  end;
end;

procedure TNotesColorObject.ConnectTo(svrIntf: IColorObject);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TNotesColorObject.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TNotesColorObject.GetDefaultInterface: IColorObject;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TNotesColorObject.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TNotesColorObjectProperties.Create(Self);
{$ENDIF}
end;

destructor TNotesColorObject.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TNotesColorObject.GetServerProperties: TNotesColorObjectProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TNotesColorObject.Get_Red: Integer;
begin
    Result := DefaultInterface.Red;
end;

function TNotesColorObject.Get_Green: Integer;
begin
    Result := DefaultInterface.Green;
end;

function TNotesColorObject.Get_Blue: Integer;
begin
    Result := DefaultInterface.Blue;
end;

function TNotesColorObject.Get_Hue: Integer;
begin
    Result := DefaultInterface.Hue;
end;

function TNotesColorObject.Get_Saturation: Integer;
begin
    Result := DefaultInterface.Saturation;
end;

function TNotesColorObject.Get_Luminance: Integer;
begin
    Result := DefaultInterface.Luminance;
end;

function TNotesColorObject.Get_NotesColor: Integer;
begin
    Result := DefaultInterface.NotesColor;
end;

procedure TNotesColorObject.Set_NotesColor(pNotesColor: Integer);
begin
  DefaultInterface.Set_NotesColor(pNotesColor);
end;

function TNotesColorObject.SetRGB(Red: Integer; Green: Integer; Blue: Integer): Integer;
begin
  Result := DefaultInterface.SetRGB(Red, Green, Blue);
end;

function TNotesColorObject.SetHSL(Hue: Integer; Saturation: Integer; Luminance: Integer): Integer;
begin
  Result := DefaultInterface.SetHSL(Hue, Saturation, Luminance);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TNotesColorObjectProperties.Create(AServer: TNotesColorObject);
begin
  inherited Create;
  FServer := AServer;
end;

function TNotesColorObjectProperties.GetDefaultInterface: IColorObject;
begin
  Result := FServer.DefaultInterface;
end;

function TNotesColorObjectProperties.Get_Red: Integer;
begin
    Result := DefaultInterface.Red;
end;

function TNotesColorObjectProperties.Get_Green: Integer;
begin
    Result := DefaultInterface.Green;
end;

function TNotesColorObjectProperties.Get_Blue: Integer;
begin
    Result := DefaultInterface.Blue;
end;

function TNotesColorObjectProperties.Get_Hue: Integer;
begin
    Result := DefaultInterface.Hue;
end;

function TNotesColorObjectProperties.Get_Saturation: Integer;
begin
    Result := DefaultInterface.Saturation;
end;

function TNotesColorObjectProperties.Get_Luminance: Integer;
begin
    Result := DefaultInterface.Luminance;
end;

function TNotesColorObjectProperties.Get_NotesColor: Integer;
begin
    Result := DefaultInterface.NotesColor;
end;

procedure TNotesColorObjectProperties.Set_NotesColor(pNotesColor: Integer);
begin
  DefaultInterface.Set_NotesColor(pNotesColor);
end;

{$ENDIF}

class function CoNotesRichTextNavigator.Create: IRichTextNavigator;
begin
  Result := CreateComObject(CLASS_NotesRichTextNavigator) as IRichTextNavigator;
end;

class function CoNotesRichTextNavigator.CreateRemote(const MachineName: string): IRichTextNavigator;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NotesRichTextNavigator) as IRichTextNavigator;
end;

procedure TNotesRichTextNavigator.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{29131545-2EED-1069-BF5D-00DD011186B7}';
    IntfIID:   '{29131584-2EED-1069-BF5D-00DD011186B7}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TNotesRichTextNavigator.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as IRichTextNavigator;
  end;
end;

procedure TNotesRichTextNavigator.ConnectTo(svrIntf: IRichTextNavigator);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TNotesRichTextNavigator.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TNotesRichTextNavigator.GetDefaultInterface: IRichTextNavigator;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TNotesRichTextNavigator.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TNotesRichTextNavigatorProperties.Create(Self);
{$ENDIF}
end;

destructor TNotesRichTextNavigator.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TNotesRichTextNavigator.GetServerProperties: TNotesRichTextNavigatorProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TNotesRichTextNavigator.FindNthElement(lType: RT_ELEM; lOccurrence: Integer): WordBool;
begin
  Result := DefaultInterface.FindNthElement(lType, lOccurrence);
end;

function TNotesRichTextNavigator.FindFirstElement(lType: RT_ELEM): WordBool;
begin
  Result := DefaultInterface.FindFirstElement(lType);
end;

function TNotesRichTextNavigator.FindNextElement(lType: RT_ELEM; lOccurrence: Integer): WordBool;
begin
  Result := DefaultInterface.FindNextElement(lType, lOccurrence);
end;

function TNotesRichTextNavigator.FindLastElement(lType: RT_ELEM): WordBool;
begin
  Result := DefaultInterface.FindLastElement(lType);
end;

function TNotesRichTextNavigator.FindFirstString(const pTarget: WideString; lOptions: Integer): WordBool;
begin
  Result := DefaultInterface.FindFirstString(pTarget, lOptions);
end;

function TNotesRichTextNavigator.FindNextString(const pTarget: WideString; lOptions: Integer): WordBool;
begin
  Result := DefaultInterface.FindNextString(pTarget, lOptions);
end;

function TNotesRichTextNavigator.GetElement: OleVariant;
begin
  Result := DefaultInterface.GetElement;
end;

function TNotesRichTextNavigator.GetFirstElement(lType: RT_ELEM): OleVariant;
begin
  Result := DefaultInterface.GetFirstElement(lType);
end;

function TNotesRichTextNavigator.GetNextElement(lType: RT_ELEM; lOccurrence: Integer): OleVariant;
begin
  Result := DefaultInterface.GetNextElement(lType, lOccurrence);
end;

function TNotesRichTextNavigator.GetNthElement(lType: RT_ELEM; lOccurrence: Integer): OleVariant;
begin
  Result := DefaultInterface.GetNthElement(lType, lOccurrence);
end;

function TNotesRichTextNavigator.GetLastElement(lType: RT_ELEM): OleVariant;
begin
  Result := DefaultInterface.GetLastElement(lType);
end;

procedure TNotesRichTextNavigator.SetPosition(pIRTElement: OleVariant);
begin
  DefaultInterface.SetPosition(pIRTElement);
end;

procedure TNotesRichTextNavigator.SetPositionAtEnd(pIRTElement: OleVariant);
begin
  DefaultInterface.SetPositionAtEnd(pIRTElement);
end;

procedure TNotesRichTextNavigator.SetCharOffset(lOffset: Integer);
begin
  DefaultInterface.SetCharOffset(lOffset);
end;

function TNotesRichTextNavigator.Clone: IRichTextNavigator;
begin
  Result := DefaultInterface.Clone;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TNotesRichTextNavigatorProperties.Create(AServer: TNotesRichTextNavigator);
begin
  inherited Create;
  FServer := AServer;
end;

function TNotesRichTextNavigatorProperties.GetDefaultInterface: IRichTextNavigator;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoNotesRichTextRange.Create: IRichTextRange;
begin
  Result := CreateComObject(CLASS_NotesRichTextRange) as IRichTextRange;
end;

class function CoNotesRichTextRange.CreateRemote(const MachineName: string): IRichTextRange;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NotesRichTextRange) as IRichTextRange;
end;

procedure TNotesRichTextRange.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{29131546-2EED-1069-BF5D-00DD011186B7}';
    IntfIID:   '{29131585-2EED-1069-BF5D-00DD011186B7}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TNotesRichTextRange.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as IRichTextRange;
  end;
end;

procedure TNotesRichTextRange.ConnectTo(svrIntf: IRichTextRange);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TNotesRichTextRange.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TNotesRichTextRange.GetDefaultInterface: IRichTextRange;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TNotesRichTextRange.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TNotesRichTextRangeProperties.Create(Self);
{$ENDIF}
end;

destructor TNotesRichTextRange.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TNotesRichTextRange.GetServerProperties: TNotesRichTextRangeProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TNotesRichTextRange.Get_type_: RT_ELEM;
begin
    Result := DefaultInterface.type_;
end;

function TNotesRichTextRange.Get_TextRun: WideString;
begin
    Result := DefaultInterface.TextRun;
end;

function TNotesRichTextRange.Get_TextParagraph: WideString;
begin
    Result := DefaultInterface.TextParagraph;
end;

function TNotesRichTextRange.Get_Style: IRichTextStyle;
begin
    Result := DefaultInterface.Style;
end;

function TNotesRichTextRange.Get_Navigator: IRichTextNavigator;
begin
    Result := DefaultInterface.Navigator;
end;

procedure TNotesRichTextRange.SetStyle(const pIRTStyle: IRichTextStyle);
begin
  DefaultInterface.SetStyle(pIRTStyle);
end;

procedure TNotesRichTextRange.SetBegin(ppIRTElement: OleVariant);
begin
  DefaultInterface.SetBegin(ppIRTElement);
end;

procedure TNotesRichTextRange.SetEnd(ppIRTElement: OleVariant);
begin
  DefaultInterface.SetEnd(ppIRTElement);
end;

procedure TNotesRichTextRange.Reset(bBegin: WordBool; bEnd: WordBool);
begin
  DefaultInterface.Reset(bBegin, bEnd);
end;

procedure TNotesRichTextRange.Remove;
begin
  DefaultInterface.Remove;
end;

function TNotesRichTextRange.Clone: IRichTextRange;
begin
  Result := DefaultInterface.Clone;
end;

function TNotesRichTextRange.FindandReplace(const pFindString: WideString; 
                                            const pReplString: WideString; lOptions: Integer): Integer;
begin
  Result := DefaultInterface.FindandReplace(pFindString, pReplString, lOptions);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TNotesRichTextRangeProperties.Create(AServer: TNotesRichTextRange);
begin
  inherited Create;
  FServer := AServer;
end;

function TNotesRichTextRangeProperties.GetDefaultInterface: IRichTextRange;
begin
  Result := FServer.DefaultInterface;
end;

function TNotesRichTextRangeProperties.Get_type_: RT_ELEM;
begin
    Result := DefaultInterface.type_;
end;

function TNotesRichTextRangeProperties.Get_TextRun: WideString;
begin
    Result := DefaultInterface.TextRun;
end;

function TNotesRichTextRangeProperties.Get_TextParagraph: WideString;
begin
    Result := DefaultInterface.TextParagraph;
end;

function TNotesRichTextRangeProperties.Get_Style: IRichTextStyle;
begin
    Result := DefaultInterface.Style;
end;

function TNotesRichTextRangeProperties.Get_Navigator: IRichTextNavigator;
begin
    Result := DefaultInterface.Navigator;
end;

{$ENDIF}

class function CoNotesRichTextDoclink.Create: IRichTextDoclink;
begin
  Result := CreateComObject(CLASS_NotesRichTextDoclink) as IRichTextDoclink;
end;

class function CoNotesRichTextDoclink.CreateRemote(const MachineName: string): IRichTextDoclink;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NotesRichTextDoclink) as IRichTextDoclink;
end;

procedure TNotesRichTextDoclink.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{29131547-2EED-1069-BF5D-00DD011186B7}';
    IntfIID:   '{29131586-2EED-1069-BF5D-00DD011186B7}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TNotesRichTextDoclink.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as IRichTextDoclink;
  end;
end;

procedure TNotesRichTextDoclink.ConnectTo(svrIntf: IRichTextDoclink);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TNotesRichTextDoclink.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TNotesRichTextDoclink.GetDefaultInterface: IRichTextDoclink;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TNotesRichTextDoclink.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TNotesRichTextDoclinkProperties.Create(Self);
{$ENDIF}
end;

destructor TNotesRichTextDoclink.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TNotesRichTextDoclink.GetServerProperties: TNotesRichTextDoclinkProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TNotesRichTextDoclink.Get_DBReplicaID: WideString;
begin
    Result := DefaultInterface.DBReplicaID;
end;

procedure TNotesRichTextDoclink.Set_DBReplicaID(const pDBReplicaID: WideString);
  { Warning: The property DBReplicaID has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DBReplicaID := pDBReplicaID;
end;

function TNotesRichTextDoclink.Get_ViewUNID: WideString;
begin
    Result := DefaultInterface.ViewUNID;
end;

procedure TNotesRichTextDoclink.Set_ViewUNID(const pViewUNID: WideString);
  { Warning: The property ViewUNID has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ViewUNID := pViewUNID;
end;

function TNotesRichTextDoclink.Get_DocUNID: WideString;
begin
    Result := DefaultInterface.DocUNID;
end;

procedure TNotesRichTextDoclink.Set_DocUNID(const pDocUNID: WideString);
  { Warning: The property DocUNID has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DocUNID := pDocUNID;
end;

function TNotesRichTextDoclink.Get_DisplayComment: WideString;
begin
    Result := DefaultInterface.DisplayComment;
end;

procedure TNotesRichTextDoclink.Set_DisplayComment(const pDisplayComment: WideString);
  { Warning: The property DisplayComment has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DisplayComment := pDisplayComment;
end;

function TNotesRichTextDoclink.Get_ServerHint: WideString;
begin
    Result := DefaultInterface.ServerHint;
end;

procedure TNotesRichTextDoclink.Set_ServerHint(const pServerHint: WideString);
  { Warning: The property ServerHint has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ServerHint := pServerHint;
end;

function TNotesRichTextDoclink.Get_HotSpotText: WideString;
begin
    Result := DefaultInterface.HotSpotText;
end;

procedure TNotesRichTextDoclink.Set_HotSpotText(const pHotspottext: WideString);
  { Warning: The property HotSpotText has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.HotSpotText := pHotspottext;
end;

function TNotesRichTextDoclink.Get_HotSpotTextStyle: IRichTextStyle;
begin
    Result := DefaultInterface.HotSpotTextStyle;
end;

procedure TNotesRichTextDoclink.Remove;
begin
  DefaultInterface.Remove;
end;

procedure TNotesRichTextDoclink.SetHotSpotTextStyle(const pIRTStyle: IRichTextStyle);
begin
  DefaultInterface.SetHotSpotTextStyle(pIRTStyle);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TNotesRichTextDoclinkProperties.Create(AServer: TNotesRichTextDoclink);
begin
  inherited Create;
  FServer := AServer;
end;

function TNotesRichTextDoclinkProperties.GetDefaultInterface: IRichTextDoclink;
begin
  Result := FServer.DefaultInterface;
end;

function TNotesRichTextDoclinkProperties.Get_DBReplicaID: WideString;
begin
    Result := DefaultInterface.DBReplicaID;
end;

procedure TNotesRichTextDoclinkProperties.Set_DBReplicaID(const pDBReplicaID: WideString);
  { Warning: The property DBReplicaID has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DBReplicaID := pDBReplicaID;
end;

function TNotesRichTextDoclinkProperties.Get_ViewUNID: WideString;
begin
    Result := DefaultInterface.ViewUNID;
end;

procedure TNotesRichTextDoclinkProperties.Set_ViewUNID(const pViewUNID: WideString);
  { Warning: The property ViewUNID has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ViewUNID := pViewUNID;
end;

function TNotesRichTextDoclinkProperties.Get_DocUNID: WideString;
begin
    Result := DefaultInterface.DocUNID;
end;

procedure TNotesRichTextDoclinkProperties.Set_DocUNID(const pDocUNID: WideString);
  { Warning: The property DocUNID has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DocUNID := pDocUNID;
end;

function TNotesRichTextDoclinkProperties.Get_DisplayComment: WideString;
begin
    Result := DefaultInterface.DisplayComment;
end;

procedure TNotesRichTextDoclinkProperties.Set_DisplayComment(const pDisplayComment: WideString);
  { Warning: The property DisplayComment has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DisplayComment := pDisplayComment;
end;

function TNotesRichTextDoclinkProperties.Get_ServerHint: WideString;
begin
    Result := DefaultInterface.ServerHint;
end;

procedure TNotesRichTextDoclinkProperties.Set_ServerHint(const pServerHint: WideString);
  { Warning: The property ServerHint has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ServerHint := pServerHint;
end;

function TNotesRichTextDoclinkProperties.Get_HotSpotText: WideString;
begin
    Result := DefaultInterface.HotSpotText;
end;

procedure TNotesRichTextDoclinkProperties.Set_HotSpotText(const pHotspottext: WideString);
  { Warning: The property HotSpotText has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.HotSpotText := pHotspottext;
end;

function TNotesRichTextDoclinkProperties.Get_HotSpotTextStyle: IRichTextStyle;
begin
    Result := DefaultInterface.HotSpotTextStyle;
end;

{$ENDIF}

class function CoNotesRichTextSection.Create: IRichTextSection;
begin
  Result := CreateComObject(CLASS_NotesRichTextSection) as IRichTextSection;
end;

class function CoNotesRichTextSection.CreateRemote(const MachineName: string): IRichTextSection;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NotesRichTextSection) as IRichTextSection;
end;

procedure TNotesRichTextSection.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{29131548-2EED-1069-BF5D-00DD011186B7}';
    IntfIID:   '{29131587-2EED-1069-BF5D-00DD011186B7}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TNotesRichTextSection.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as IRichTextSection;
  end;
end;

procedure TNotesRichTextSection.ConnectTo(svrIntf: IRichTextSection);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TNotesRichTextSection.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TNotesRichTextSection.GetDefaultInterface: IRichTextSection;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TNotesRichTextSection.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TNotesRichTextSectionProperties.Create(Self);
{$ENDIF}
end;

destructor TNotesRichTextSection.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TNotesRichTextSection.GetServerProperties: TNotesRichTextSectionProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TNotesRichTextSection.Get_Title: WideString;
begin
    Result := DefaultInterface.Title;
end;

procedure TNotesRichTextSection.Set_Title(const pTitle: WideString);
  { Warning: The property Title has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Title := pTitle;
end;

function TNotesRichTextSection.Get_IsExpanded: WordBool;
begin
    Result := DefaultInterface.IsExpanded;
end;

procedure TNotesRichTextSection.Set_IsExpanded(pbExpanded: WordBool);
begin
  DefaultInterface.Set_IsExpanded(pbExpanded);
end;

function TNotesRichTextSection.Get_TitleStyle: IRichTextStyle;
begin
    Result := DefaultInterface.TitleStyle;
end;

function TNotesRichTextSection.Get_BarColor: IColorObject;
begin
    Result := DefaultInterface.BarColor;
end;

procedure TNotesRichTextSection.SetTitleStyle(const pIRTStyle: IRichTextStyle);
begin
  DefaultInterface.SetTitleStyle(pIRTStyle);
end;

procedure TNotesRichTextSection.SetBarColor(const pIColorObj: IColorObject);
begin
  DefaultInterface.SetBarColor(pIColorObj);
end;

procedure TNotesRichTextSection.Remove;
begin
  DefaultInterface.Remove;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TNotesRichTextSectionProperties.Create(AServer: TNotesRichTextSection);
begin
  inherited Create;
  FServer := AServer;
end;

function TNotesRichTextSectionProperties.GetDefaultInterface: IRichTextSection;
begin
  Result := FServer.DefaultInterface;
end;

function TNotesRichTextSectionProperties.Get_Title: WideString;
begin
    Result := DefaultInterface.Title;
end;

procedure TNotesRichTextSectionProperties.Set_Title(const pTitle: WideString);
  { Warning: The property Title has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Title := pTitle;
end;

function TNotesRichTextSectionProperties.Get_IsExpanded: WordBool;
begin
    Result := DefaultInterface.IsExpanded;
end;

procedure TNotesRichTextSectionProperties.Set_IsExpanded(pbExpanded: WordBool);
begin
  DefaultInterface.Set_IsExpanded(pbExpanded);
end;

function TNotesRichTextSectionProperties.Get_TitleStyle: IRichTextStyle;
begin
    Result := DefaultInterface.TitleStyle;
end;

function TNotesRichTextSectionProperties.Get_BarColor: IColorObject;
begin
    Result := DefaultInterface.BarColor;
end;

{$ENDIF}

class function CoNotesRichTextTable.Create: IRichTextTable;
begin
  Result := CreateComObject(CLASS_NotesRichTextTable) as IRichTextTable;
end;

class function CoNotesRichTextTable.CreateRemote(const MachineName: string): IRichTextTable;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NotesRichTextTable) as IRichTextTable;
end;

procedure TNotesRichTextTable.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{29131549-2EED-1069-BF5D-00DD011186B7}';
    IntfIID:   '{29131588-2EED-1069-BF5D-00DD011186B7}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TNotesRichTextTable.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as IRichTextTable;
  end;
end;

procedure TNotesRichTextTable.ConnectTo(svrIntf: IRichTextTable);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TNotesRichTextTable.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TNotesRichTextTable.GetDefaultInterface: IRichTextTable;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TNotesRichTextTable.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TNotesRichTextTableProperties.Create(Self);
{$ENDIF}
end;

destructor TNotesRichTextTable.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TNotesRichTextTable.GetServerProperties: TNotesRichTextTableProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TNotesRichTextTable.Get_Style: RT_TBLSTYLE;
begin
    Result := DefaultInterface.Style;
end;

function TNotesRichTextTable.Get_RowCount: Integer;
begin
    Result := DefaultInterface.RowCount;
end;

function TNotesRichTextTable.Get_ColumnCount: Integer;
begin
    Result := DefaultInterface.ColumnCount;
end;

function TNotesRichTextTable.Get_RightToLeft: WordBool;
begin
    Result := DefaultInterface.RightToLeft;
end;

procedure TNotesRichTextTable.Set_RightToLeft(pbRightToLeft: WordBool);
begin
  DefaultInterface.Set_RightToLeft(pbRightToLeft);
end;

function TNotesRichTextTable.Get_RowLabels: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.RowLabels;
end;

procedure TNotesRichTextTable.Set_RowLabels(pRowLabels: OleVariant);
begin
  DefaultInterface.Set_RowLabels(pRowLabels);
end;

function TNotesRichTextTable.Get_Color: IColorObject;
begin
    Result := DefaultInterface.Color;
end;

function TNotesRichTextTable.Get_AlternateColor: IColorObject;
begin
    Result := DefaultInterface.AlternateColor;
end;

procedure TNotesRichTextTable.Set_Style(plStyle: RT_TBLSTYLE);
begin
  DefaultInterface.Set_Style(plStyle);
end;

procedure TNotesRichTextTable.AddRow(lCount: Integer; lTargetRow: Integer);
begin
  DefaultInterface.AddRow(lCount, lTargetRow);
end;

procedure TNotesRichTextTable.RemoveRow(lCount: Integer; lTargetRow: Integer);
begin
  DefaultInterface.RemoveRow(lCount, lTargetRow);
end;

procedure TNotesRichTextTable.Remove;
begin
  DefaultInterface.Remove;
end;

procedure TNotesRichTextTable.SetColor(const pIColorObj: IColorObject);
begin
  DefaultInterface.SetColor(pIColorObj);
end;

procedure TNotesRichTextTable.SetAlternateColor(const pIColorObj: IColorObject);
begin
  DefaultInterface.SetAlternateColor(pIColorObj);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TNotesRichTextTableProperties.Create(AServer: TNotesRichTextTable);
begin
  inherited Create;
  FServer := AServer;
end;

function TNotesRichTextTableProperties.GetDefaultInterface: IRichTextTable;
begin
  Result := FServer.DefaultInterface;
end;

function TNotesRichTextTableProperties.Get_Style: RT_TBLSTYLE;
begin
    Result := DefaultInterface.Style;
end;

function TNotesRichTextTableProperties.Get_RowCount: Integer;
begin
    Result := DefaultInterface.RowCount;
end;

function TNotesRichTextTableProperties.Get_ColumnCount: Integer;
begin
    Result := DefaultInterface.ColumnCount;
end;

function TNotesRichTextTableProperties.Get_RightToLeft: WordBool;
begin
    Result := DefaultInterface.RightToLeft;
end;

procedure TNotesRichTextTableProperties.Set_RightToLeft(pbRightToLeft: WordBool);
begin
  DefaultInterface.Set_RightToLeft(pbRightToLeft);
end;

function TNotesRichTextTableProperties.Get_RowLabels: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.RowLabels;
end;

procedure TNotesRichTextTableProperties.Set_RowLabels(pRowLabels: OleVariant);
begin
  DefaultInterface.Set_RowLabels(pRowLabels);
end;

function TNotesRichTextTableProperties.Get_Color: IColorObject;
begin
    Result := DefaultInterface.Color;
end;

function TNotesRichTextTableProperties.Get_AlternateColor: IColorObject;
begin
    Result := DefaultInterface.AlternateColor;
end;

procedure TNotesRichTextTableProperties.Set_Style(plStyle: RT_TBLSTYLE);
begin
  DefaultInterface.Set_Style(plStyle);
end;

{$ENDIF}

class function CoNotesNoteCollection.Create: INoteCollection;
begin
  Result := CreateComObject(CLASS_NotesNoteCollection) as INoteCollection;
end;

class function CoNotesNoteCollection.CreateRemote(const MachineName: string): INoteCollection;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NotesNoteCollection) as INoteCollection;
end;

procedure TNotesNoteCollection.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{29131550-2EED-1069-BF5D-00DD011186B7}';
    IntfIID:   '{29131589-2EED-1069-BF5D-00DD011186B7}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TNotesNoteCollection.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as INoteCollection;
  end;
end;

procedure TNotesNoteCollection.ConnectTo(svrIntf: INoteCollection);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TNotesNoteCollection.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TNotesNoteCollection.GetDefaultInterface: INoteCollection;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TNotesNoteCollection.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TNotesNoteCollectionProperties.Create(Self);
{$ENDIF}
end;

destructor TNotesNoteCollection.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TNotesNoteCollection.GetServerProperties: TNotesNoteCollectionProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TNotesNoteCollection.Get_SelectDocuments: WordBool;
begin
    Result := DefaultInterface.SelectDocuments;
end;

procedure TNotesNoteCollection.Set_SelectDocuments(pbFlag: WordBool);
begin
  DefaultInterface.Set_SelectDocuments(pbFlag);
end;

function TNotesNoteCollection.Get_SelectProfiles: WordBool;
begin
    Result := DefaultInterface.SelectProfiles;
end;

procedure TNotesNoteCollection.Set_SelectProfiles(pbFlag: WordBool);
begin
  DefaultInterface.Set_SelectProfiles(pbFlag);
end;

function TNotesNoteCollection.Get_SelectForms: WordBool;
begin
    Result := DefaultInterface.SelectForms;
end;

procedure TNotesNoteCollection.Set_SelectForms(pbFlag: WordBool);
begin
  DefaultInterface.Set_SelectForms(pbFlag);
end;

function TNotesNoteCollection.Get_SelectSubforms: WordBool;
begin
    Result := DefaultInterface.SelectSubforms;
end;

procedure TNotesNoteCollection.Set_SelectSubforms(pbFlag: WordBool);
begin
  DefaultInterface.Set_SelectSubforms(pbFlag);
end;

function TNotesNoteCollection.Get_SelectActions: WordBool;
begin
    Result := DefaultInterface.SelectActions;
end;

procedure TNotesNoteCollection.Set_SelectActions(pbFlag: WordBool);
begin
  DefaultInterface.Set_SelectActions(pbFlag);
end;

function TNotesNoteCollection.Get_SelectFramesets: WordBool;
begin
    Result := DefaultInterface.SelectFramesets;
end;

procedure TNotesNoteCollection.Set_SelectFramesets(pbFlag: WordBool);
begin
  DefaultInterface.Set_SelectFramesets(pbFlag);
end;

function TNotesNoteCollection.Get_SelectPages: WordBool;
begin
    Result := DefaultInterface.SelectPages;
end;

procedure TNotesNoteCollection.Set_SelectPages(pbFlag: WordBool);
begin
  DefaultInterface.Set_SelectPages(pbFlag);
end;

function TNotesNoteCollection.Get_SelectImageResources: WordBool;
begin
    Result := DefaultInterface.SelectImageResources;
end;

procedure TNotesNoteCollection.Set_SelectImageResources(pbFlag: WordBool);
begin
  DefaultInterface.Set_SelectImageResources(pbFlag);
end;

function TNotesNoteCollection.Get_SelectStyleSheetResources: WordBool;
begin
    Result := DefaultInterface.SelectStyleSheetResources;
end;

procedure TNotesNoteCollection.Set_SelectStyleSheetResources(pbFlag: WordBool);
begin
  DefaultInterface.Set_SelectStyleSheetResources(pbFlag);
end;

function TNotesNoteCollection.Get_SelectJavaResources: WordBool;
begin
    Result := DefaultInterface.SelectJavaResources;
end;

procedure TNotesNoteCollection.Set_SelectJavaResources(pbFlag: WordBool);
begin
  DefaultInterface.Set_SelectJavaResources(pbFlag);
end;

function TNotesNoteCollection.Get_SelectMiscFormatElements: WordBool;
begin
    Result := DefaultInterface.SelectMiscFormatElements;
end;

procedure TNotesNoteCollection.Set_SelectMiscFormatElements(pbFlag: WordBool);
begin
  DefaultInterface.Set_SelectMiscFormatElements(pbFlag);
end;

function TNotesNoteCollection.Get_SelectViews: WordBool;
begin
    Result := DefaultInterface.SelectViews;
end;

procedure TNotesNoteCollection.Set_SelectViews(pbFlag: WordBool);
begin
  DefaultInterface.Set_SelectViews(pbFlag);
end;

function TNotesNoteCollection.Get_SelectFolders: WordBool;
begin
    Result := DefaultInterface.SelectFolders;
end;

procedure TNotesNoteCollection.Set_SelectFolders(pbFlag: WordBool);
begin
  DefaultInterface.Set_SelectFolders(pbFlag);
end;

function TNotesNoteCollection.Get_SelectNavigators: WordBool;
begin
    Result := DefaultInterface.SelectNavigators;
end;

procedure TNotesNoteCollection.Set_SelectNavigators(pbFlag: WordBool);
begin
  DefaultInterface.Set_SelectNavigators(pbFlag);
end;

function TNotesNoteCollection.Get_SelectMiscIndexElements: WordBool;
begin
    Result := DefaultInterface.SelectMiscIndexElements;
end;

procedure TNotesNoteCollection.Set_SelectMiscIndexElements(pbFlag: WordBool);
begin
  DefaultInterface.Set_SelectMiscIndexElements(pbFlag);
end;

function TNotesNoteCollection.Get_SelectIcon: WordBool;
begin
    Result := DefaultInterface.SelectIcon;
end;

procedure TNotesNoteCollection.Set_SelectIcon(pbFlag: WordBool);
begin
  DefaultInterface.Set_SelectIcon(pbFlag);
end;

function TNotesNoteCollection.Get_SelectAgents: WordBool;
begin
    Result := DefaultInterface.SelectAgents;
end;

procedure TNotesNoteCollection.Set_SelectAgents(pbFlag: WordBool);
begin
  DefaultInterface.Set_SelectAgents(pbFlag);
end;

function TNotesNoteCollection.Get_SelectOutlines: WordBool;
begin
    Result := DefaultInterface.SelectOutlines;
end;

procedure TNotesNoteCollection.Set_SelectOutlines(pbFlag: WordBool);
begin
  DefaultInterface.Set_SelectOutlines(pbFlag);
end;

function TNotesNoteCollection.Get_SelectDatabaseScript: WordBool;
begin
    Result := DefaultInterface.SelectDatabaseScript;
end;

procedure TNotesNoteCollection.Set_SelectDatabaseScript(pbFlag: WordBool);
begin
  DefaultInterface.Set_SelectDatabaseScript(pbFlag);
end;

function TNotesNoteCollection.Get_SelectScriptLibraries: WordBool;
begin
    Result := DefaultInterface.SelectScriptLibraries;
end;

procedure TNotesNoteCollection.Set_SelectScriptLibraries(pbFlag: WordBool);
begin
  DefaultInterface.Set_SelectScriptLibraries(pbFlag);
end;

function TNotesNoteCollection.Get_SelectDataConnections: WordBool;
begin
    Result := DefaultInterface.SelectDataConnections;
end;

procedure TNotesNoteCollection.Set_SelectDataConnections(pbFlag: WordBool);
begin
  DefaultInterface.Set_SelectDataConnections(pbFlag);
end;

function TNotesNoteCollection.Get_SelectMiscCodeElements: WordBool;
begin
    Result := DefaultInterface.SelectMiscCodeElements;
end;

procedure TNotesNoteCollection.Set_SelectMiscCodeElements(pbFlag: WordBool);
begin
  DefaultInterface.Set_SelectMiscCodeElements(pbFlag);
end;

function TNotesNoteCollection.Get_SelectSharedFields: WordBool;
begin
    Result := DefaultInterface.SelectSharedFields;
end;

procedure TNotesNoteCollection.Set_SelectSharedFields(pbFlag: WordBool);
begin
  DefaultInterface.Set_SelectSharedFields(pbFlag);
end;

function TNotesNoteCollection.Get_SelectHelpAbout: WordBool;
begin
    Result := DefaultInterface.SelectHelpAbout;
end;

procedure TNotesNoteCollection.Set_SelectHelpAbout(pbFlag: WordBool);
begin
  DefaultInterface.Set_SelectHelpAbout(pbFlag);
end;

function TNotesNoteCollection.Get_SelectHelpUsing: WordBool;
begin
    Result := DefaultInterface.SelectHelpUsing;
end;

procedure TNotesNoteCollection.Set_SelectHelpUsing(pbFlag: WordBool);
begin
  DefaultInterface.Set_SelectHelpUsing(pbFlag);
end;

function TNotesNoteCollection.Get_SelectHelpIndex: WordBool;
begin
    Result := DefaultInterface.SelectHelpIndex;
end;

procedure TNotesNoteCollection.Set_SelectHelpIndex(pbFlag: WordBool);
begin
  DefaultInterface.Set_SelectHelpIndex(pbFlag);
end;

function TNotesNoteCollection.Get_SelectReplicationFormulas: WordBool;
begin
    Result := DefaultInterface.SelectReplicationFormulas;
end;

procedure TNotesNoteCollection.Set_SelectReplicationFormulas(pbFlag: WordBool);
begin
  DefaultInterface.Set_SelectReplicationFormulas(pbFlag);
end;

function TNotesNoteCollection.Get_SelectACL: WordBool;
begin
    Result := DefaultInterface.SelectACL;
end;

procedure TNotesNoteCollection.Set_SelectACL(pbFlag: WordBool);
begin
  DefaultInterface.Set_SelectACL(pbFlag);
end;

function TNotesNoteCollection.Get_SelectionFormula: WideString;
begin
    Result := DefaultInterface.SelectionFormula;
end;

procedure TNotesNoteCollection.Set_SelectionFormula(const ppSelectionFormula: WideString);
  { Warning: The property SelectionFormula has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.SelectionFormula := ppSelectionFormula;
end;

function TNotesNoteCollection.Get_SinceTime: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.SinceTime;
end;

procedure TNotesNoteCollection.Set_SinceTime(pDate: OleVariant);
begin
  DefaultInterface.Set_SinceTime(pDate);
end;

function TNotesNoteCollection.Get_LastBuildTime: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.LastBuildTime;
end;

function TNotesNoteCollection.Get_Count: Integer;
begin
    Result := DefaultInterface.Count;
end;

function TNotesNoteCollection.Get_Parent: IDatabase;
begin
    Result := DefaultInterface.Parent;
end;

procedure TNotesNoteCollection.SelectAllNotes(bFlag: WordBool);
begin
  DefaultInterface.SelectAllNotes(bFlag);
end;

procedure TNotesNoteCollection.SelectAllDataNotes(bFlag: WordBool);
begin
  DefaultInterface.SelectAllDataNotes(bFlag);
end;

procedure TNotesNoteCollection.SelectAllAdminNotes(bFlag: WordBool);
begin
  DefaultInterface.SelectAllAdminNotes(bFlag);
end;

procedure TNotesNoteCollection.SelectAllDesignElements(bFlag: WordBool);
begin
  DefaultInterface.SelectAllDesignElements(bFlag);
end;

procedure TNotesNoteCollection.SelectAllFormatElements(bFlag: WordBool);
begin
  DefaultInterface.SelectAllFormatElements(bFlag);
end;

procedure TNotesNoteCollection.SelectAllIndexElements(bFlag: WordBool);
begin
  DefaultInterface.SelectAllIndexElements(bFlag);
end;

procedure TNotesNoteCollection.SelectAllCodeElements(bFlag: WordBool);
begin
  DefaultInterface.SelectAllCodeElements(bFlag);
end;

procedure TNotesNoteCollection.BuildCollection;
begin
  DefaultInterface.BuildCollection;
end;

procedure TNotesNoteCollection.ClearCollection;
begin
  DefaultInterface.ClearCollection;
end;

procedure TNotesNoteCollection.Add(NoteIds: OleVariant);
begin
  DefaultInterface.Add(NoteIds);
end;

procedure TNotesNoteCollection.Remove(NoteIds: OleVariant);
begin
  DefaultInterface.Remove(NoteIds);
end;

procedure TNotesNoteCollection.Intersect(NoteIds: OleVariant);
begin
  DefaultInterface.Intersect(NoteIds);
end;

function TNotesNoteCollection.GetFirstNoteId: WideString;
begin
  Result := DefaultInterface.GetFirstNoteId;
end;

function TNotesNoteCollection.GetNextNoteId(const pNoteid: WideString): WideString;
begin
  Result := DefaultInterface.GetNextNoteId(pNoteid);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TNotesNoteCollectionProperties.Create(AServer: TNotesNoteCollection);
begin
  inherited Create;
  FServer := AServer;
end;

function TNotesNoteCollectionProperties.GetDefaultInterface: INoteCollection;
begin
  Result := FServer.DefaultInterface;
end;

function TNotesNoteCollectionProperties.Get_SelectDocuments: WordBool;
begin
    Result := DefaultInterface.SelectDocuments;
end;

procedure TNotesNoteCollectionProperties.Set_SelectDocuments(pbFlag: WordBool);
begin
  DefaultInterface.Set_SelectDocuments(pbFlag);
end;

function TNotesNoteCollectionProperties.Get_SelectProfiles: WordBool;
begin
    Result := DefaultInterface.SelectProfiles;
end;

procedure TNotesNoteCollectionProperties.Set_SelectProfiles(pbFlag: WordBool);
begin
  DefaultInterface.Set_SelectProfiles(pbFlag);
end;

function TNotesNoteCollectionProperties.Get_SelectForms: WordBool;
begin
    Result := DefaultInterface.SelectForms;
end;

procedure TNotesNoteCollectionProperties.Set_SelectForms(pbFlag: WordBool);
begin
  DefaultInterface.Set_SelectForms(pbFlag);
end;

function TNotesNoteCollectionProperties.Get_SelectSubforms: WordBool;
begin
    Result := DefaultInterface.SelectSubforms;
end;

procedure TNotesNoteCollectionProperties.Set_SelectSubforms(pbFlag: WordBool);
begin
  DefaultInterface.Set_SelectSubforms(pbFlag);
end;

function TNotesNoteCollectionProperties.Get_SelectActions: WordBool;
begin
    Result := DefaultInterface.SelectActions;
end;

procedure TNotesNoteCollectionProperties.Set_SelectActions(pbFlag: WordBool);
begin
  DefaultInterface.Set_SelectActions(pbFlag);
end;

function TNotesNoteCollectionProperties.Get_SelectFramesets: WordBool;
begin
    Result := DefaultInterface.SelectFramesets;
end;

procedure TNotesNoteCollectionProperties.Set_SelectFramesets(pbFlag: WordBool);
begin
  DefaultInterface.Set_SelectFramesets(pbFlag);
end;

function TNotesNoteCollectionProperties.Get_SelectPages: WordBool;
begin
    Result := DefaultInterface.SelectPages;
end;

procedure TNotesNoteCollectionProperties.Set_SelectPages(pbFlag: WordBool);
begin
  DefaultInterface.Set_SelectPages(pbFlag);
end;

function TNotesNoteCollectionProperties.Get_SelectImageResources: WordBool;
begin
    Result := DefaultInterface.SelectImageResources;
end;

procedure TNotesNoteCollectionProperties.Set_SelectImageResources(pbFlag: WordBool);
begin
  DefaultInterface.Set_SelectImageResources(pbFlag);
end;

function TNotesNoteCollectionProperties.Get_SelectStyleSheetResources: WordBool;
begin
    Result := DefaultInterface.SelectStyleSheetResources;
end;

procedure TNotesNoteCollectionProperties.Set_SelectStyleSheetResources(pbFlag: WordBool);
begin
  DefaultInterface.Set_SelectStyleSheetResources(pbFlag);
end;

function TNotesNoteCollectionProperties.Get_SelectJavaResources: WordBool;
begin
    Result := DefaultInterface.SelectJavaResources;
end;

procedure TNotesNoteCollectionProperties.Set_SelectJavaResources(pbFlag: WordBool);
begin
  DefaultInterface.Set_SelectJavaResources(pbFlag);
end;

function TNotesNoteCollectionProperties.Get_SelectMiscFormatElements: WordBool;
begin
    Result := DefaultInterface.SelectMiscFormatElements;
end;

procedure TNotesNoteCollectionProperties.Set_SelectMiscFormatElements(pbFlag: WordBool);
begin
  DefaultInterface.Set_SelectMiscFormatElements(pbFlag);
end;

function TNotesNoteCollectionProperties.Get_SelectViews: WordBool;
begin
    Result := DefaultInterface.SelectViews;
end;

procedure TNotesNoteCollectionProperties.Set_SelectViews(pbFlag: WordBool);
begin
  DefaultInterface.Set_SelectViews(pbFlag);
end;

function TNotesNoteCollectionProperties.Get_SelectFolders: WordBool;
begin
    Result := DefaultInterface.SelectFolders;
end;

procedure TNotesNoteCollectionProperties.Set_SelectFolders(pbFlag: WordBool);
begin
  DefaultInterface.Set_SelectFolders(pbFlag);
end;

function TNotesNoteCollectionProperties.Get_SelectNavigators: WordBool;
begin
    Result := DefaultInterface.SelectNavigators;
end;

procedure TNotesNoteCollectionProperties.Set_SelectNavigators(pbFlag: WordBool);
begin
  DefaultInterface.Set_SelectNavigators(pbFlag);
end;

function TNotesNoteCollectionProperties.Get_SelectMiscIndexElements: WordBool;
begin
    Result := DefaultInterface.SelectMiscIndexElements;
end;

procedure TNotesNoteCollectionProperties.Set_SelectMiscIndexElements(pbFlag: WordBool);
begin
  DefaultInterface.Set_SelectMiscIndexElements(pbFlag);
end;

function TNotesNoteCollectionProperties.Get_SelectIcon: WordBool;
begin
    Result := DefaultInterface.SelectIcon;
end;

procedure TNotesNoteCollectionProperties.Set_SelectIcon(pbFlag: WordBool);
begin
  DefaultInterface.Set_SelectIcon(pbFlag);
end;

function TNotesNoteCollectionProperties.Get_SelectAgents: WordBool;
begin
    Result := DefaultInterface.SelectAgents;
end;

procedure TNotesNoteCollectionProperties.Set_SelectAgents(pbFlag: WordBool);
begin
  DefaultInterface.Set_SelectAgents(pbFlag);
end;

function TNotesNoteCollectionProperties.Get_SelectOutlines: WordBool;
begin
    Result := DefaultInterface.SelectOutlines;
end;

procedure TNotesNoteCollectionProperties.Set_SelectOutlines(pbFlag: WordBool);
begin
  DefaultInterface.Set_SelectOutlines(pbFlag);
end;

function TNotesNoteCollectionProperties.Get_SelectDatabaseScript: WordBool;
begin
    Result := DefaultInterface.SelectDatabaseScript;
end;

procedure TNotesNoteCollectionProperties.Set_SelectDatabaseScript(pbFlag: WordBool);
begin
  DefaultInterface.Set_SelectDatabaseScript(pbFlag);
end;

function TNotesNoteCollectionProperties.Get_SelectScriptLibraries: WordBool;
begin
    Result := DefaultInterface.SelectScriptLibraries;
end;

procedure TNotesNoteCollectionProperties.Set_SelectScriptLibraries(pbFlag: WordBool);
begin
  DefaultInterface.Set_SelectScriptLibraries(pbFlag);
end;

function TNotesNoteCollectionProperties.Get_SelectDataConnections: WordBool;
begin
    Result := DefaultInterface.SelectDataConnections;
end;

procedure TNotesNoteCollectionProperties.Set_SelectDataConnections(pbFlag: WordBool);
begin
  DefaultInterface.Set_SelectDataConnections(pbFlag);
end;

function TNotesNoteCollectionProperties.Get_SelectMiscCodeElements: WordBool;
begin
    Result := DefaultInterface.SelectMiscCodeElements;
end;

procedure TNotesNoteCollectionProperties.Set_SelectMiscCodeElements(pbFlag: WordBool);
begin
  DefaultInterface.Set_SelectMiscCodeElements(pbFlag);
end;

function TNotesNoteCollectionProperties.Get_SelectSharedFields: WordBool;
begin
    Result := DefaultInterface.SelectSharedFields;
end;

procedure TNotesNoteCollectionProperties.Set_SelectSharedFields(pbFlag: WordBool);
begin
  DefaultInterface.Set_SelectSharedFields(pbFlag);
end;

function TNotesNoteCollectionProperties.Get_SelectHelpAbout: WordBool;
begin
    Result := DefaultInterface.SelectHelpAbout;
end;

procedure TNotesNoteCollectionProperties.Set_SelectHelpAbout(pbFlag: WordBool);
begin
  DefaultInterface.Set_SelectHelpAbout(pbFlag);
end;

function TNotesNoteCollectionProperties.Get_SelectHelpUsing: WordBool;
begin
    Result := DefaultInterface.SelectHelpUsing;
end;

procedure TNotesNoteCollectionProperties.Set_SelectHelpUsing(pbFlag: WordBool);
begin
  DefaultInterface.Set_SelectHelpUsing(pbFlag);
end;

function TNotesNoteCollectionProperties.Get_SelectHelpIndex: WordBool;
begin
    Result := DefaultInterface.SelectHelpIndex;
end;

procedure TNotesNoteCollectionProperties.Set_SelectHelpIndex(pbFlag: WordBool);
begin
  DefaultInterface.Set_SelectHelpIndex(pbFlag);
end;

function TNotesNoteCollectionProperties.Get_SelectReplicationFormulas: WordBool;
begin
    Result := DefaultInterface.SelectReplicationFormulas;
end;

procedure TNotesNoteCollectionProperties.Set_SelectReplicationFormulas(pbFlag: WordBool);
begin
  DefaultInterface.Set_SelectReplicationFormulas(pbFlag);
end;

function TNotesNoteCollectionProperties.Get_SelectACL: WordBool;
begin
    Result := DefaultInterface.SelectACL;
end;

procedure TNotesNoteCollectionProperties.Set_SelectACL(pbFlag: WordBool);
begin
  DefaultInterface.Set_SelectACL(pbFlag);
end;

function TNotesNoteCollectionProperties.Get_SelectionFormula: WideString;
begin
    Result := DefaultInterface.SelectionFormula;
end;

procedure TNotesNoteCollectionProperties.Set_SelectionFormula(const ppSelectionFormula: WideString);
  { Warning: The property SelectionFormula has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.SelectionFormula := ppSelectionFormula;
end;

function TNotesNoteCollectionProperties.Get_SinceTime: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.SinceTime;
end;

procedure TNotesNoteCollectionProperties.Set_SinceTime(pDate: OleVariant);
begin
  DefaultInterface.Set_SinceTime(pDate);
end;

function TNotesNoteCollectionProperties.Get_LastBuildTime: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.LastBuildTime;
end;

function TNotesNoteCollectionProperties.Get_Count: Integer;
begin
    Result := DefaultInterface.Count;
end;

function TNotesNoteCollectionProperties.Get_Parent: IDatabase;
begin
    Result := DefaultInterface.Parent;
end;

{$ENDIF}

class function CoNotesDXLExporter.Create: IDXLExporter;
begin
  Result := CreateComObject(CLASS_NotesDXLExporter) as IDXLExporter;
end;

class function CoNotesDXLExporter.CreateRemote(const MachineName: string): IDXLExporter;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NotesDXLExporter) as IDXLExporter;
end;

procedure TNotesDXLExporter.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{29131551-2EED-1069-BF5D-00DD011186B7}';
    IntfIID:   '{29131590-2EED-1069-BF5D-00DD011186B7}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TNotesDXLExporter.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as IDXLExporter;
  end;
end;

procedure TNotesDXLExporter.ConnectTo(svrIntf: IDXLExporter);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TNotesDXLExporter.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TNotesDXLExporter.GetDefaultInterface: IDXLExporter;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TNotesDXLExporter.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TNotesDXLExporterProperties.Create(Self);
{$ENDIF}
end;

destructor TNotesDXLExporter.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TNotesDXLExporter.GetServerProperties: TNotesDXLExporterProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TNotesDXLExporter.Get_Log: WideString;
begin
    Result := DefaultInterface.Log;
end;

function TNotesDXLExporter.Get_LogComment: WideString;
begin
    Result := DefaultInterface.LogComment;
end;

procedure TNotesDXLExporter.Set_LogComment(const ppLogComment: WideString);
  { Warning: The property LogComment has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.LogComment := ppLogComment;
end;

function TNotesDXLExporter.Get_ExitOnFirstFatalError: WordBool;
begin
    Result := DefaultInterface.ExitOnFirstFatalError;
end;

procedure TNotesDXLExporter.Set_ExitOnFirstFatalError(pbFlag: WordBool);
begin
  DefaultInterface.Set_ExitOnFirstFatalError(pbFlag);
end;

function TNotesDXLExporter.Get_ForceNoteFormat: WordBool;
begin
    Result := DefaultInterface.ForceNoteFormat;
end;

procedure TNotesDXLExporter.Set_ForceNoteFormat(pbFlag: WordBool);
begin
  DefaultInterface.Set_ForceNoteFormat(pbFlag);
end;

function TNotesDXLExporter.Get_OutputDOCTYPE: WordBool;
begin
    Result := DefaultInterface.OutputDOCTYPE;
end;

procedure TNotesDXLExporter.Set_OutputDOCTYPE(pbFlag: WordBool);
begin
  DefaultInterface.Set_OutputDOCTYPE(pbFlag);
end;

function TNotesDXLExporter.Get_DoctypeSYSTEM: WideString;
begin
    Result := DefaultInterface.DoctypeSYSTEM;
end;

procedure TNotesDXLExporter.Set_DoctypeSYSTEM(const ppTitle: WideString);
  { Warning: The property DoctypeSYSTEM has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DoctypeSYSTEM := ppTitle;
end;

function TNotesDXLExporter.Get_ConvertNotesbitmapsToGIF: WordBool;
begin
    Result := DefaultInterface.ConvertNotesbitmapsToGIF;
end;

procedure TNotesDXLExporter.Set_ConvertNotesbitmapsToGIF(pbFlag: WordBool);
begin
  DefaultInterface.Set_ConvertNotesbitmapsToGIF(pbFlag);
end;

function TNotesDXLExporter.Export(Input: OleVariant): WideString;
begin
  Result := DefaultInterface.Export(Input);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TNotesDXLExporterProperties.Create(AServer: TNotesDXLExporter);
begin
  inherited Create;
  FServer := AServer;
end;

function TNotesDXLExporterProperties.GetDefaultInterface: IDXLExporter;
begin
  Result := FServer.DefaultInterface;
end;

function TNotesDXLExporterProperties.Get_Log: WideString;
begin
    Result := DefaultInterface.Log;
end;

function TNotesDXLExporterProperties.Get_LogComment: WideString;
begin
    Result := DefaultInterface.LogComment;
end;

procedure TNotesDXLExporterProperties.Set_LogComment(const ppLogComment: WideString);
  { Warning: The property LogComment has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.LogComment := ppLogComment;
end;

function TNotesDXLExporterProperties.Get_ExitOnFirstFatalError: WordBool;
begin
    Result := DefaultInterface.ExitOnFirstFatalError;
end;

procedure TNotesDXLExporterProperties.Set_ExitOnFirstFatalError(pbFlag: WordBool);
begin
  DefaultInterface.Set_ExitOnFirstFatalError(pbFlag);
end;

function TNotesDXLExporterProperties.Get_ForceNoteFormat: WordBool;
begin
    Result := DefaultInterface.ForceNoteFormat;
end;

procedure TNotesDXLExporterProperties.Set_ForceNoteFormat(pbFlag: WordBool);
begin
  DefaultInterface.Set_ForceNoteFormat(pbFlag);
end;

function TNotesDXLExporterProperties.Get_OutputDOCTYPE: WordBool;
begin
    Result := DefaultInterface.OutputDOCTYPE;
end;

procedure TNotesDXLExporterProperties.Set_OutputDOCTYPE(pbFlag: WordBool);
begin
  DefaultInterface.Set_OutputDOCTYPE(pbFlag);
end;

function TNotesDXLExporterProperties.Get_DoctypeSYSTEM: WideString;
begin
    Result := DefaultInterface.DoctypeSYSTEM;
end;

procedure TNotesDXLExporterProperties.Set_DoctypeSYSTEM(const ppTitle: WideString);
  { Warning: The property DoctypeSYSTEM has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DoctypeSYSTEM := ppTitle;
end;

function TNotesDXLExporterProperties.Get_ConvertNotesbitmapsToGIF: WordBool;
begin
    Result := DefaultInterface.ConvertNotesbitmapsToGIF;
end;

procedure TNotesDXLExporterProperties.Set_ConvertNotesbitmapsToGIF(pbFlag: WordBool);
begin
  DefaultInterface.Set_ConvertNotesbitmapsToGIF(pbFlag);
end;

{$ENDIF}

class function CoNotesDXLImporter.Create: IDXLImporter;
begin
  Result := CreateComObject(CLASS_NotesDXLImporter) as IDXLImporter;
end;

class function CoNotesDXLImporter.CreateRemote(const MachineName: string): IDXLImporter;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NotesDXLImporter) as IDXLImporter;
end;

procedure TNotesDXLImporter.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{29131552-2EED-1069-BF5D-00DD011186B7}';
    IntfIID:   '{29131591-2EED-1069-BF5D-00DD011186B7}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TNotesDXLImporter.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as IDXLImporter;
  end;
end;

procedure TNotesDXLImporter.ConnectTo(svrIntf: IDXLImporter);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TNotesDXLImporter.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TNotesDXLImporter.GetDefaultInterface: IDXLImporter;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TNotesDXLImporter.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TNotesDXLImporterProperties.Create(Self);
{$ENDIF}
end;

destructor TNotesDXLImporter.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TNotesDXLImporter.GetServerProperties: TNotesDXLImporterProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TNotesDXLImporter.Get_Log: WideString;
begin
    Result := DefaultInterface.Log;
end;

function TNotesDXLImporter.Get_LogComment: WideString;
begin
    Result := DefaultInterface.LogComment;
end;

procedure TNotesDXLImporter.Set_LogComment(const ppLogComment: WideString);
  { Warning: The property LogComment has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.LogComment := ppLogComment;
end;

function TNotesDXLImporter.Get_ExitOnFirstFatalError: WordBool;
begin
    Result := DefaultInterface.ExitOnFirstFatalError;
end;

procedure TNotesDXLImporter.Set_ExitOnFirstFatalError(pbFlag: WordBool);
begin
  DefaultInterface.Set_ExitOnFirstFatalError(pbFlag);
end;

function TNotesDXLImporter.Get_ACLImportOption: DXLIMPORTOPTION;
begin
    Result := DefaultInterface.ACLImportOption;
end;

procedure TNotesDXLImporter.Set_ACLImportOption(pOption: DXLIMPORTOPTION);
begin
  DefaultInterface.Set_ACLImportOption(pOption);
end;

function TNotesDXLImporter.Get_DesignImportOption: DXLIMPORTOPTION;
begin
    Result := DefaultInterface.DesignImportOption;
end;

procedure TNotesDXLImporter.Set_DesignImportOption(pOption: DXLIMPORTOPTION);
begin
  DefaultInterface.Set_DesignImportOption(pOption);
end;

function TNotesDXLImporter.Get_DocumentImportOption: DXLIMPORTOPTION;
begin
    Result := DefaultInterface.DocumentImportOption;
end;

procedure TNotesDXLImporter.Set_DocumentImportOption(pOption: DXLIMPORTOPTION);
begin
  DefaultInterface.Set_DocumentImportOption(pOption);
end;

function TNotesDXLImporter.Get_ReplaceDBProperties: WordBool;
begin
    Result := DefaultInterface.ReplaceDBProperties;
end;

procedure TNotesDXLImporter.Set_ReplaceDBProperties(pbFlag: WordBool);
begin
  DefaultInterface.Set_ReplaceDBProperties(pbFlag);
end;

function TNotesDXLImporter.Get_InputValidationOption: VALIDATIONOPTION;
begin
    Result := DefaultInterface.InputValidationOption;
end;

procedure TNotesDXLImporter.Set_InputValidationOption(pOption: VALIDATIONOPTION);
begin
  DefaultInterface.Set_InputValidationOption(pOption);
end;

function TNotesDXLImporter.Get_CreateFTIndex: WordBool;
begin
    Result := DefaultInterface.CreateFTIndex;
end;

procedure TNotesDXLImporter.Set_CreateFTIndex(pbFlag: WordBool);
begin
  DefaultInterface.Set_CreateFTIndex(pbFlag);
end;

function TNotesDXLImporter.Get_ImportedNoteCount: Integer;
begin
    Result := DefaultInterface.ImportedNoteCount;
end;

function TNotesDXLImporter.Get_ReplicaRequiredForReplaceOrUpdate: WordBool;
begin
    Result := DefaultInterface.ReplicaRequiredForReplaceOrUpdate;
end;

procedure TNotesDXLImporter.Set_ReplicaRequiredForReplaceOrUpdate(pbFlag: WordBool);
begin
  DefaultInterface.Set_ReplicaRequiredForReplaceOrUpdate(pbFlag);
end;

function TNotesDXLImporter.Get_UnknownTokenLogOption: DXLLOGOPTION;
begin
    Result := DefaultInterface.UnknownTokenLogOption;
end;

procedure TNotesDXLImporter.Set_UnknownTokenLogOption(pOption: DXLLOGOPTION);
begin
  DefaultInterface.Set_UnknownTokenLogOption(pOption);
end;

function TNotesDXLImporter.GetFirstImportedNoteId: WideString;
begin
  Result := DefaultInterface.GetFirstImportedNoteId;
end;

function TNotesDXLImporter.GetNextImportedNoteId(const pNoteid: WideString): WideString;
begin
  Result := DefaultInterface.GetNextImportedNoteId(pNoteid);
end;

procedure TNotesDXLImporter.Import(Input: OleVariant; importDB: OleVariant);
begin
  DefaultInterface.Import(Input, importDB);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TNotesDXLImporterProperties.Create(AServer: TNotesDXLImporter);
begin
  inherited Create;
  FServer := AServer;
end;

function TNotesDXLImporterProperties.GetDefaultInterface: IDXLImporter;
begin
  Result := FServer.DefaultInterface;
end;

function TNotesDXLImporterProperties.Get_Log: WideString;
begin
    Result := DefaultInterface.Log;
end;

function TNotesDXLImporterProperties.Get_LogComment: WideString;
begin
    Result := DefaultInterface.LogComment;
end;

procedure TNotesDXLImporterProperties.Set_LogComment(const ppLogComment: WideString);
  { Warning: The property LogComment has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.LogComment := ppLogComment;
end;

function TNotesDXLImporterProperties.Get_ExitOnFirstFatalError: WordBool;
begin
    Result := DefaultInterface.ExitOnFirstFatalError;
end;

procedure TNotesDXLImporterProperties.Set_ExitOnFirstFatalError(pbFlag: WordBool);
begin
  DefaultInterface.Set_ExitOnFirstFatalError(pbFlag);
end;

function TNotesDXLImporterProperties.Get_ACLImportOption: DXLIMPORTOPTION;
begin
    Result := DefaultInterface.ACLImportOption;
end;

procedure TNotesDXLImporterProperties.Set_ACLImportOption(pOption: DXLIMPORTOPTION);
begin
  DefaultInterface.Set_ACLImportOption(pOption);
end;

function TNotesDXLImporterProperties.Get_DesignImportOption: DXLIMPORTOPTION;
begin
    Result := DefaultInterface.DesignImportOption;
end;

procedure TNotesDXLImporterProperties.Set_DesignImportOption(pOption: DXLIMPORTOPTION);
begin
  DefaultInterface.Set_DesignImportOption(pOption);
end;

function TNotesDXLImporterProperties.Get_DocumentImportOption: DXLIMPORTOPTION;
begin
    Result := DefaultInterface.DocumentImportOption;
end;

procedure TNotesDXLImporterProperties.Set_DocumentImportOption(pOption: DXLIMPORTOPTION);
begin
  DefaultInterface.Set_DocumentImportOption(pOption);
end;

function TNotesDXLImporterProperties.Get_ReplaceDBProperties: WordBool;
begin
    Result := DefaultInterface.ReplaceDBProperties;
end;

procedure TNotesDXLImporterProperties.Set_ReplaceDBProperties(pbFlag: WordBool);
begin
  DefaultInterface.Set_ReplaceDBProperties(pbFlag);
end;

function TNotesDXLImporterProperties.Get_InputValidationOption: VALIDATIONOPTION;
begin
    Result := DefaultInterface.InputValidationOption;
end;

procedure TNotesDXLImporterProperties.Set_InputValidationOption(pOption: VALIDATIONOPTION);
begin
  DefaultInterface.Set_InputValidationOption(pOption);
end;

function TNotesDXLImporterProperties.Get_CreateFTIndex: WordBool;
begin
    Result := DefaultInterface.CreateFTIndex;
end;

procedure TNotesDXLImporterProperties.Set_CreateFTIndex(pbFlag: WordBool);
begin
  DefaultInterface.Set_CreateFTIndex(pbFlag);
end;

function TNotesDXLImporterProperties.Get_ImportedNoteCount: Integer;
begin
    Result := DefaultInterface.ImportedNoteCount;
end;

function TNotesDXLImporterProperties.Get_ReplicaRequiredForReplaceOrUpdate: WordBool;
begin
    Result := DefaultInterface.ReplicaRequiredForReplaceOrUpdate;
end;

procedure TNotesDXLImporterProperties.Set_ReplicaRequiredForReplaceOrUpdate(pbFlag: WordBool);
begin
  DefaultInterface.Set_ReplicaRequiredForReplaceOrUpdate(pbFlag);
end;

function TNotesDXLImporterProperties.Get_UnknownTokenLogOption: DXLLOGOPTION;
begin
    Result := DefaultInterface.UnknownTokenLogOption;
end;

procedure TNotesDXLImporterProperties.Set_UnknownTokenLogOption(pOption: DXLLOGOPTION);
begin
  DefaultInterface.Set_UnknownTokenLogOption(pOption);
end;

{$ENDIF}

procedure Register;
begin
  RegisterComponents(dtlServerPage, [TNotesACL, TNotesACLEntry, TNotesAgent, TNotesDatabase, 
    TNotesDateRange, TNotesDateTime, TNotesDbDirectory, TNotesDocument, TNotesDocumentCollection, 
    TNotesEmbeddedObject, TNotesForm, TNotesItem, TNotesInternational, TNotesLog, 
    TNotesName, TNotesNewsletter, TNotesOutline, TNotesOutlineEntry, TNotesRichTextItem, 
    TNotesRichTextStyle, TNotesRichTextParagraphStyle, TNotesRichTextTab, TNotesRegistration, TNotesReplication, 
    TNotesSession, TNotesView, TNotesViewColumn, TNotesViewEntry, TNotesViewEntryCollection, 
    TNotesViewNavigator, TNotesMIMEEntity, TNotesMIMEHeader, TNotesStream, TNotesAdministrationProcess, 
    TNotesReplicationEntry, TNotesColorObject, TNotesRichTextNavigator, TNotesRichTextRange, TNotesRichTextDoclink, 
    TNotesRichTextSection, TNotesRichTextTable, TNotesNoteCollection, TNotesDXLExporter, TNotesDXLImporter]);
end;

end.
