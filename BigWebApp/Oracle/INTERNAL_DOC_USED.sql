CREATE TABLE INTERNAL_DOC_USED 
(
  ID          NUMBER(15,0) NOT NULL PRIMARY KEY, 
  IQ_DOCS_ID  NUMBER(15,0) NOT NULL ENABLE, 
  SOURCE      VARCHAR2(50 BYTE) NOT NULL ENABLE, 
  SOURCE_ID   NUMBER(15,0) NOT NULL ENABLE, 
  SEQ         NUMBER(8,0), 
  PRINT_WITH  VARCHAR2(25 BYTE),
  ORIGIN      VARCHAR2(3 BYTE),

  CONSTRAINT FK_INTERNAL_DOC_USED_IQ_DOCS FOREIGN KEY (IQ_DOCS_ID)
  REFERENCES IQ_DOCS(ID) ON DELETE CASCADE ENABLE
);
/

CREATE TABLE INTERNAL_DOC_MAPPING
(
  TABLE_NAME      VARCHAR2(50 BYTE) NOT NULL PRIMARY KEY,
  ROW_ID_COL_NAME VARCHAR2(50 BYTE) NOT NULL
);
/

CREATE SEQUENCE S_INTERNAL_DOC_USED;
/

CREATE OR REPLACE TRIGGER TI_SEQ_INTERNAL_DOC_USED 
  BEFORE INSERT ON INTERNAL_DOC_USED 
  FOR EACH ROW
DECLARE
  RowIDCol  VARCHAR(50);
  SqlStmt   VARCHAR2(2000) :=
    '
      INSERT INTO :1(:2, IQ_DOCS_ID, DOCSEQ, TYPE, ORIGIN)
      VALUES(:3, :4, :5, :6, ''WEB'')
    ';
BEGIN
  IF :NEW.ID IS NULL THEN
    SELECT S_INTERNAL_DOC_USED.NextVal INTO :NEW.ID FROM dual;
  END IF;
  
  -- If this insert was sent from any Windows table, we don't need to duplicate it back
  IF :NEW.ORIGIN <> 'WIN' THEN
    SELECT ROW_ID_COL_NAME INTO RowIDCol FROM INTERNAL_DOC_MAPPING WHERE TABLE_NAME = UPPER(:NEW.SOURCE);
  
    EXECUTE IMMEDIATE SqlStmt USING :NEW.SOURCE, RowIDCol, :NEW.SOURCE_ID, :NEW.IQ_DOCS_ID, :NEW.SEQ, :NEW.PRINT_WITH;
  END IF;
END; 
/

CREATE OR REPLACE TRIGGER TU_INTERNAL_DOC_USED 
  BEFORE UPDATE ON INTERNAL_DOC_USED 
  FOR EACH ROW
DECLARE
  RowIDCol  VARCHAR(50);
  SqlStmt   VARCHAR2(2000) :=
    '
      UPDATE :1
      SET
        DOCSEQ = :2,
        TYPE   = :3
      WHERE (:4 = :5) AND (IQ_DOCS_ID = :6) AND (DOCSEQ = :7)
    ';
BEGIN
  -- If this update didn't come from the Windows tables, duplicate it
  IF :OLD.ORIGIN <> 'WIN' THEN
    SELECT ROW_ID_COL_NAME INTO RowIDCol FROM INTERNAL_DOC_MAPPING WHERE TABLE_NAME = UPPER(:NEW.SOURCE);

    EXECUTE IMMEDIATE SqlStmt USING :NEW.SOURCE, :NEW.SEQ, :NEW.PRINT_WITH, RowIDCol, :NEW.SOURCE_ID, :NEW.IQ_DOCS_ID, :OLD.SEQ; 
  ELSE
    :NEW.ORIGIN := 'WEB';
  END IF;
END; 
/

CREATE OR REPLACE TRIGGER TD_INTERNAL_DOC_USED 
  BEFORE DELETE ON INTERNAL_DOC_USED 
  FOR EACH ROW
DECLARE
  RowIDCol  VARCHAR(50);
  SqlStmt   VARCHAR2(2000) :=
    '
      DELETE FROM :1
      WHERE (:2 = :3) AND (IQ_DOCS_ID = :4) AND (DOCSEQ = :5)
    ';
BEGIN
  SELECT ROW_ID_COL_NAME INTO RowIDCol FROM INTERNAL_DOC_MAPPING WHERE TABLE_NAME = UPPER(:OLD.SOURCE);

  EXECUTE IMMEDIATE SqlStmt USING :OLD.SOURCE, RowIDCol, :OLD.SOURCE_ID, :OLD.IQ_DOCS_ID, :OLD.SEQ; 
EXCEPTION
  WHEN NO_DATA_FOUND THEN
    NULL;
END;
/

ALTER TRIGGER TI_SEQ_INTERNAL_DOC_USED ENABLE;
ALTER TRIGGER TU_INTERNAL_DOC_USED ENABLE;
ALTER TRIGGER TD_INTERNAL_DOC_USED ENABLE;
/
