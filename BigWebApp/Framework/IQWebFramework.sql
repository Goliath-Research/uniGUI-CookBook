--
-- IQModule
--

CREATE TABLE IQModule
(
  ID        NUMBER(5,0) NOT NULL PRIMARY KEY, 
	NAME      VARCHAR2(64 CHAR) NOT NULL UNIQUE
)
/
CREATE SEQUENCE S_IQModule MINVALUE 1 INCREMENT BY 1;
/
CREATE OR REPLACE TRIGGER TI_IQModule 
BEFORE INSERT ON IQModule 
FOR EACH ROW
WHEN (NEW.ID IS NULL)
BEGIN
  :NEW.ID := S_IQModule.NEXTVAL; 
END;
/
ALTER TRIGGER TI_IQModule ENABLE;
/

--
-- IQForm
--

CREATE TABLE IQForm
(
  ID                NUMBER(5,0) NOT NULL PRIMARY KEY, 
	NAME              VARCHAR2(64 CHAR) NOT NULL UNIQUE,
  Singleton         CHAR(1) DEFAULT 'Y' CHECK(Singleton IN ( 'Y', 'N' )),
  DataModule_ID     NUMBER(5,0),  -- Constraint FK_Form_DataModule
  DefaultDesign_ID  NUMBER(5,0),  -- Constraint FK_Form_FormDesign
  Parent_ID         NUMBER(5,0) REFERENCES IQForm(ID),
  Module_ID         NUMBER(5,0) NOT NULL
)
/
CREATE SEQUENCE S_IQForm MINVALUE 1 INCREMENT BY 1;
/
CREATE OR REPLACE TRIGGER TI_IQForm 
BEFORE INSERT ON IQForm 
FOR EACH ROW
WHEN (NEW.ID IS NULL)
BEGIN
  :NEW.ID := S_IQForm.NEXTVAL; 
END;
/
ALTER TRIGGER TI_IQForm ENABLE;
/
CREATE OR REPLACE TRIGGER TD_IQForm 
BEFORE DELETE ON IQForm 
FOR EACH ROW
WHEN (OLD.DataModule_ID IS NOT NULL)
BEGIN
  DELETE FROM IQDataModule WHERE ID = :OLD.DataModule_ID; 
END;
/
ALTER TRIGGER TD_IQForm ENABLE;
/
ALTER TABLE
  IQForm
ADD CONSTRAINT
  FK_Form_Module FOREIGN KEY (Module_ID)
REFERENCES 
  IQModule(ID)
ON DELETE CASCADE ENABLE;
/

--
-- IQFormDesign
--

CREATE TABLE IQFormDesign
(
  ID      NUMBER(5,0) NOT NULL PRIMARY KEY, 
	NAME    VARCHAR2(64 CHAR) NOT NULL UNIQUE,
  Form_ID NUMBER(5,0) NOT NULL,
  DFM     VARCHAR2(2000 CHAR)
)
/
CREATE SEQUENCE S_IQFormDesign MINVALUE 1 INCREMENT BY 1;
/
CREATE OR REPLACE TRIGGER TI_IQFormDesign 
BEFORE INSERT ON IQFormDesign 
FOR EACH ROW
WHEN (NEW.ID IS NULL)
BEGIN
  :NEW.ID := S_IQFormDesign.NEXTVAL; 
END;
/
ALTER TRIGGER TI_IQFormDesign ENABLE;
/
ALTER TABLE
  IQFormDesign
ADD CONSTRAINT
  FK_FormDesign_Form FOREIGN KEY (Form_ID)
REFERENCES 
  IQForm(ID)
ON DELETE CASCADE ENABLE;
/

--
-- IQDataModule
--

CREATE TABLE IQDataModule
(
  ID              NUMBER(5,0) NOT NULL PRIMARY KEY, 
	NAME            VARCHAR2(64 CHAR) NOT NULL UNIQUE,
  MainMenu        VARCHAR2(64 CHAR),
  MainDataSet_ID  NUMBER(5,0) -- Constraint FK_DataModule_DataSet
)
/
CREATE SEQUENCE S_IQDataModule MINVALUE 1 INCREMENT BY 1;
/
CREATE OR REPLACE TRIGGER TI_IQDataModule 
BEFORE INSERT ON IQDataModule 
FOR EACH ROW
WHEN (NEW.ID IS NULL)
BEGIN
  :NEW.ID := S_IQDataModule.NEXTVAL; 
END;
/
ALTER TRIGGER TI_IQDataModule ENABLE;
/

--
-- IQDataSet
--

CREATE TABLE IQDataSet
(
  ID                NUMBER(5,0) NOT NULL PRIMARY KEY, 
	NAME              VARCHAR2(64 CHAR) NOT NULL UNIQUE,
  KeyField_ID       NUMBER(5,0),
  MasterDataSet_ID  NUMBER(5,0),
  DetailField_ID    NUMBER(5,0),
  TableName         VARCHAR2(64 CHAR),
  SqlQuery          VARCHAR2(2000 CHAR),
  DataModule_ID     NUMBER(5,0) NOT NULL
)
/
CREATE SEQUENCE S_IQDataSet MINVALUE 1 INCREMENT BY 1;
/
CREATE OR REPLACE TRIGGER TI_IQDataSet 
BEFORE INSERT ON IQDataSet 
FOR EACH ROW
WHEN (NEW.ID IS NULL)
BEGIN
  :NEW.ID := S_IQDataSet.NEXTVAL; 
END;
/
ALTER TRIGGER TI_IQDataSet ENABLE;
/
ALTER TABLE
  IQDataSet
ADD CONSTRAINT
  FK_DataSet_DataModule FOREIGN KEY (DataModule_ID)
REFERENCES 
  IQDataModule(ID)
ON DELETE CASCADE
ENABLE;
/

--
-- IQField
--

CREATE TABLE IQField
(
  ID            NUMBER(5,0) NOT NULL PRIMARY KEY, 
	Name          VARCHAR2(64 CHAR) NOT NULL UNIQUE,
  DisplayLabel  VARCHAR2(64 CHAR),
  DisplayWidth  NUMBER(5,0),
  FieldSize     NUMBER(5,0),
  Precision     NUMBER(5,0), 
  FixedChar     CHAR(1) DEFAULT 'N' CHECK(FixedChar IN ( 'Y', 'N' )),
  DataType      NUMBER(2,0) NOT NULL,
  FieldType     NUMBER(2,0) NOT NULL,
  FieldTypeID   NUMBER(5,0),
  Editor_ID     NUMBER(2,0),
  DataSet_ID    NUMBER(5,0) NOT NULL
)
/
CREATE SEQUENCE S_IQField MINVALUE 1 INCREMENT BY 1;
/

CREATE OR REPLACE TRIGGER TI_IQField 
BEFORE INSERT ON IQField 
FOR EACH ROW
WHEN (NEW.ID IS NULL)
BEGIN
  :NEW.ID := S_IQField.NEXTVAL; 
END;
/
ALTER TRIGGER TI_IQField ENABLE;
/
ALTER TABLE
  IQField
ADD CONSTRAINT
  FK_Field_DataSet FOREIGN KEY (DataSet_ID)
REFERENCES 
  IQDataSet(ID)
ON DELETE CASCADE ENABLE;
/
ALTER TABLE
  IQDataSet
ADD CONSTRAINT
  FK_DataSet_Field_Key FOREIGN KEY (KeyField_ID)
REFERENCES 
  IQField(ID)
ON DELETE SET NULL
ENABLE;
/
ALTER TABLE
  IQDataSet
ADD CONSTRAINT
  FK_DataSet_Field_Detail FOREIGN KEY (DetailField_ID)
REFERENCES 
  IQField(ID)
ON DELETE SET NULL
ENABLE;
/

--
-- Constraints for Module | Form | DataModule | DataSet
--

ALTER TABLE
  IQForm
ADD CONSTRAINT
  FK_Form_DataModule FOREIGN KEY (DataModule_ID)
REFERENCES 
  IQDataModule(ID)
ENABLE;
/
ALTER TABLE
  IQForm
ADD CONSTRAINT
  FK_Form_FormDesign FOREIGN KEY (DefaultDesign_ID)
REFERENCES 
  IQFormDesign(ID)
ENABLE;
/
ALTER TABLE
  IQDataModule
ADD CONSTRAINT
  FK_DataModule_DataSet FOREIGN KEY (MainDataSet_ID)
REFERENCES 
  IQDataSet(ID)
ENABLE;
/

--
-- IQPickTreeNode
--

CREATE TABLE IQPickTreeNode
(
  ID        NUMBER(5,0) NOT NULL PRIMARY KEY, 
	Text      VARCHAR2(64 CHAR) NOT NULL,
  Seq       NUMBER(3,0) DEFAULT 0,
  Parent_ID NUMBER(5,0) REFERENCES IQPickTreeNode(ID) ON DELETE CASCADE
)
/
CREATE SEQUENCE S_IQPickTreeNode MINVALUE 1 INCREMENT BY 1;
/

CREATE OR REPLACE TRIGGER TI_IQPickTreeNode 
BEFORE INSERT ON IQPickTreeNode 
FOR EACH ROW  
WHEN (NEW.ID IS NULL)
BEGIN
  :NEW.ID := S_IQPickTreeNode.NEXTVAL; 
END;
/
ALTER TRIGGER TI_IQPickTreeNode ENABLE;

--
-- IQPickTree
--

CREATE TABLE IQPickTree
(
  ID            NUMBER(5,0) NOT NULL PRIMARY KEY, 
	Name          VARCHAR2(64 CHAR) NOT NULL UNIQUE,
  Levels        NUMBER(3,0),
  PickTreeNode_ID NUMBER(5,0) REFERENCES IQPickTreeNode(ID) 
)
/
CREATE SEQUENCE S_IQPickTree MINVALUE 1 INCREMENT BY 1;
/

CREATE OR REPLACE TRIGGER TI_IQPickTree 
BEFORE INSERT ON IQPickTree 
FOR EACH ROW
BEGIN
  IF :NEW.ID IS NULL THEN
    :NEW.ID := S_IQPickTree.NEXTVAL; 
  END IF;
  
  INSERT INTO IQPickTreeNode(Text)
  VALUES(:NEW.Name);
  
  :NEW.PickTreeNode_ID := S_IQPickTreeNode.CURRVAL;
END;
/
ALTER TRIGGER TI_IQPickTree ENABLE;
/
CREATE OR REPLACE TRIGGER TD_IQPickTree 
BEFORE DELETE ON IQPickTree 
FOR EACH ROW
WHEN (OLD.PickTreeNode_ID IS NOT NULL)
BEGIN
  DELETE FROM IQPickTreeNode WHERE ID = :OLD.PickTreeNode_ID; 
END;
/
ALTER TRIGGER TD_IQPickTree ENABLE;
/
-- Query for selecting / editing tree

--select ID, Text, Seq, level
--from IQPickTreeNode
--connect by prior id = Parent_ID
--start with id = (select PickTreeNode_ID from IQPickTree where ID = :PickTree_ID)
--order SIBLINGS  by Seq, Text;

--
-- IQPickList
--

CREATE TABLE IQPickList
(
  ID    NUMBER(5,0) NOT NULL PRIMARY KEY, 
	Name  VARCHAR2(64 CHAR) NOT NULL UNIQUE
)
/
CREATE SEQUENCE S_IQPickList MINVALUE 1 INCREMENT BY 1;
/
CREATE OR REPLACE TRIGGER TI_IQPickList 
BEFORE INSERT ON IQPickList 
FOR EACH ROW  
WHEN (NEW.ID IS NULL)
BEGIN
  :NEW.ID := S_IQPickList.NEXTVAL; 
END;
/
ALTER TRIGGER TI_IQPickList ENABLE;
/

--
-- IQPickListItem
--

CREATE TABLE IQPickListItem
(
  ID            NUMBER(5,0) NOT NULL PRIMARY KEY, 
	Text          VARCHAR2(64 CHAR) NOT NULL,
  Seq           NUMBER(3,0) DEFAULT 0,
  PickList_ID   NUMBER(5,0) REFERENCES IQPickList(ID) ON DELETE CASCADE
)
/
CREATE SEQUENCE S_IQPickListItem MINVALUE 1 INCREMENT BY 1;
/

CREATE OR REPLACE TRIGGER TI_IQPickListItem 
BEFORE INSERT ON IQPickListItem 
FOR EACH ROW  
WHEN (NEW.ID IS NULL)
BEGIN
  :NEW.ID := S_IQPickListItem.NEXTVAL; 
END;
/
ALTER TRIGGER TI_IQPickListItem ENABLE;
/

--
-- IQPickDataSet
--

CREATE TABLE IQPickDataSet
(
  ID            NUMBER(5,0) NOT NULL PRIMARY KEY, 
	Name          VARCHAR2(64 CHAR) NOT NULL,
  DataSet_ID    NUMBER(5,0),
  ListField_ID  NUMBER(5,0)
)
/
CREATE SEQUENCE S_IQPickDataSet MINVALUE 1 INCREMENT BY 1;
/

CREATE OR REPLACE TRIGGER TI_IQPickDataSet 
BEFORE INSERT ON IQPickDataSet 
FOR EACH ROW  
WHEN (NEW.ID IS NULL)
BEGIN
  :NEW.ID := S_IQPickDataSet.NEXTVAL; 
END;
/
ALTER TRIGGER TI_IQPickDataSet ENABLE;
/

ALTER TABLE
  IQPickDataSet
ADD CONSTRAINT
  FK_PickDataSet_DataSet FOREIGN KEY (DataSet_ID)
REFERENCES 
  IQDataSet(ID)
ON DELETE CASCADE
ENABLE;
/

ALTER TABLE
  IQPickDataSet
ADD CONSTRAINT
  FK_PickDataSet_Field FOREIGN KEY (ListField_ID)
REFERENCES 
  IQField(ID)
ON DELETE CASCADE
ENABLE;
/
